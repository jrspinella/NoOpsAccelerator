{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.13.1.58284",
      "templateHash": "1972653436053614629"
    }
  },
  "parameters": {
    "parRequired": {
      "type": "object",
      "metadata": {
        "description": "Required. The values used with all resources."
      }
    },
    "parTags": {
      "type": "object",
      "metadata": {
        "description": "Required. A set of key/value pairs of tags assigned to the subscription or resource."
      }
    },
    "parLocation": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "Required. The region to deploy resources into. It defaults to the deployment location."
      }
    },
    "parDeploymentNameSuffix": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "A suffix to use for naming deployments uniquely. It defaults to the Bicep resolution of the \"utcNow()\" function."
      }
    },
    "dateUtcNow": {
      "type": "string",
      "defaultValue": "[utcNow('yyyy-MM-dd HH:mm:ss')]",
      "metadata": {
        "description": "The current date - do not override the default value"
      }
    },
    "parNetworkArtifacts": {
      "type": "object",
      "metadata": {
        "description": "Optional. Enables Operations Network Artifacts Resource Group with KV and Storage account for the ops subscriptions used in the deployment."
      }
    },
    "parDdosStandard": {
      "type": "object",
      "metadata": {
        "description": "DDOS Standard configuration.  See readme.md for configuration settings."
      }
    },
    "parHub": {
      "type": "object",
      "metadata": {
        "description": "Hub Virtual network configuration.  See azresources/hub-spoke-core/vdss/hub/readme.md"
      }
    },
    "parOperationsSpoke": {
      "type": "object",
      "metadata": {
        "description": "Operations Spoke Virtual network configuration.  See azresources/hub-spoke-core/vdms/operations/readme.md"
      }
    },
    "parAzureFirewall": {
      "type": "object",
      "metadata": {
        "description": "Required. Azure Firewall configuration. Azure Firewall is deployed in Forced Tunneling mode where a route table must be added as the next hop."
      }
    },
    "parLogging": {
      "type": "object",
      "metadata": {
        "description": "Enables logging parmeters and Microsoft Sentinel within the Log Analytics Workspace created in this deployment. See azresources/hub-spoke-core/vdms/logging/readme.md"
      }
    },
    "parSecurityCenter": {
      "type": "object",
      "metadata": {
        "description": "Microsoft Defender for Cloud.  It includes email and phone."
      }
    },
    "parRemoteAccess": {
      "type": "object",
      "metadata": {
        "description": "When set to \"true\", provisions Azure Bastion Host with Jumpboxes, when specified. It defaults to \"false\"."
      }
    }
  },
  "variables": {
    "$fxv#0": "{\r\n    \"customerUsageAttribution\": {\r\n      \"enabled\": true,\r\n      \"modules\": {\r\n        \"managementGroups\": \"55a992b5-9ab1-4b3c-8c14-a9a3e5c1e0c2\",\r\n        \"policy\": \"3b7f335c-5580-4035-bc75-c835c15402da\",\r\n        \"roles\": \"5dd6ad4b-bc45-4346-9189-7bc46477182a\",\r\n        \"platforms\": {\r\n          \"hubspoke1\": \"69ae5a76-8aae-437d-affa-14c43b5019ea\",\r\n          \"hubspoke3\": \"66764817-8a40-4c5a-a9ea-dee657961d13\"\r\n        },\r\n        \"enclaves\": {\r\n          \"sccahubspokeaks\": \"434fc92b-dbc0-4770-8642-f611851881bd\"\r\n        },\r\n        \"workloads\": {\r\n          \"aks\": \"8790e990-91e2-49ba-8362-f6d9e208a193\"\r\n        }\r\n      }\r\n    }\r\n  }",
    "telemetry": "[json(variables('$fxv#0'))]",
    "varResourceToken": "resource_token",
    "varNameToken": "name_token",
    "varNamingConvention": "[format('{0}-{1}-{2}-{3}-{4}', toLower(parameters('parRequired').orgPrefix), toLower(parameters('parLocation')), toLower(parameters('parRequired').deployEnvironment), variables('varNameToken'), toLower(variables('varResourceToken')))]",
    "varResourceGroupNamingConvention": "[replace(variables('varNamingConvention'), variables('varResourceToken'), 'rg')]",
    "varHubName": "hub",
    "varHubResourceGroupName": "[replace(variables('varResourceGroupNamingConvention'), variables('varNameToken'), variables('varHubName'))]",
    "operationsName": "operations",
    "varOperationsResourceGroupName": "[replace(variables('varResourceGroupNamingConvention'), variables('varNameToken'), variables('operationsName'))]",
    "referential": {
      "region": "[parameters('parLocation')]",
      "deploymentDate": "[parameters('dateUtcNow')]"
    }
  },
  "resources": [
    {
      "condition": "[variables('telemetry').customerUsageAttribution.enabled]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2021-04-01",
      "name": "[format('pid-{0}-{1}', variables('telemetry').customerUsageAttribution.modules.platforms.hubspoke1, uniqueString(deployment().name, parameters('parLocation')))]",
      "location": "[parameters('parLocation')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('deploy-hubspoke-tags--{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
      "subscriptionId": "[parameters('parHub').subscriptionId]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "tags": {
            "value": "[union(parameters('parTags'), variables('referential'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.13.1.58284",
              "templateHash": "216182755991536021"
            }
          },
          "parameters": {
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Tags for the resource group. If not provided, removes existing tags."
              }
            },
            "onlyUpdate": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Instead of overwriting the existing tags, combine them with the new tags."
              }
            },
            "resourceGroupName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the Resource Group to assign the tags to. If no Resource Group name is provided, and Subscription ID is provided, the module deploys at subscription level, therefore assigns the provided tags to the subscription."
              }
            },
            "subscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().id]",
              "metadata": {
                "description": "Optional. Subscription ID of the subscription to assign the tags to. If no Resource Group name is provided, the module deploys at subscription level, therefore assigns the provided tags to the subscription."
              }
            }
          },
          "resources": [
            {
              "condition": "[and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Tags-Sub', deployment().name)]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "onlyUpdate": {
                    "value": "[parameters('onlyUpdate')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "1405711280777017718"
                    }
                  },
                  "parameters": {
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags for the resource group. If not provided, removes existing tags."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. The name of the tags resource."
                      }
                    },
                    "onlyUpdate": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Instead of overwriting the existing tags, combine them with the new tags."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/tags",
                      "apiVersion": "2019-10-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "tags": "[if(parameters('onlyUpdate'), union(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2020-10-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]"
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name))]"
                      ]
                    },
                    {
                      "condition": "[parameters('onlyUpdate')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-ReadTags', deployment().name)]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "12771816053208228273"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the tags resource."
                              }
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "existingTags": {
                              "type": "object",
                              "value": "[if(contains(reference(subscriptionResourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01'), 'tags'), reference(subscriptionResourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01').tags, createObject())]",
                              "metadata": {
                                "description": "Tags currently applied to the subscription level"
                              }
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the tags resource."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "value": "[if(parameters('onlyUpdate'), union(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2020-10-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]",
                      "metadata": {
                        "description": "The applied tags."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[subscriptionResourceId('Microsoft.Resources/tags', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the applied tags."
                      }
                    }
                  }
                }
              }
            },
            {
              "condition": "[and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-Tags-RG', deployment().name)]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "onlyUpdate": {
                    "value": "[parameters('onlyUpdate')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "3625051557808284647"
                    }
                  },
                  "parameters": {
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags for the resource group. If not provided, removes existing tags."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. The name of the tags resource."
                      }
                    },
                    "onlyUpdate": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Instead of overwriting the existing tags, combine them with the new tags."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/tags",
                      "apiVersion": "2019-10-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "tags": "[if(parameters('onlyUpdate'), union(reference(resourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2020-10-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name))]"
                      ]
                    },
                    {
                      "condition": "[parameters('onlyUpdate')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-ReadTags', deployment().name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "10085828695555767678"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the tags resource."
                              }
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "existingTags": {
                              "type": "object",
                              "value": "[if(contains(reference(resourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01'), 'tags'), reference(resourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01').tags, createObject())]",
                              "metadata": {
                                "description": "Tags currently applied to the subscription level"
                              }
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the tags resource."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Resources/tags', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the applied tags."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the tags were applied to."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "value": "[if(parameters('onlyUpdate'), union(reference(resourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2020-10-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]",
                      "metadata": {
                        "description": "The applied tags."
                      }
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[if(and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-Tags-RG', deployment().name)), '2020-10-01').outputs.name.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-Tags-Sub', deployment().name)), '2020-10-01').outputs.name.value)]",
              "metadata": {
                "description": "The name of the tags resource."
              }
            },
            "tags": {
              "type": "object",
              "value": "[if(and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-Tags-RG', deployment().name)), '2020-10-01').outputs.tags.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-Tags-Sub', deployment().name)), '2020-10-01').outputs.tags.value)]",
              "metadata": {
                "description": "The applied tags."
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[if(and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-Tags-RG', deployment().name)), '2020-10-01').outputs.resourceId.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-Tags-Sub', deployment().name)), '2020-10-01').outputs.resourceId.value)]",
              "metadata": {
                "description": "The resource ID of the applied tags."
              }
            }
          }
        }
      },
      "metadata": {
        "description": "Resource group tags"
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('deploy-laws-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
      "subscriptionId": "[parameters('parOperationsSpoke').subscriptionId]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "parOrgPrefix": {
            "value": "[parameters('parRequired').orgPrefix]"
          },
          "parLocation": {
            "value": "[parameters('parLocation')]"
          },
          "parDeployEnvironment": {
            "value": "[parameters('parRequired').deployEnvironment]"
          },
          "parTags": {
            "value": "[reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hubspoke-tags--{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
          },
          "parDeploySentinel": {
            "value": "[parameters('parLogging').enableSentinel]"
          },
          "parLogAnalyticsWorkspaceSkuName": {
            "value": "[parameters('parLogging').logAnalyticsWorkspaceSkuName]"
          },
          "parLogAnalyticsWorkspaceRetentionInDays": {
            "value": "[parameters('parLogging').logAnalyticsWorkspaceRetentionInDays]"
          },
          "parLogAnalyticsWorkspaceCappingDailyQuotaGb": {
            "value": "[parameters('parLogging').logAnalyticsWorkspaceCappingDailyQuotaGb]"
          },
          "parLoggingStorageAccountAccess": {
            "value": "[parameters('parLogging').storageAccountAccess]"
          },
          "parLogStorageSkuName": {
            "value": "[parameters('parLogging').logStorageSkuName]"
          },
          "parEnableResourceLocks": {
            "value": "[parameters('parLogging').enableResourceLocks]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.13.1.58284",
              "templateHash": "14109760321582189361"
            }
          },
          "parameters": {
            "parOrgPrefix": {
              "type": "string",
              "defaultValue": "anoa",
              "metadata": {
                "description": "Prefix value which will be prepended to all resource names. Default: org"
              }
            },
            "parOperationsSubscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "The subscription ID for the Hub Network and resources. It defaults to the deployment subscription."
              }
            },
            "parLocation": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "The region to deploy resources into. It defaults to the deployment location."
              }
            },
            "parTags": {
              "type": "object",
              "metadata": {
                "description": "Tags"
              }
            },
            "parDeployEnvironment": {
              "type": "string",
              "metadata": {
                "description": "A suffix, 3 to 15 characters in length, to append to resource names (e.g. \"dev\", \"test\", \"prod\"). "
              },
              "maxLength": 15,
              "minLength": 3
            },
            "parDeploymentNameSuffix": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "A suffix to use for naming deployments uniquely. It defaults to the Bicep resolution of the \"utcNow()\" function."
              }
            },
            "parLogAnalyticsWorkspaceCappingDailyQuotaGb": {
              "type": "int",
              "defaultValue": -1,
              "metadata": {
                "description": "The daily quota for Log Analytics Workspace logs in Gigabytes. It defaults to \"-1\" for no quota."
              }
            },
            "parLogAnalyticsWorkspaceRetentionInDays": {
              "type": "int",
              "defaultValue": 30,
              "metadata": {
                "description": "Number of days of log retention for Log Analytics Workspace. - DEFAULT VALUE: 30"
              },
              "maxValue": 730,
              "minValue": 30
            },
            "parLogAnalyticsWorkspaceSkuName": {
              "type": "string",
              "defaultValue": "PerGB2018",
              "metadata": {
                "description": "[Free/Standard/Premium/PerNode/PerGB2018/Standalone] The SKU for the Log Analytics Workspace. It defaults to \"PerGB2018\". See https://docs.microsoft.com/en-us/azure/azure-monitor/logs/resource-manager-workspace for valid settings."
              },
              "allowedValues": [
                "CapacityReservation",
                "Free",
                "LACluster",
                "PerGB2018",
                "PerNode",
                "Premium",
                "Standalone",
                "Standard"
              ]
            },
            "parDeploySentinel": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Switch which allows Sentinel deployment to be disabled. Default: false"
              }
            },
            "parLogStorageSkuName": {
              "type": "string",
              "defaultValue": "Standard_GRS",
              "metadata": {
                "description": "The Storage Account SKU to use for log storage. It defaults to \"Standard_GRS\". See https://docs.microsoft.com/en-us/rest/api/storagerp/srp_sku_types for valid settings."
              },
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Standard_ZRS",
                "Premium_LRS",
                "Premium_ZRS",
                "Standard_GZRS",
                "Standard_RAGZRS"
              ]
            },
            "parLoggingStorageAccountAccess": {
              "type": "object",
              "metadata": {
                "description": "Account settings for role assignement to Storage Account"
              }
            },
            "parEnableResourceLocks": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Switch which allows enable resource locks on all resources. Default: true"
              }
            }
          },
          "variables": {
            "varResourceToken": "resource_token",
            "varNameToken": "name_token",
            "namingConvention": "[format('{0}-{1}-{2}-{3}-{4}', toLower(parameters('parOrgPrefix')), toLower(parameters('parLocation')), toLower(parameters('parDeployEnvironment')), variables('varNameToken'), toLower(variables('varResourceToken')))]",
            "varResourceGroupNamingConvention": "[replace(variables('namingConvention'), variables('varResourceToken'), 'rg')]",
            "varLogAnalyticsWorkspaceNamingConvention": "[replace(variables('namingConvention'), variables('varResourceToken'), 'log')]",
            "varStorageAccountNamingConvention": "[toLower(format('{0}st{1}unique_storage_token', parameters('parDeployEnvironment'), variables('varNameToken')))]",
            "loggingName": "logging",
            "varLoggingResourceGroupName": "[replace(variables('varResourceGroupNamingConvention'), variables('varNameToken'), variables('loggingName'))]",
            "varLoggingLogStorageAccountShortName": "[replace(variables('varStorageAccountNamingConvention'), variables('varNameToken'), variables('loggingName'))]",
            "varLoggingLogStorageAccountUniqueName": "[replace(variables('varLoggingLogStorageAccountShortName'), 'unique_storage_token', uniqueString(parameters('parOperationsSubscriptionId'), parameters('parLocation'), parameters('parDeployEnvironment')))]",
            "varLoggingLogStorageAccountName": "[take(variables('varLoggingLogStorageAccountUniqueName'), 23)]",
            "varLogAnalyticsWorkspaceName": "[replace(variables('varLogAnalyticsWorkspaceNamingConvention'), variables('varNameToken'), 'logging')]",
            "varSolutions": [
              {
                "deploy": true,
                "name": "AzureActivity",
                "product": "OMSGallery/AzureActivity",
                "publisher": "Microsoft",
                "promotionCode": ""
              },
              {
                "deploy": "[parameters('parDeploySentinel')]",
                "name": "SecurityInsights",
                "product": "OMSGallery/SecurityInsights",
                "publisher": "Microsoft",
                "promotionCode": ""
              },
              {
                "deploy": true,
                "name": "VMInsights",
                "product": "OMSGallery/VMInsights",
                "publisher": "Microsoft",
                "promotionCode": ""
              },
              {
                "deploy": true,
                "name": "Security",
                "product": "OMSGallery/Security",
                "publisher": "Microsoft",
                "promotionCode": ""
              },
              {
                "deploy": true,
                "name": "ServiceMap",
                "publisher": "Microsoft",
                "product": "OMSGallery/ServiceMap",
                "promotionCode": ""
              },
              {
                "deploy": true,
                "name": "ContainerInsights",
                "publisher": "Microsoft",
                "product": "OMSGallery/ContainerInsights",
                "promotionCode": ""
              },
              {
                "deploy": true,
                "name": "KeyVaultAnalytics",
                "publisher": "Microsoft",
                "product": "OMSGallery/KeyVaultAnalytics",
                "promotionCode": ""
              },
              {
                "deploy": true,
                "name": "ChangeTracking",
                "publisher": "Microsoft",
                "product": "OMSGallery/ChangeTracking",
                "promotionCode": ""
              },
              {
                "deploy": true,
                "name": "SQLAssessment",
                "publisher": "Microsoft",
                "product": "OMSGallery/SQLAssessment",
                "promotionCode": ""
              },
              {
                "deploy": true,
                "name": "Updates",
                "publisher": "Microsoft",
                "product": "Updates",
                "promotionCode": ""
              }
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('Tags-logging-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[parameters('parOperationsSubscriptionId')]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "onlyUpdate": {
                    "value": true
                  },
                  "tags": {
                    "value": "[parameters('parTags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "216182755991536021"
                    }
                  },
                  "parameters": {
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags for the resource group. If not provided, removes existing tags."
                      }
                    },
                    "onlyUpdate": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Instead of overwriting the existing tags, combine them with the new tags."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the Resource Group to assign the tags to. If no Resource Group name is provided, and Subscription ID is provided, the module deploys at subscription level, therefore assigns the provided tags to the subscription."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().id]",
                      "metadata": {
                        "description": "Optional. Subscription ID of the subscription to assign the tags to. If no Resource Group name is provided, the module deploys at subscription level, therefore assigns the provided tags to the subscription."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Tags-Sub', deployment().name)]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "onlyUpdate": {
                            "value": "[parameters('onlyUpdate')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "1405711280777017718"
                            }
                          },
                          "parameters": {
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags for the resource group. If not provided, removes existing tags."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the tags resource."
                              }
                            },
                            "onlyUpdate": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Instead of overwriting the existing tags, combine them with the new tags."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/tags",
                              "apiVersion": "2019-10-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "tags": "[if(parameters('onlyUpdate'), union(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2020-10-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]"
                              },
                              "dependsOn": [
                                "[subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name))]"
                              ]
                            },
                            {
                              "condition": "[parameters('onlyUpdate')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-ReadTags', deployment().name)]",
                              "location": "[deployment().location]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "12771816053208228273"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the tags resource."
                                      }
                                    }
                                  },
                                  "resources": [],
                                  "outputs": {
                                    "existingTags": {
                                      "type": "object",
                                      "value": "[if(contains(reference(subscriptionResourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01'), 'tags'), reference(subscriptionResourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01').tags, createObject())]",
                                      "metadata": {
                                        "description": "Tags currently applied to the subscription level"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the tags resource."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "value": "[if(parameters('onlyUpdate'), union(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2020-10-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]",
                              "metadata": {
                                "description": "The applied tags."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[subscriptionResourceId('Microsoft.Resources/tags', parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the applied tags."
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId'))))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Tags-RG', deployment().name)]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "onlyUpdate": {
                            "value": "[parameters('onlyUpdate')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "3625051557808284647"
                            }
                          },
                          "parameters": {
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags for the resource group. If not provided, removes existing tags."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the tags resource."
                              }
                            },
                            "onlyUpdate": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Instead of overwriting the existing tags, combine them with the new tags."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/tags",
                              "apiVersion": "2019-10-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "tags": "[if(parameters('onlyUpdate'), union(reference(resourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2020-10-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name))]"
                              ]
                            },
                            {
                              "condition": "[parameters('onlyUpdate')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-ReadTags', deployment().name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "10085828695555767678"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the tags resource."
                                      }
                                    }
                                  },
                                  "resources": [],
                                  "outputs": {
                                    "existingTags": {
                                      "type": "object",
                                      "value": "[if(contains(reference(resourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01'), 'tags'), reference(resourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01').tags, createObject())]",
                                      "metadata": {
                                        "description": "Tags currently applied to the subscription level"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the tags resource."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Resources/tags', parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the applied tags."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the resource group the tags were applied to."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "value": "[if(parameters('onlyUpdate'), union(reference(resourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2020-10-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]",
                              "metadata": {
                                "description": "The applied tags."
                              }
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[if(and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-Tags-RG', deployment().name)), '2020-10-01').outputs.name.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-Tags-Sub', deployment().name)), '2020-10-01').outputs.name.value)]",
                      "metadata": {
                        "description": "The name of the tags resource."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "value": "[if(and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-Tags-RG', deployment().name)), '2020-10-01').outputs.tags.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-Tags-Sub', deployment().name)), '2020-10-01').outputs.tags.value)]",
                      "metadata": {
                        "description": "The applied tags."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[if(and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-Tags-RG', deployment().name)), '2020-10-01').outputs.resourceId.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-Tags-Sub', deployment().name)), '2020-10-01').outputs.resourceId.value)]",
                      "metadata": {
                        "description": "The resource ID of the applied tags."
                      }
                    }
                  }
                }
              },
              "metadata": {
                "description": "Resource group tags"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-logging-rg-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[parameters('parOperationsSubscriptionId')]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varLoggingResourceGroupName')]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "tags": {
                    "value": "[reference(subscriptionResourceId(parameters('parOperationsSubscriptionId'), 'Microsoft.Resources/deployments', format('Tags-logging-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "6154872068177151399"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Resource Group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[deployment().location]",
                      "metadata": {
                        "description": "Optional. Location of the Resource Group. It uses the deployment's location when not provided."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the storage account resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/resourceGroups",
                      "apiVersion": "2019-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {}
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-{1}-Lock', uniqueString(deployment().name, parameters('location')), parameters('lock'))]",
                      "resourceGroup": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "level": {
                            "value": "[parameters('lock')]"
                          },
                          "name": {
                            "value": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "16437344464782770871"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}-lock', parameters('level'))]",
                              "metadata": {
                                "description": "Optional. The name of the lock."
                              }
                            },
                            "level": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Set lock level."
                              },
                              "allowedValues": [
                                "CanNotDelete",
                                "ReadOnly"
                              ]
                            },
                            "notes": {
                              "type": "string",
                              "defaultValue": "[if(equals(parameters('level'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]",
                              "metadata": {
                                "description": "Optional. The decription attached to the lock."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "level": "[parameters('level')]",
                                "notes": "[parameters('notes')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the lock."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Authorization/locks', parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the lock."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the resource group name the lock was applied to."
                              }
                            },
                            "scope": {
                              "type": "string",
                              "value": "[resourceGroup().id]",
                              "metadata": {
                                "description": "The scope this lock applies to."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "resourceGroup_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-RG-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "resourceGroup": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "12032035567026887377"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the resource group."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the resource group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId(parameters('parOperationsSubscriptionId'), 'Microsoft.Resources/deployments', format('Tags-logging-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ],
              "metadata": {
                "description": "Logging Resource Group"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-logging-logStorage-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "resourceGroup": "[variables('varLoggingResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varLoggingLogStorageAccountName')]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "storageAccountSku": {
                    "value": "[parameters('parLogStorageSkuName')]"
                  },
                  "tags": {
                    "value": "[reference(subscriptionResourceId(parameters('parOperationsSubscriptionId'), 'Microsoft.Resources/deployments', format('Tags-logging-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
                  },
                  "roleAssignments": "[if(parameters('parLoggingStorageAccountAccess').enableRoleAssignmentForStorageAccount, createObject('value', createArray(createObject('principalIds', parameters('parLoggingStorageAccountAccess').principalIds, 'roleDefinitionIdOrName', parameters('parLoggingStorageAccountAccess').roleDefinitionIdOrName))), createObject('value', createArray()))]",
                  "lock": "[if(parameters('parEnableResourceLocks'), createObject('value', 'CanNotDelete'), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "845876767253618321"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Storage Account."
                      },
                      "maxLength": 24
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "systemAssignedIdentity": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enables system assigned managed identity on the resource."
                      }
                    },
                    "userAssignedIdentities": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The ID(s) to assign to the resource."
                      }
                    },
                    "storageAccountKind": {
                      "type": "string",
                      "defaultValue": "StorageV2",
                      "metadata": {
                        "description": "Optional. Type of Storage Account to create."
                      },
                      "allowedValues": [
                        "Storage",
                        "StorageV2",
                        "BlobStorage",
                        "FileStorage",
                        "BlockBlobStorage"
                      ]
                    },
                    "storageAccountSku": {
                      "type": "string",
                      "defaultValue": "Standard_GRS",
                      "metadata": {
                        "description": "Optional. Storage Account Sku Name."
                      },
                      "allowedValues": [
                        "Standard_LRS",
                        "Standard_GRS",
                        "Standard_RAGRS",
                        "Standard_ZRS",
                        "Premium_LRS",
                        "Premium_ZRS",
                        "Standard_GZRS",
                        "Standard_RAGZRS"
                      ]
                    },
                    "storageAccountAccessTier": {
                      "type": "string",
                      "defaultValue": "Hot",
                      "metadata": {
                        "description": "Optional. Storage Account Access Tier."
                      },
                      "allowedValues": [
                        "Hot",
                        "Cool"
                      ]
                    },
                    "azureFilesIdentityBasedAuthentication": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Provides the identity based authentication settings for Azure Files."
                      }
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                      }
                    },
                    "managementPolicyRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The Storage Account ManagementPolicies Rules."
                      }
                    },
                    "networkAcls": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Networks ACLs, this value contains IPs to whitelist and/or Subnet information. For security reasons, it is recommended to set the DefaultAction Deny."
                      }
                    },
                    "requireInfrastructureEncryption": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. A Boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest. For security reasons, it is recommended to set it to true."
                      }
                    },
                    "blobServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Blob service and containers to deploy."
                      }
                    },
                    "fileServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. File service and shares to deploy."
                      }
                    },
                    "queueServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Queue service and queues to create."
                      }
                    },
                    "tableServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Table service and tables to create."
                      }
                    },
                    "allowBlobPublicAccess": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether public access is enabled for all blobs or containers in the storage account. For security reasons, it is recommended to set it to false."
                      }
                    },
                    "minimumTlsVersion": {
                      "type": "string",
                      "defaultValue": "TLS1_2",
                      "metadata": {
                        "description": "Optional. Set the minimum TLS version on request to storage."
                      },
                      "allowedValues": [
                        "TLS1_0",
                        "TLS1_1",
                        "TLS1_2"
                      ]
                    },
                    "enableHierarchicalNamespace": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If true, enables Hierarchical Namespace for the storage account."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "",
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
                      }
                    },
                    "supportsHttpsTrafficOnly": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Allows HTTPS traffic only to storage service if sets to true."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "Transaction"
                      ],
                      "allowedValues": [
                        "Transaction"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "cMKKeyVaultResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The resource ID of a key vault to reference a customer managed key for encryption from."
                      }
                    },
                    "cMKKeyName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the customer managed key to use for encryption. Cannot be deployed together with the parameter 'systemAssignedIdentity' enabled."
                      }
                    },
                    "cMKUserAssignedIdentityResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Conditional. User assigned identity to use when fetching the customer managed key. Required if 'cMKKeyName' is not empty."
                      }
                    },
                    "cMKKeyVersion": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, latest is used."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ],
                    "supportsBlobService": "[or(or(or(equals(parameters('storageAccountKind'), 'BlockBlobStorage'), equals(parameters('storageAccountKind'), 'BlobStorage')), equals(parameters('storageAccountKind'), 'StorageV2')), equals(parameters('storageAccountKind'), 'Storage'))]",
                    "supportsFileService": "[or(or(equals(parameters('storageAccountKind'), 'FileStorage'), equals(parameters('storageAccountKind'), 'StorageV2')), equals(parameters('storageAccountKind'), 'Storage'))]",
                    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
                    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), createObject())), createObject())]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-09-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "kind": "[parameters('storageAccountKind')]",
                      "sku": {
                        "name": "[parameters('storageAccountSku')]"
                      },
                      "identity": "[variables('identity')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "encryption": {
                          "keySource": "[if(not(empty(parameters('cMKKeyName'))), 'Microsoft.Keyvault', 'Microsoft.Storage')]",
                          "services": {
                            "blob": "[if(variables('supportsBlobService'), createObject('enabled', true()), null())]",
                            "file": "[if(variables('supportsFileService'), createObject('enabled', true()), null())]",
                            "table": {
                              "enabled": true
                            },
                            "queue": {
                              "enabled": true
                            }
                          },
                          "requireInfrastructureEncryption": "[if(not(equals(parameters('storageAccountKind'), 'Storage')), parameters('requireInfrastructureEncryption'), null())]",
                          "keyvaultproperties": "[if(not(empty(parameters('cMKKeyName'))), createObject('keyname', parameters('cMKKeyName'), 'keyvaulturi', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('cMKKeyVaultResourceId'), '/')[2], split(parameters('cMKKeyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults', last(split(parameters('cMKKeyVaultResourceId'), '/'))), '2021-06-01-preview').vaultUri, 'keyversion', if(not(empty(parameters('cMKKeyVersion'))), parameters('cMKKeyVersion'), null())), null())]",
                          "identity": "[if(not(empty(parameters('cMKKeyName'))), createObject('userAssignedIdentity', parameters('cMKUserAssignedIdentityResourceId')), null())]"
                        },
                        "accessTier": "[if(not(equals(parameters('storageAccountKind'), 'Storage')), parameters('storageAccountAccessTier'), null())]",
                        "supportsHttpsTrafficOnly": "[parameters('supportsHttpsTrafficOnly')]",
                        "isHnsEnabled": "[if(parameters('enableHierarchicalNamespace'), parameters('enableHierarchicalNamespace'), null())]",
                        "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                        "networkAcls": "[if(not(empty(parameters('networkAcls'))), createObject('bypass', if(contains(parameters('networkAcls'), 'bypass'), parameters('networkAcls').bypass, null()), 'defaultAction', if(contains(parameters('networkAcls'), 'defaultAction'), parameters('networkAcls').defaultAction, null()), 'virtualNetworkRules', if(contains(parameters('networkAcls'), 'virtualNetworkRules'), parameters('networkAcls').virtualNetworkRules, createArray()), 'ipRules', if(contains(parameters('networkAcls'), 'ipRules'), parameters('networkAcls').ipRules, createArray())), null())]",
                        "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
                        "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkAcls'))), 'Disabled', null()))]",
                        "azureFilesIdentityBasedAuthentication": "[if(not(empty(parameters('azureFilesIdentityBasedAuthentication'))), parameters('azureFilesIdentityBasedAuthentication'), null())]"
                      }
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "storageAccount_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "2827160161514534534"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Id of the delegated managed identity resource."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('managementPolicyRules')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-ManagementPolicies', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "rules": {
                            "value": "[parameters('managementPolicyRules')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "648447714037160345"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the storage container to deploy."
                              }
                            },
                            "rules": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The Storage Account ManagementPolicies Rules."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[not(empty(parameters('rules')))]",
                              "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                              "apiVersion": "2019-06-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "policy": {
                                  "rules": "[parameters('rules')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The resource ID of the deployed management policy."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed management policy."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed management policy."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('blobServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-BlobServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "containers": "[if(contains(parameters('blobServices'), 'containers'), createObject('value', parameters('blobServices').containers), createObject('value', createArray()))]",
                          "automaticSnapshotPolicyEnabled": "[if(contains(parameters('blobServices'), 'automaticSnapshotPolicyEnabled'), createObject('value', parameters('blobServices').automaticSnapshotPolicyEnabled), createObject('value', false()))]",
                          "deleteRetentionPolicy": "[if(contains(parameters('blobServices'), 'deleteRetentionPolicy'), createObject('value', parameters('blobServices').deleteRetentionPolicy), createObject('value', true()))]",
                          "deleteRetentionPolicyDays": "[if(contains(parameters('blobServices'), 'deleteRetentionPolicyDays'), createObject('value', parameters('blobServices').deleteRetentionPolicyDays), createObject('value', 7))]",
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('blobServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('blobServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('blobServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('blobServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('blobServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('blobServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('blobServices'), 'diagnosticEventHubName'), createObject('value', parameters('blobServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('blobServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('blobServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('blobServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('blobServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('blobServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('blobServices').diagnosticWorkspaceId), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "2492256184813709438"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the blob service."
                              }
                            },
                            "deleteRetentionPolicy": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates whether DeleteRetentionPolicy is enabled for the Blob service."
                              }
                            },
                            "deleteRetentionPolicyDays": {
                              "type": "int",
                              "defaultValue": 7,
                              "metadata": {
                                "description": "Optional. Indicates the number of days that the deleted blob should be retained. The minimum specified value can be 1 and the maximum value can be 365."
                              }
                            },
                            "automaticSnapshotPolicyEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Automatic Snapshot is enabled if set to true."
                              }
                            },
                            "containers": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Blob containers to create."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/blobServices",
                              "apiVersion": "2021-06-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "deleteRetentionPolicy": {
                                  "enabled": "[parameters('deleteRetentionPolicy')]",
                                  "days": "[parameters('deleteRetentionPolicyDays')]"
                                },
                                "automaticSnapshotPolicyEnabled": "[parameters('automaticSnapshotPolicyEnabled')]"
                              }
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "blobServices_container",
                                "count": "[length(parameters('containers'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Container-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "blobServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('containers')[copyIndex()].name]"
                                  },
                                  "publicAccess": "[if(contains(parameters('containers')[copyIndex()], 'publicAccess'), createObject('value', parameters('containers')[copyIndex()].publicAccess), createObject('value', 'None'))]",
                                  "roleAssignments": "[if(contains(parameters('containers')[copyIndex()], 'roleAssignments'), createObject('value', parameters('containers')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
                                  "immutabilityPolicyProperties": "[if(contains(parameters('containers')[copyIndex()], 'immutabilityPolicyProperties'), createObject('value', parameters('containers')[copyIndex()].immutabilityPolicyProperties), createObject('value', createObject()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "2456554778800083860"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      },
                                      "maxLength": 24
                                    },
                                    "blobServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. Name of the blob service."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the storage container to deploy."
                                      }
                                    },
                                    "immutabilityPolicyName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. Name of the immutable policy."
                                      }
                                    },
                                    "publicAccess": {
                                      "type": "string",
                                      "defaultValue": "None",
                                      "metadata": {
                                        "description": "Optional. Specifies whether data in the container may be accessed publicly and the level of access."
                                      },
                                      "allowedValues": [
                                        "Container",
                                        "Blob",
                                        "None"
                                      ]
                                    },
                                    "immutabilityPolicyProperties": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Configure immutability policy."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                                      "apiVersion": "2021-09-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]",
                                      "properties": {
                                        "publicAccess": "[parameters('publicAccess')]"
                                      }
                                    },
                                    {
                                      "condition": "[not(empty(parameters('immutabilityPolicyProperties')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[parameters('immutabilityPolicyName')]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "storageAccountName": {
                                            "value": "[parameters('storageAccountName')]"
                                          },
                                          "blobServicesName": {
                                            "value": "[parameters('blobServicesName')]"
                                          },
                                          "containerName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "immutabilityPeriodSinceCreationInDays": "[if(contains(parameters('immutabilityPolicyProperties'), 'immutabilityPeriodSinceCreationInDays'), createObject('value', parameters('immutabilityPolicyProperties').immutabilityPeriodSinceCreationInDays), createObject('value', 365))]",
                                          "allowProtectedAppendWrites": "[if(contains(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWrites'), createObject('value', parameters('immutabilityPolicyProperties').allowProtectedAppendWrites), createObject('value', true()))]"
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.13.1.58284",
                                              "templateHash": "12947603763516415104"
                                            }
                                          },
                                          "parameters": {
                                            "storageAccountName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                              },
                                              "maxLength": 24
                                            },
                                            "blobServicesName": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent blob service. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "containerName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent container to apply the policy to. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. Name of the immutable policy."
                                              }
                                            },
                                            "immutabilityPeriodSinceCreationInDays": {
                                              "type": "int",
                                              "defaultValue": 365,
                                              "metadata": {
                                                "description": "Optional. The immutability period for the blobs in the container since the policy creation, in days."
                                              }
                                            },
                                            "allowProtectedAppendWrites": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies",
                                              "apiVersion": "2019-06-01",
                                              "name": "[format('{0}/{1}/{2}/{3}', parameters('storageAccountName'), parameters('blobServicesName'), parameters('containerName'), parameters('name'))]",
                                              "properties": {
                                                "immutabilityPeriodSinceCreationInDays": "[parameters('immutabilityPeriodSinceCreationInDays')]",
                                                "allowProtectedAppendWrites": "[parameters('allowProtectedAppendWrites')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "value": "[parameters('name')]",
                                              "metadata": {
                                                "description": "The name of the deployed immutability policy."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies', parameters('storageAccountName'), parameters('blobServicesName'), parameters('containerName'), parameters('name'))]",
                                              "metadata": {
                                                "description": "The resource ID of the deployed immutability policy."
                                              }
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "value": "[resourceGroup().name]",
                                              "metadata": {
                                                "description": "The resource group of the deployed immutability policy."
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "copy": {
                                        "name": "container_roleAssignments",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.13.1.58284",
                                              "templateHash": "17770721562698605711"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the principals to assign the role to."
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The description of the role assignment."
                                              }
                                            },
                                            "condition": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                                              }
                                            },
                                            "conditionVersion": {
                                              "type": "string",
                                              "defaultValue": "2.0",
                                              "allowedValues": [
                                                "2.0"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Version of the condition."
                                              }
                                            },
                                            "delegatedManagedIdentityResourceId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Id of the delegated managed identity resource."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Desktop Virtualization Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a959dbd1-f747-45e3-8ba6-dd80f235f97c')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                                              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                                              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                                              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                                              "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                                              "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                                              "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                                              "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                                              "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2])]",
                                              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed container."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed container."
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed container."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed blob service."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed blob service."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the deployed blob service."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('fileServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-FileServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('fileServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('fileServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('fileServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('fileServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('fileServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('fileServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('fileServices'), 'diagnosticEventHubName'), createObject('value', parameters('fileServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('fileServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('fileServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('fileServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('fileServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "protocolSettings": "[if(contains(parameters('fileServices'), 'protocolSettings'), createObject('value', parameters('fileServices').protocolSettings), createObject('value', createObject()))]",
                          "shareDeleteRetentionPolicy": "[if(contains(parameters('fileServices'), 'shareDeleteRetentionPolicy'), createObject('value', parameters('fileServices').shareDeleteRetentionPolicy), createObject('value', createObject('enabled', true(), 'days', 7)))]",
                          "shares": "[if(contains(parameters('fileServices'), 'shares'), createObject('value', parameters('fileServices').shares), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('fileServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('fileServices').diagnosticWorkspaceId), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "4217098231629340516"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the file service."
                              }
                            },
                            "protocolSettings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Protocol settings for file service."
                              }
                            },
                            "shareDeleteRetentionPolicy": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": true,
                                "days": 7
                              },
                              "metadata": {
                                "description": "Optional. The service properties for soft delete."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "shares": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. File shares to create."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/fileServices",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "protocolSettings": "[parameters('protocolSettings')]",
                                "shareDeleteRetentionPolicy": "[parameters('shareDeleteRetentionPolicy')]"
                              }
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "fileServices_shares",
                                "count": "[length(parameters('shares'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-shares-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "fileServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('shares')[copyIndex()].name]"
                                  },
                                  "enabledProtocols": "[if(contains(parameters('shares')[copyIndex()], 'enabledProtocols'), createObject('value', parameters('shares')[copyIndex()].enabledProtocols), createObject('value', 'SMB'))]",
                                  "rootSquash": "[if(contains(parameters('shares')[copyIndex()], 'rootSquash'), createObject('value', parameters('shares')[copyIndex()].rootSquash), createObject('value', 'NoRootSquash'))]",
                                  "sharedQuota": "[if(contains(parameters('shares')[copyIndex()], 'sharedQuota'), createObject('value', parameters('shares')[copyIndex()].sharedQuota), createObject('value', 5120))]",
                                  "roleAssignments": "[if(contains(parameters('shares')[copyIndex()], 'roleAssignments'), createObject('value', parameters('shares')[copyIndex()].roleAssignments), createObject('value', createArray()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "7898615982963373812"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      },
                                      "maxLength": 24
                                    },
                                    "fileServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent file service. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the file share to create."
                                      }
                                    },
                                    "sharedQuota": {
                                      "type": "int",
                                      "defaultValue": 5120,
                                      "metadata": {
                                        "description": "Optional. The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400."
                                      }
                                    },
                                    "enabledProtocols": {
                                      "type": "string",
                                      "defaultValue": "SMB",
                                      "metadata": {
                                        "description": "Optional. The authentication protocol that is used for the file share. Can only be specified when creating a share."
                                      },
                                      "allowedValues": [
                                        "NFS",
                                        "SMB"
                                      ]
                                    },
                                    "rootSquash": {
                                      "type": "string",
                                      "defaultValue": "NoRootSquash",
                                      "metadata": {
                                        "description": "Optional. Permissions for NFS file shares are enforced by the client OS rather than the Azure Files service. Toggling the root squash behavior reduces the rights of the root user for NFS shares."
                                      },
                                      "allowedValues": [
                                        "AllSquash",
                                        "NoRootSquash",
                                        "RootSquash"
                                      ]
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                                      "apiVersion": "2021-08-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]",
                                      "properties": {
                                        "shareQuota": "[parameters('sharedQuota')]",
                                        "rootSquash": "[if(equals(parameters('enabledProtocols'), 'NFS'), parameters('rootSquash'), null())]",
                                        "enabledProtocols": "[parameters('enabledProtocols')]"
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "fileShare_roleAssignments",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.13.1.58284",
                                              "templateHash": "5820655604316332903"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the principals to assign the role to."
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The description of the role assignment."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                              "Storage Account Backup Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                                              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                                              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                                              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                                              "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                                              "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                                              "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                                              "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                                              "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}/shares/{2}', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2])]",
                                              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed file share."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed file share."
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed file share."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed file share service."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed file share service."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed file share service."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('queueServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-QueueServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('queueServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('queueServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('queueServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('queueServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('queueServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('queueServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('queueServices'), 'diagnosticEventHubName'), createObject('value', parameters('queueServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('queueServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('queueServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('queueServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('queueServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "queues": "[if(contains(parameters('queueServices'), 'queues'), createObject('value', parameters('queueServices').queues), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('queueServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('queueServices').diagnosticWorkspaceId), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "17554831229879274483"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the queue service."
                              }
                            },
                            "queues": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Queues to create."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/queueServices",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {}
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "queueServices_queues",
                                "count": "[length(parameters('queues'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Queue-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "queueServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('queues')[copyIndex()].name]"
                                  },
                                  "metadata": "[if(contains(parameters('queues')[copyIndex()], 'metadata'), createObject('value', parameters('queues')[copyIndex()].metadata), createObject('value', createObject()))]",
                                  "roleAssignments": "[if(contains(parameters('queues')[copyIndex()], 'roleAssignments'), createObject('value', parameters('queues')[copyIndex()].roleAssignments), createObject('value', createArray()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "12540260969676082467"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      },
                                      "maxLength": 24
                                    },
                                    "queueServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent queue service. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the storage queue to deploy."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Required. A name-value pair that represents queue metadata."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
                                      "apiVersion": "2019-06-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]"
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "queue_roleAssignments",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.13.1.58284",
                                              "templateHash": "9678424203152711384"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the principals to assign the role to."
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The description of the role assignment."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Avere Cluster Create": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7b1b19a-0e83-4fe5-935c-faaefbfd18c3')]",
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Azure Service Deploy Release Management Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21d96096-b162-414a-8302-d8354f9d91b2')]",
                                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                              "CAL-Custom-Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7b266cd7-0bba-4ae2-8423-90ede5e1e898')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                                              "Dsms Role (deprecated)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b91f4c0b-46e3-47bb-a242-eecfe23b3b5b')]",
                                              "Dsms Role (do not use)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7aff565e-6c55-448d-83db-ccf482c6da2f')]",
                                              "GenevaWarmPathResourceContributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9f15f5f5-77bd-413a-aa88-4b9c68b1e7bc')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "masterreader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a48d7796-14b4-4889-afef-fbb65a93e5a2')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                              "Storage Account Backup Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}/queues/{2}', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2])]",
                                              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed queue."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed queue."
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed queue."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed file share service."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed file share service."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed file share service."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('tableServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-TableServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('tableServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('tableServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('tableServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('tableServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('tableServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('tableServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('tableServices'), 'diagnosticEventHubName'), createObject('value', parameters('tableServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('tableServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('tableServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('tableServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('tableServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "tables": "[if(contains(parameters('tableServices'), 'tables'), createObject('value', parameters('tableServices').tables), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('tableServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('tableServices').diagnosticWorkspaceId), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "4879914104814210714"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the table service."
                              }
                            },
                            "tables": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. tables to create."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/tableServices",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {}
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "tableServices_tables",
                                "count": "[length(parameters('tables'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Table-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "tableServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('tables')[copyIndex()]]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "15504629824916397824"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      },
                                      "maxLength": 24
                                    },
                                    "tableServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent table service. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the table."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
                                      "apiVersion": "2021-06-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('tableServicesName'), parameters('name'))]"
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed file share service."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices/tables', parameters('storageAccountName'), parameters('tableServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed file share service."
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed file share service."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed table service."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed table service."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed table service."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the deployed storage account."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the deployed storage account."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group of the deployed storage account."
                      }
                    },
                    "primaryBlobEndpoint": {
                      "type": "string",
                      "value": "[if(and(not(empty(parameters('blobServices'))), contains(parameters('blobServices'), 'containers')), reference(format('Microsoft.Storage/storageAccounts/{0}', parameters('name')), '2019-04-01').primaryEndpoints.blob, '')]",
                      "metadata": {
                        "description": "The primary blob endpoint reference if blob services are deployed."
                      }
                    },
                    "systemAssignedPrincipalId": {
                      "type": "string",
                      "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2021-09-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2021-09-01', 'full').identity.principalId, '')]",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2021-09-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId(parameters('parOperationsSubscriptionId'), 'Microsoft.Resources/deployments', format('deploy-logging-rg-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[subscriptionResourceId(parameters('parOperationsSubscriptionId'), 'Microsoft.Resources/deployments', format('Tags-logging-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ],
              "metadata": {
                "description": "Logging Storage Account"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-laws-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "resourceGroup": "[variables('varLoggingResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varLogAnalyticsWorkspaceName')]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "tags": {
                    "value": "[reference(subscriptionResourceId(parameters('parOperationsSubscriptionId'), 'Microsoft.Resources/deployments', format('Tags-logging-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
                  },
                  "serviceTier": {
                    "value": "[parameters('parLogAnalyticsWorkspaceSkuName')]"
                  },
                  "dataRetention": {
                    "value": "[parameters('parLogAnalyticsWorkspaceRetentionInDays')]"
                  },
                  "dailyQuotaGb": {
                    "value": "[parameters('parLogAnalyticsWorkspaceCappingDailyQuotaGb')]"
                  },
                  "lock": "[if(parameters('parEnableResourceLocks'), createObject('value', 'CanNotDelete'), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "2545526630658973617"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Log Analytics workspace."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "serviceTier": {
                      "type": "string",
                      "defaultValue": "PerGB2018",
                      "allowedValues": [
                        "CapacityReservation",
                        "Free",
                        "LACluster",
                        "PerGB2018",
                        "PerNode",
                        "Premium",
                        "Standalone",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. Service Tier: PerGB2018, Free, Standalone, PerGB or PerNode."
                      }
                    },
                    "storageInsightsConfigs": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of storage accounts to be read by the workspace."
                      }
                    },
                    "linkedServices": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of services to be linked."
                      }
                    },
                    "linkedStorageAccounts": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Conditional. List of Storage Accounts to be linked. Required if 'forceCmkForQuery' is set to 'true' and 'savedSearches' is not empty."
                      }
                    },
                    "savedSearches": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Kusto Query Language searches to save."
                      }
                    },
                    "dataSources": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. LAW data sources to configure."
                      }
                    },
                    "gallerySolutions": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of gallerySolutions to be created in the log analytics workspace."
                      }
                    },
                    "dataRetention": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 730,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Number of days data will be retained for."
                      }
                    },
                    "dailyQuotaGb": {
                      "type": "int",
                      "defaultValue": -1,
                      "minValue": -1,
                      "metadata": {
                        "description": "Optional. The workspace daily quota for ingestion."
                      }
                    },
                    "publicNetworkAccessForIngestion": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Log Analytics ingestion."
                      }
                    },
                    "publicNetworkAccessForQuery": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Log Analytics query."
                      }
                    },
                    "useResourcePermissions": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Set to 'true' to use resource or workspace permissions and 'false' (or leave empty) to require workspace permissions."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of a log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "forceCmkForQuery": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Indicates whether customer managed storage is mandatory for query management."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "Audit"
                      ],
                      "allowedValues": [
                        "Audit"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ],
                    "logAnalyticsSearchVersion": 1
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2021-06-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "features": {
                          "searchVersion": "[variables('logAnalyticsSearchVersion')]",
                          "enableLogAccessUsingOnlyResourcePermissions": "[parameters('useResourcePermissions')]"
                        },
                        "sku": {
                          "name": "[parameters('serviceTier')]"
                        },
                        "retentionInDays": "[parameters('dataRetention')]",
                        "workspaceCapping": {
                          "dailyQuotaGb": "[parameters('dailyQuotaGb')]"
                        },
                        "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                        "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                        "forceCmkForQuery": "[parameters('forceCmkForQuery')]"
                      }
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "logAnalyticsWorkspace_storageInsightConfigs",
                        "count": "[length(parameters('storageInsightsConfigs'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-LAW-StorageInsightsConfig-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "containers": "[if(contains(parameters('storageInsightsConfigs')[copyIndex()], 'containers'), createObject('value', parameters('storageInsightsConfigs')[copyIndex()].containers), createObject('value', createArray()))]",
                          "tables": "[if(contains(parameters('storageInsightsConfigs')[copyIndex()], 'tables'), createObject('value', parameters('storageInsightsConfigs')[copyIndex()].tables), createObject('value', createArray()))]",
                          "storageAccountId": {
                            "value": "[parameters('storageInsightsConfigs')[copyIndex()].storageAccountId]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "9584150528703482278"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}-stinsconfig', last(split(parameters('storageAccountId'), '/')))]",
                              "metadata": {
                                "description": "Optional. The name of the storage insights config."
                              }
                            },
                            "storageAccountId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Azure Resource Manager ID of the storage account resource."
                              }
                            },
                            "containers": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The names of the blob containers that the workspace should read."
                              }
                            },
                            "tables": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The names of the Azure tables that the workspace should read."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags to configure in the resource."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.OperationalInsights/workspaces/storageInsightConfigs",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "containers": "[parameters('containers')]",
                                "tables": "[parameters('tables')]",
                                "storageAccount": {
                                  "id": "[parameters('storageAccountId')]",
                                  "key": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountId'), '/'))), '2021-06-01').keys[0].value]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/storageInsightConfigs', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed storage insights configuration."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group where the storage insight configuration is deployed."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the storage insights configuration."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "logAnalyticsWorkspace_linkedServices",
                        "count": "[length(parameters('linkedServices'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-LAW-LinkedService-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('linkedServices')[copyIndex()].name]"
                          },
                          "resourceId": "[if(contains(parameters('linkedServices')[copyIndex()], 'resourceId'), createObject('value', parameters('linkedServices')[copyIndex()].resourceId), createObject('value', ''))]",
                          "writeAccessResourceId": "[if(contains(parameters('linkedServices')[copyIndex()], 'writeAccessResourceId'), createObject('value', parameters('linkedServices')[copyIndex()].writeAccessResourceId), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "14946009911884179289"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the link."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Required. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                              }
                            },
                            "writeAccessResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require write access."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags to configure in the resource."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.OperationalInsights/workspaces/linkedServices",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "resourceId": "[parameters('resourceId')]",
                                "writeAccessResourceId": "[if(empty(parameters('writeAccessResourceId')), null(), parameters('writeAccessResourceId'))]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed linked service."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedServices', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed linked service."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group where the linked service is deployed."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "logAnalyticsWorkspace_linkedStorageAccounts",
                        "count": "[length(parameters('linkedStorageAccounts'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-LAW-LinkedStorageAccount-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('linkedStorageAccounts')[copyIndex()].name]"
                          },
                          "resourceId": {
                            "value": "[parameters('linkedStorageAccounts')[copyIndex()].resourceId]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "12486008805187490514"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "allowedValues": [
                                "Query",
                                "Alerts",
                                "CustomLogs",
                                "AzureWatson"
                              ],
                              "metadata": {
                                "description": "Required. Name of the link."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.OperationalInsights/workspaces/linkedStorageAccounts",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "properties": {
                                "storageAccountIds": [
                                  "[parameters('resourceId')]"
                                ]
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed linked storage account."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedStorageAccounts', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed linked storage account."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group where the linked storage account is deployed."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "logAnalyticsWorkspace_savedSearches",
                        "count": "[length(parameters('savedSearches'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-LAW-SavedSearch-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[format('{0}{1}', parameters('savedSearches')[copyIndex()].name, uniqueString(deployment().name))]"
                          },
                          "displayName": {
                            "value": "[parameters('savedSearches')[copyIndex()].displayName]"
                          },
                          "category": {
                            "value": "[parameters('savedSearches')[copyIndex()].category]"
                          },
                          "query": {
                            "value": "[parameters('savedSearches')[copyIndex()].query]"
                          },
                          "functionAlias": "[if(contains(parameters('savedSearches')[copyIndex()], 'functionAlias'), createObject('value', parameters('savedSearches')[copyIndex()].functionAlias), createObject('value', ''))]",
                          "functionParameters": "[if(contains(parameters('savedSearches')[copyIndex()], 'functionParameters'), createObject('value', parameters('savedSearches')[copyIndex()].functionParameters), createObject('value', ''))]",
                          "version": "[if(contains(parameters('savedSearches')[copyIndex()], 'version'), createObject('value', parameters('savedSearches')[copyIndex()].version), createObject('value', 2))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "6725039845850465920"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the saved search."
                              }
                            },
                            "displayName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Display name for the search."
                              }
                            },
                            "category": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Query category."
                              }
                            },
                            "query": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Kusto Query to be stored."
                              }
                            },
                            "tags": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Tags to configure in the resource."
                              }
                            },
                            "functionAlias": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The function alias if query serves as a function."
                              }
                            },
                            "functionParameters": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The optional function parameters if query serves as a function. Value should be in the following format: \"param-name1:type1 = default_value1, param-name2:type2 = default_value2\". For more examples and proper syntax please refer to /azure/kusto/query/functions/user-defined-functions."
                              }
                            },
                            "version": {
                              "type": "int",
                              "defaultValue": 2,
                              "metadata": {
                                "description": "Optional. The version number of the query language."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "properties": {
                                "tags": "[parameters('tags')]",
                                "displayName": "[parameters('displayName')]",
                                "category": "[parameters('category')]",
                                "query": "[parameters('query')]",
                                "functionAlias": "[parameters('functionAlias')]",
                                "functionParameters": "[parameters('functionParameters')]",
                                "version": "[parameters('version')]"
                              }
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed saved search."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group where the saved search is deployed."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed saved search."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]",
                        "logAnalyticsWorkspace_linkedStorageAccounts"
                      ]
                    },
                    {
                      "copy": {
                        "name": "logAnalyticsWorkspace_dataSources",
                        "count": "[length(parameters('dataSources'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-LAW-DataSource-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('dataSources')[copyIndex()].name]"
                          },
                          "kind": {
                            "value": "[parameters('dataSources')[copyIndex()].kind]"
                          },
                          "linkedResourceId": "[if(contains(parameters('dataSources')[copyIndex()], 'linkedResourceId'), createObject('value', parameters('dataSources')[copyIndex()].linkedResourceId), createObject('value', ''))]",
                          "eventLogName": "[if(contains(parameters('dataSources')[copyIndex()], 'eventLogName'), createObject('value', parameters('dataSources')[copyIndex()].eventLogName), createObject('value', ''))]",
                          "eventTypes": "[if(contains(parameters('dataSources')[copyIndex()], 'eventTypes'), createObject('value', parameters('dataSources')[copyIndex()].eventTypes), createObject('value', createArray()))]",
                          "objectName": "[if(contains(parameters('dataSources')[copyIndex()], 'objectName'), createObject('value', parameters('dataSources')[copyIndex()].objectName), createObject('value', ''))]",
                          "instanceName": "[if(contains(parameters('dataSources')[copyIndex()], 'instanceName'), createObject('value', parameters('dataSources')[copyIndex()].instanceName), createObject('value', ''))]",
                          "intervalSeconds": "[if(contains(parameters('dataSources')[copyIndex()], 'intervalSeconds'), createObject('value', parameters('dataSources')[copyIndex()].intervalSeconds), createObject('value', 60))]",
                          "counterName": "[if(contains(parameters('dataSources')[copyIndex()], 'counterName'), createObject('value', parameters('dataSources')[copyIndex()].counterName), createObject('value', ''))]",
                          "state": "[if(contains(parameters('dataSources')[copyIndex()], 'state'), createObject('value', parameters('dataSources')[copyIndex()].state), createObject('value', ''))]",
                          "syslogName": "[if(contains(parameters('dataSources')[copyIndex()], 'syslogName'), createObject('value', parameters('dataSources')[copyIndex()].syslogName), createObject('value', ''))]",
                          "syslogSeverities": "[if(contains(parameters('dataSources')[copyIndex()], 'syslogSeverities'), createObject('value', parameters('dataSources')[copyIndex()].syslogSeverities), createObject('value', createArray()))]",
                          "performanceCounters": "[if(contains(parameters('dataSources')[copyIndex()], 'performanceCounters'), createObject('value', parameters('dataSources')[copyIndex()].performanceCounters), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "578789361997655799"
                            }
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the solution."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "defaultValue": "AzureActivityLog",
                              "allowedValues": [
                                "AzureActivityLog",
                                "WindowsEvent",
                                "WindowsPerformanceCounter",
                                "IISLogs",
                                "LinuxSyslog",
                                "LinuxSyslogCollection",
                                "LinuxPerformanceObject",
                                "LinuxPerformanceCollection"
                              ],
                              "metadata": {
                                "description": "Required. The kind of the DataSource."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags to configure in the resource."
                              }
                            },
                            "linkedResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the resource to be linked."
                              }
                            },
                            "eventLogName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Windows event log name to configure when kind is WindowsEvent."
                              }
                            },
                            "eventTypes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Windows event types to configure when kind is WindowsEvent."
                              }
                            },
                            "objectName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the object to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                              }
                            },
                            "instanceName": {
                              "type": "string",
                              "defaultValue": "*",
                              "metadata": {
                                "description": "Optional. Name of the instance to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                              }
                            },
                            "intervalSeconds": {
                              "type": "int",
                              "defaultValue": 60,
                              "metadata": {
                                "description": "Optional. Interval in seconds to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                              }
                            },
                            "performanceCounters": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of counters to configure when the kind is LinuxPerformanceObject."
                              }
                            },
                            "counterName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Counter name to configure when kind is WindowsPerformanceCounter."
                              }
                            },
                            "state": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. State to configure when kind is IISLogs or LinuxSyslogCollection or LinuxPerformanceCollection."
                              }
                            },
                            "syslogName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. System log to configure when kind is LinuxSyslog."
                              }
                            },
                            "syslogSeverities": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Severities to configure when kind is LinuxSyslog."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.OperationalInsights/workspaces/dataSources",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "kind": "[parameters('kind')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "linkedResourceId": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'AzureActivityLog')), parameters('linkedResourceId'), null())]",
                                "eventLogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventLogName'), null())]",
                                "eventTypes": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventTypes'), null())]",
                                "objectName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('objectName'), null())]",
                                "instanceName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('instanceName'), null())]",
                                "intervalSeconds": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('intervalSeconds'), null())]",
                                "counterName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsPerformanceCounter')), parameters('counterName'), null())]",
                                "state": "[if(and(not(empty(parameters('kind'))), or(or(equals(parameters('kind'), 'IISLogs'), equals(parameters('kind'), 'LinuxSyslogCollection')), equals(parameters('kind'), 'LinuxPerformanceCollection'))), parameters('state'), null())]",
                                "syslogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxSyslog')), parameters('syslogName'), null())]",
                                "syslogSeverities": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'LinuxSyslog'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('syslogSeverities'), null())]",
                                "performanceCounters": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxPerformanceObject')), parameters('performanceCounters'), null())]"
                              }
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataSources', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed data source."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group where the data source is deployed."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed data source."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('gallerySolutions')))]",
                      "copy": {
                        "name": "logAnalyticsWorkspace_solutions",
                        "count": "[length(parameters('gallerySolutions'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-LAW-Solution-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('gallerySolutions')[copyIndex()].name]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "product": "[if(contains(parameters('gallerySolutions')[copyIndex()], 'product'), createObject('value', parameters('gallerySolutions')[copyIndex()].product), createObject('value', 'OMSGallery'))]",
                          "publisher": "[if(contains(parameters('gallerySolutions')[copyIndex()], 'publisher'), createObject('value', parameters('gallerySolutions')[copyIndex()].publisher), createObject('value', 'Microsoft'))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "252797623535637597"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the solution. For Microsoft published gallery solution the target solution resource name will be composed as `{name}({logAnalyticsWorkspaceName})`."
                              }
                            },
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Log Analytics workspace where the solution will be deployed/enabled."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "product": {
                              "type": "string",
                              "defaultValue": "OMSGallery",
                              "metadata": {
                                "description": "Optional. The product of the deployed solution. For Microsoft published gallery solution it should be `OMSGallery` and the target solution resource product will be composed as `OMSGallery/{name}`. For third party solution, it can be anything. This is case sensitive."
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "defaultValue": "Microsoft",
                              "metadata": {
                                "description": "Optional. The publisher name of the deployed solution. For Microsoft published gallery solution, it is `Microsoft`."
                              }
                            }
                          },
                          "variables": {
                            "solutionName": "[if(equals(parameters('publisher'), 'Microsoft'), format('{0}({1})', parameters('name'), parameters('logAnalyticsWorkspaceName')), parameters('name'))]",
                            "solutionProduct": "[if(equals(parameters('publisher'), 'Microsoft'), format('OMSGallery/{0}', parameters('name')), parameters('product'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.OperationsManagement/solutions",
                              "apiVersion": "2015-11-01-preview",
                              "name": "[variables('solutionName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
                              },
                              "plan": {
                                "name": "[variables('solutionName')]",
                                "promotionCode": "",
                                "product": "[variables('solutionProduct')]",
                                "publisher": "[parameters('publisher')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[variables('solutionName')]",
                              "metadata": {
                                "description": "The name of the deployed solution."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.OperationsManagement/solutions', variables('solutionName'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed solution."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group where the solution is deployed."
                              }
                            },
                            "location": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.OperationsManagement/solutions', variables('solutionName')), '2015-11-01-preview', 'full').location]",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "logAnalyticsWorkspace_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-LAW-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "10889391050789240153"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.OperationalInsights/workspaces', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the deployed log analytics workspace."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group of the deployed log analytics workspace."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the deployed log analytics workspace."
                      }
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), '2021-06-01').customerId]",
                      "metadata": {
                        "description": "The ID associated with the workspace."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), '2021-06-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId(parameters('parOperationsSubscriptionId'), 'Microsoft.Resources/deployments', format('deploy-logging-rg-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[subscriptionResourceId(parameters('parOperationsSubscriptionId'), 'Microsoft.Resources/deployments', format('Tags-logging-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ],
              "metadata": {
                "description": "Log Analytics Workspace"
              }
            },
            {
              "condition": "[variables('varSolutions')[copyIndex()].deploy]",
              "copy": {
                "name": "modLogAnalyticsWorkspaceSolutions",
                "count": "[length(variables('varSolutions'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-laws-{0}-{1}', variables('varSolutions')[copyIndex()].name, parameters('parDeploymentNameSuffix'))]",
              "resourceGroup": "[variables('varLoggingResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "logAnalyticsWorkspaceName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varLoggingResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-laws-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.name.value]"
                  },
                  "name": {
                    "value": "[variables('varSolutions')[copyIndex()].name]"
                  },
                  "product": {
                    "value": "[variables('varSolutions')[copyIndex()].product]"
                  },
                  "publisher": {
                    "value": "[variables('varSolutions')[copyIndex()].publisher]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "252797623535637597"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the solution. For Microsoft published gallery solution the target solution resource name will be composed as `{name}({logAnalyticsWorkspaceName})`."
                      }
                    },
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Log Analytics workspace where the solution will be deployed/enabled."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "product": {
                      "type": "string",
                      "defaultValue": "OMSGallery",
                      "metadata": {
                        "description": "Optional. The product of the deployed solution. For Microsoft published gallery solution it should be `OMSGallery` and the target solution resource product will be composed as `OMSGallery/{name}`. For third party solution, it can be anything. This is case sensitive."
                      }
                    },
                    "publisher": {
                      "type": "string",
                      "defaultValue": "Microsoft",
                      "metadata": {
                        "description": "Optional. The publisher name of the deployed solution. For Microsoft published gallery solution, it is `Microsoft`."
                      }
                    }
                  },
                  "variables": {
                    "solutionName": "[if(equals(parameters('publisher'), 'Microsoft'), format('{0}({1})', parameters('name'), parameters('logAnalyticsWorkspaceName')), parameters('name'))]",
                    "solutionProduct": "[if(equals(parameters('publisher'), 'Microsoft'), format('OMSGallery/{0}', parameters('name')), parameters('product'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationsManagement/solutions",
                      "apiVersion": "2015-11-01-preview",
                      "name": "[variables('solutionName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
                      },
                      "plan": {
                        "name": "[variables('solutionName')]",
                        "promotionCode": "",
                        "product": "[variables('solutionProduct')]",
                        "publisher": "[parameters('publisher')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[variables('solutionName')]",
                      "metadata": {
                        "description": "The name of the deployed solution."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.OperationsManagement/solutions', variables('solutionName'))]",
                      "metadata": {
                        "description": "The resource ID of the deployed solution."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group where the solution is deployed."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.OperationsManagement/solutions', variables('solutionName')), '2015-11-01-preview', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varLoggingResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-laws-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ],
              "metadata": {
                "description": "Log Analytics Workspace Solutions"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-diagnostic-logging-{0}', parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[parameters('parOperationsSubscriptionId')]",
              "resourceGroup": "[variables('varLoggingResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "diagnosticStorageAccountName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varLoggingResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-logging-logStorage-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.name.value]"
                  },
                  "logAnalyticsWorkspaceName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varLoggingResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-laws-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.name.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "17859757302544446855"
                    }
                  },
                  "parameters": {
                    "diagnosticStorageAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Storage Account to which you would like to collect diagnostic logs."
                      }
                    },
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Log Analytics workspace to which you would like to send diagnostic logs."
                      }
                    },
                    "supportedClouds": {
                      "type": "array",
                      "defaultValue": [
                        "AzureCloud",
                        "AzureUSGovernment"
                      ],
                      "metadata": {
                        "description": "List of clouds that support Log Analytics Diagnostics"
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[contains(parameters('supportedClouds'), environment().name)]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('logAnalyticsWorkspaceName'))]",
                      "name": "enable-log-analytics-diagnostics",
                      "properties": {
                        "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
                        "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('diagnosticStorageAccountName'))]",
                        "logs": [
                          {
                            "category": "Audit",
                            "enabled": true
                          }
                        ],
                        "metrics": [
                          {
                            "category": "AllMetrics",
                            "enabled": true
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varLoggingResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-laws-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[subscriptionResourceId(parameters('parOperationsSubscriptionId'), 'Microsoft.Resources/deployments', format('deploy-logging-rg-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varLoggingResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-logging-logStorage-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ],
              "metadata": {
                "description": "Log Analytics Workspace Diagnostic Logging"
              }
            }
          ],
          "outputs": {
            "outLogAnalyticsWorkspaceName": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varLoggingResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-laws-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.name.value]"
            },
            "outLogAnalyticsWorkspaceResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varLoggingResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-laws-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
            },
            "outLogAnalyticsWorkspaceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varLoggingResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-laws-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.logAnalyticsWorkspaceId.value]"
            },
            "outLogAnalyticsSolutions": {
              "type": "array",
              "value": "[variables('varSolutions')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hubspoke-tags--{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('parNetworkArtifacts').enable]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('deploy-hub-artifacts-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
      "subscriptionId": "[parameters('parHub').subscriptionId]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "parOrgPrefix": {
            "value": "[parameters('parRequired').orgPrefix]"
          },
          "parLocation": {
            "value": "[parameters('parLocation')]"
          },
          "parDeployEnvironment": {
            "value": "[parameters('parRequired').deployEnvironment]"
          },
          "parTags": {
            "value": "[reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hubspoke-tags--{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
          },
          "parArtifactsKeyVaultPolicies": {
            "value": "[parameters('parNetworkArtifacts').artifactsKeyVault.keyVaultPolicies]"
          },
          "parArtifactsStorageAccountAccess": {
            "value": "[parameters('parNetworkArtifacts').storageAccountAccess]"
          },
          "parEnableBastionSecrets": {
            "value": "[parameters('parRemoteAccess').enable]"
          },
          "parLinuxVmAdminPasswordOrKey": {
            "value": "[parameters('parRemoteAccess').bastion.linux.vmAdminPasswordOrKey]"
          },
          "parWindowsVmAdminPassword": {
            "value": "[parameters('parRemoteAccess').bastion.windows.vmAdminPassword]"
          },
          "parEnableResourceLocks": {
            "value": "[parameters('parNetworkArtifacts').enableResourceLocks]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.13.1.58284",
              "templateHash": "4846533929452812740"
            }
          },
          "parameters": {
            "parOrgPrefix": {
              "type": "string",
              "defaultValue": "anoa",
              "metadata": {
                "description": "Prefix value which will be prepended to all resource names. Default: anoa"
              }
            },
            "parHubSubscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "The subscription ID for the Hub Network and resources. It defaults to the deployment subscription."
              }
            },
            "parLocation": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "The region to deploy resources into. It defaults to the deployment location."
              }
            },
            "parTags": {
              "type": "object",
              "metadata": {
                "description": "Tags"
              }
            },
            "parDeployEnvironment": {
              "type": "string",
              "defaultValue": "platforms",
              "metadata": {
                "description": "A suffix, 3 to 15 characters in length, to append to resource names (e.g. \"dev\", \"test\", \"prod\", \"platforms\"). It defaults to \"platforms\"."
              },
              "maxLength": 15,
              "minLength": 3
            },
            "parDeploymentNameSuffix": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "A suffix to use for naming deployments uniquely. It defaults to the Bicep resolution of the \"utcNow()\" function."
              }
            },
            "parEnableBastionSecrets": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "When deploying a Bastion host, this switch will add bastion secrets to the key vault."
              }
            },
            "parArtifactsKeyVaultPolicies": {
              "type": "object",
              "metadata": {
                "description": "The Artifacts Key Vault Access Policies"
              }
            },
            "parLogStorageSkuName": {
              "type": "string",
              "defaultValue": "Standard_GRS",
              "metadata": {
                "description": "The Storage Account SKU to use for log storage. It defaults to \"Standard_GRS\". See https://docs.microsoft.com/en-us/rest/api/storagerp/srp_sku_types for valid settings."
              }
            },
            "parArtifactsStorageAccountAccess": {
              "type": "object",
              "metadata": {
                "description": "Account for access to Storage"
              }
            },
            "parEnableResourceLocks": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Switch which allows enable resource locks on all resources. Default: true"
              }
            },
            "parLinuxVmAdminPasswordOrKey": {
              "type": "secureString"
            },
            "parWindowsVmAdminPassword": {
              "type": "secureString",
              "minLength": 12
            }
          },
          "variables": {
            "varResourceToken": "resource_token",
            "varNameToken": "name_token",
            "varNamingConvention": "[format('{0}-{1}-{2}-{3}-{4}', toLower(parameters('parOrgPrefix')), toLower(parameters('parLocation')), toLower(parameters('parDeployEnvironment')), variables('varNameToken'), toLower(variables('varResourceToken')))]",
            "varResourceGroupNamingConvention": "[replace(variables('varNamingConvention'), variables('varResourceToken'), 'rg')]",
            "varStorageAccountNamingConvention": "[toLower(format('{0}st{1}unique_storage_token', parameters('parOrgPrefix'), variables('varNameToken')))]",
            "varKeyVaultNamingConvention": "[toLower(format('{0}kv{1}unique_kv_token', parameters('parOrgPrefix'), variables('varNameToken')))]",
            "varPreReqName": "artifacts",
            "varPreReqShortName": "afts",
            "varPreReqResourceGroupName": "[replace(variables('varResourceGroupNamingConvention'), variables('varNameToken'), variables('varPreReqName'))]",
            "varPreReqLogStorageAccountShortName": "[replace(variables('varStorageAccountNamingConvention'), variables('varNameToken'), variables('varPreReqShortName'))]",
            "varPreReqLogStorageAccountUniqueName": "[replace(variables('varPreReqLogStorageAccountShortName'), 'unique_storage_token', uniqueString(parameters('parOrgPrefix'), parameters('parLocation'), parameters('parDeployEnvironment'), parameters('parHubSubscriptionId')))]",
            "varPreReqLogStorageAccountName": "[take(variables('varPreReqLogStorageAccountUniqueName'), 23)]",
            "varPreReqKeyVaultShortName": "[replace(variables('varKeyVaultNamingConvention'), variables('varNameToken'), variables('varPreReqShortName'))]",
            "varPreReqKeyVaultUniqueName": "[replace(variables('varPreReqKeyVaultShortName'), 'unique_kv_token', uniqueString(parameters('parOrgPrefix'), parameters('parLocation'), parameters('parDeployEnvironment'), parameters('parHubSubscriptionId')))]",
            "varPreReqKeyVaultName": "[take(variables('varPreReqKeyVaultUniqueName'), 23)]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-tags-{1}-{2}', variables('varPreReqShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[parameters('parHubSubscriptionId')]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "onlyUpdate": {
                    "value": true
                  },
                  "tags": {
                    "value": "[parameters('parTags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "216182755991536021"
                    }
                  },
                  "parameters": {
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags for the resource group. If not provided, removes existing tags."
                      }
                    },
                    "onlyUpdate": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Instead of overwriting the existing tags, combine them with the new tags."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the Resource Group to assign the tags to. If no Resource Group name is provided, and Subscription ID is provided, the module deploys at subscription level, therefore assigns the provided tags to the subscription."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().id]",
                      "metadata": {
                        "description": "Optional. Subscription ID of the subscription to assign the tags to. If no Resource Group name is provided, the module deploys at subscription level, therefore assigns the provided tags to the subscription."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Tags-Sub', deployment().name)]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "onlyUpdate": {
                            "value": "[parameters('onlyUpdate')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "1405711280777017718"
                            }
                          },
                          "parameters": {
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags for the resource group. If not provided, removes existing tags."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the tags resource."
                              }
                            },
                            "onlyUpdate": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Instead of overwriting the existing tags, combine them with the new tags."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/tags",
                              "apiVersion": "2019-10-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "tags": "[if(parameters('onlyUpdate'), union(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2020-10-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]"
                              },
                              "dependsOn": [
                                "[subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name))]"
                              ]
                            },
                            {
                              "condition": "[parameters('onlyUpdate')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-ReadTags', deployment().name)]",
                              "location": "[deployment().location]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "12771816053208228273"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the tags resource."
                                      }
                                    }
                                  },
                                  "resources": [],
                                  "outputs": {
                                    "existingTags": {
                                      "type": "object",
                                      "value": "[if(contains(reference(subscriptionResourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01'), 'tags'), reference(subscriptionResourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01').tags, createObject())]",
                                      "metadata": {
                                        "description": "Tags currently applied to the subscription level"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the tags resource."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "value": "[if(parameters('onlyUpdate'), union(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2020-10-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]",
                              "metadata": {
                                "description": "The applied tags."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[subscriptionResourceId('Microsoft.Resources/tags', parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the applied tags."
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId'))))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Tags-RG', deployment().name)]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "onlyUpdate": {
                            "value": "[parameters('onlyUpdate')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "3625051557808284647"
                            }
                          },
                          "parameters": {
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags for the resource group. If not provided, removes existing tags."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the tags resource."
                              }
                            },
                            "onlyUpdate": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Instead of overwriting the existing tags, combine them with the new tags."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/tags",
                              "apiVersion": "2019-10-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "tags": "[if(parameters('onlyUpdate'), union(reference(resourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2020-10-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name))]"
                              ]
                            },
                            {
                              "condition": "[parameters('onlyUpdate')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-ReadTags', deployment().name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "10085828695555767678"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the tags resource."
                                      }
                                    }
                                  },
                                  "resources": [],
                                  "outputs": {
                                    "existingTags": {
                                      "type": "object",
                                      "value": "[if(contains(reference(resourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01'), 'tags'), reference(resourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01').tags, createObject())]",
                                      "metadata": {
                                        "description": "Tags currently applied to the subscription level"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the tags resource."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Resources/tags', parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the applied tags."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the resource group the tags were applied to."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "value": "[if(parameters('onlyUpdate'), union(reference(resourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2020-10-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]",
                              "metadata": {
                                "description": "The applied tags."
                              }
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[if(and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-Tags-RG', deployment().name)), '2020-10-01').outputs.name.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-Tags-Sub', deployment().name)), '2020-10-01').outputs.name.value)]",
                      "metadata": {
                        "description": "The name of the tags resource."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "value": "[if(and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-Tags-RG', deployment().name)), '2020-10-01').outputs.tags.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-Tags-Sub', deployment().name)), '2020-10-01').outputs.tags.value)]",
                      "metadata": {
                        "description": "The applied tags."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[if(and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-Tags-RG', deployment().name)), '2020-10-01').outputs.resourceId.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-Tags-Sub', deployment().name)), '2020-10-01').outputs.resourceId.value)]",
                      "metadata": {
                        "description": "The resource ID of the applied tags."
                      }
                    }
                  }
                }
              },
              "metadata": {
                "description": "Resource group tags"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-rg-{0}-{1}-{2}', variables('varPreReqShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[parameters('parHubSubscriptionId')]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varPreReqResourceGroupName')]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "tags": {
                    "value": "[reference(subscriptionResourceId(parameters('parHubSubscriptionId'), 'Microsoft.Resources/deployments', format('{0}-tags-{1}-{2}', variables('varPreReqShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "6154872068177151399"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Resource Group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[deployment().location]",
                      "metadata": {
                        "description": "Optional. Location of the Resource Group. It uses the deployment's location when not provided."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the storage account resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/resourceGroups",
                      "apiVersion": "2019-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {}
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-{1}-Lock', uniqueString(deployment().name, parameters('location')), parameters('lock'))]",
                      "resourceGroup": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "level": {
                            "value": "[parameters('lock')]"
                          },
                          "name": {
                            "value": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "16437344464782770871"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}-lock', parameters('level'))]",
                              "metadata": {
                                "description": "Optional. The name of the lock."
                              }
                            },
                            "level": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Set lock level."
                              },
                              "allowedValues": [
                                "CanNotDelete",
                                "ReadOnly"
                              ]
                            },
                            "notes": {
                              "type": "string",
                              "defaultValue": "[if(equals(parameters('level'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]",
                              "metadata": {
                                "description": "Optional. The decription attached to the lock."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "level": "[parameters('level')]",
                                "notes": "[parameters('notes')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the lock."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Authorization/locks', parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the lock."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the resource group name the lock was applied to."
                              }
                            },
                            "scope": {
                              "type": "string",
                              "value": "[resourceGroup().id]",
                              "metadata": {
                                "description": "The scope this lock applies to."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "resourceGroup_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-RG-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "resourceGroup": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "12032035567026887377"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the resource group."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the resource group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId(parameters('parHubSubscriptionId'), 'Microsoft.Resources/deployments', format('{0}-tags-{1}-{2}', variables('varPreReqShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-{0}-Storage-{1}-{2}', variables('varPreReqShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[parameters('parHubSubscriptionId')]",
              "resourceGroup": "[variables('varPreReqResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varPreReqLogStorageAccountName')]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "storageAccountSku": {
                    "value": "[parameters('parLogStorageSkuName')]"
                  },
                  "tags": {
                    "value": "[reference(subscriptionResourceId(parameters('parHubSubscriptionId'), 'Microsoft.Resources/deployments', format('{0}-tags-{1}-{2}', variables('varPreReqShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
                  },
                  "roleAssignments": "[if(parameters('parArtifactsStorageAccountAccess').enableRoleAssignmentForStorageAccount, createObject('value', createArray(createObject('principalIds', parameters('parArtifactsStorageAccountAccess').principalIds, 'roleDefinitionIdOrName', parameters('parArtifactsStorageAccountAccess').roleDefinitionIdOrName))), createObject('value', createArray()))]",
                  "lock": "[if(parameters('parEnableResourceLocks'), createObject('value', 'CanNotDelete'), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "845876767253618321"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Storage Account."
                      },
                      "maxLength": 24
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "systemAssignedIdentity": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enables system assigned managed identity on the resource."
                      }
                    },
                    "userAssignedIdentities": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The ID(s) to assign to the resource."
                      }
                    },
                    "storageAccountKind": {
                      "type": "string",
                      "defaultValue": "StorageV2",
                      "metadata": {
                        "description": "Optional. Type of Storage Account to create."
                      },
                      "allowedValues": [
                        "Storage",
                        "StorageV2",
                        "BlobStorage",
                        "FileStorage",
                        "BlockBlobStorage"
                      ]
                    },
                    "storageAccountSku": {
                      "type": "string",
                      "defaultValue": "Standard_GRS",
                      "metadata": {
                        "description": "Optional. Storage Account Sku Name."
                      },
                      "allowedValues": [
                        "Standard_LRS",
                        "Standard_GRS",
                        "Standard_RAGRS",
                        "Standard_ZRS",
                        "Premium_LRS",
                        "Premium_ZRS",
                        "Standard_GZRS",
                        "Standard_RAGZRS"
                      ]
                    },
                    "storageAccountAccessTier": {
                      "type": "string",
                      "defaultValue": "Hot",
                      "metadata": {
                        "description": "Optional. Storage Account Access Tier."
                      },
                      "allowedValues": [
                        "Hot",
                        "Cool"
                      ]
                    },
                    "azureFilesIdentityBasedAuthentication": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Provides the identity based authentication settings for Azure Files."
                      }
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                      }
                    },
                    "managementPolicyRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The Storage Account ManagementPolicies Rules."
                      }
                    },
                    "networkAcls": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Networks ACLs, this value contains IPs to whitelist and/or Subnet information. For security reasons, it is recommended to set the DefaultAction Deny."
                      }
                    },
                    "requireInfrastructureEncryption": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. A Boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest. For security reasons, it is recommended to set it to true."
                      }
                    },
                    "blobServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Blob service and containers to deploy."
                      }
                    },
                    "fileServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. File service and shares to deploy."
                      }
                    },
                    "queueServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Queue service and queues to create."
                      }
                    },
                    "tableServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Table service and tables to create."
                      }
                    },
                    "allowBlobPublicAccess": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether public access is enabled for all blobs or containers in the storage account. For security reasons, it is recommended to set it to false."
                      }
                    },
                    "minimumTlsVersion": {
                      "type": "string",
                      "defaultValue": "TLS1_2",
                      "metadata": {
                        "description": "Optional. Set the minimum TLS version on request to storage."
                      },
                      "allowedValues": [
                        "TLS1_0",
                        "TLS1_1",
                        "TLS1_2"
                      ]
                    },
                    "enableHierarchicalNamespace": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If true, enables Hierarchical Namespace for the storage account."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "",
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
                      }
                    },
                    "supportsHttpsTrafficOnly": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Allows HTTPS traffic only to storage service if sets to true."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "Transaction"
                      ],
                      "allowedValues": [
                        "Transaction"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "cMKKeyVaultResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The resource ID of a key vault to reference a customer managed key for encryption from."
                      }
                    },
                    "cMKKeyName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the customer managed key to use for encryption. Cannot be deployed together with the parameter 'systemAssignedIdentity' enabled."
                      }
                    },
                    "cMKUserAssignedIdentityResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Conditional. User assigned identity to use when fetching the customer managed key. Required if 'cMKKeyName' is not empty."
                      }
                    },
                    "cMKKeyVersion": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, latest is used."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ],
                    "supportsBlobService": "[or(or(or(equals(parameters('storageAccountKind'), 'BlockBlobStorage'), equals(parameters('storageAccountKind'), 'BlobStorage')), equals(parameters('storageAccountKind'), 'StorageV2')), equals(parameters('storageAccountKind'), 'Storage'))]",
                    "supportsFileService": "[or(or(equals(parameters('storageAccountKind'), 'FileStorage'), equals(parameters('storageAccountKind'), 'StorageV2')), equals(parameters('storageAccountKind'), 'Storage'))]",
                    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
                    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), createObject())), createObject())]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-09-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "kind": "[parameters('storageAccountKind')]",
                      "sku": {
                        "name": "[parameters('storageAccountSku')]"
                      },
                      "identity": "[variables('identity')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "encryption": {
                          "keySource": "[if(not(empty(parameters('cMKKeyName'))), 'Microsoft.Keyvault', 'Microsoft.Storage')]",
                          "services": {
                            "blob": "[if(variables('supportsBlobService'), createObject('enabled', true()), null())]",
                            "file": "[if(variables('supportsFileService'), createObject('enabled', true()), null())]",
                            "table": {
                              "enabled": true
                            },
                            "queue": {
                              "enabled": true
                            }
                          },
                          "requireInfrastructureEncryption": "[if(not(equals(parameters('storageAccountKind'), 'Storage')), parameters('requireInfrastructureEncryption'), null())]",
                          "keyvaultproperties": "[if(not(empty(parameters('cMKKeyName'))), createObject('keyname', parameters('cMKKeyName'), 'keyvaulturi', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('cMKKeyVaultResourceId'), '/')[2], split(parameters('cMKKeyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults', last(split(parameters('cMKKeyVaultResourceId'), '/'))), '2021-06-01-preview').vaultUri, 'keyversion', if(not(empty(parameters('cMKKeyVersion'))), parameters('cMKKeyVersion'), null())), null())]",
                          "identity": "[if(not(empty(parameters('cMKKeyName'))), createObject('userAssignedIdentity', parameters('cMKUserAssignedIdentityResourceId')), null())]"
                        },
                        "accessTier": "[if(not(equals(parameters('storageAccountKind'), 'Storage')), parameters('storageAccountAccessTier'), null())]",
                        "supportsHttpsTrafficOnly": "[parameters('supportsHttpsTrafficOnly')]",
                        "isHnsEnabled": "[if(parameters('enableHierarchicalNamespace'), parameters('enableHierarchicalNamespace'), null())]",
                        "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                        "networkAcls": "[if(not(empty(parameters('networkAcls'))), createObject('bypass', if(contains(parameters('networkAcls'), 'bypass'), parameters('networkAcls').bypass, null()), 'defaultAction', if(contains(parameters('networkAcls'), 'defaultAction'), parameters('networkAcls').defaultAction, null()), 'virtualNetworkRules', if(contains(parameters('networkAcls'), 'virtualNetworkRules'), parameters('networkAcls').virtualNetworkRules, createArray()), 'ipRules', if(contains(parameters('networkAcls'), 'ipRules'), parameters('networkAcls').ipRules, createArray())), null())]",
                        "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
                        "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkAcls'))), 'Disabled', null()))]",
                        "azureFilesIdentityBasedAuthentication": "[if(not(empty(parameters('azureFilesIdentityBasedAuthentication'))), parameters('azureFilesIdentityBasedAuthentication'), null())]"
                      }
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "storageAccount_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "2827160161514534534"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Id of the delegated managed identity resource."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('managementPolicyRules')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-ManagementPolicies', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "rules": {
                            "value": "[parameters('managementPolicyRules')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "648447714037160345"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the storage container to deploy."
                              }
                            },
                            "rules": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The Storage Account ManagementPolicies Rules."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[not(empty(parameters('rules')))]",
                              "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                              "apiVersion": "2019-06-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "policy": {
                                  "rules": "[parameters('rules')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The resource ID of the deployed management policy."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed management policy."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed management policy."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('blobServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-BlobServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "containers": "[if(contains(parameters('blobServices'), 'containers'), createObject('value', parameters('blobServices').containers), createObject('value', createArray()))]",
                          "automaticSnapshotPolicyEnabled": "[if(contains(parameters('blobServices'), 'automaticSnapshotPolicyEnabled'), createObject('value', parameters('blobServices').automaticSnapshotPolicyEnabled), createObject('value', false()))]",
                          "deleteRetentionPolicy": "[if(contains(parameters('blobServices'), 'deleteRetentionPolicy'), createObject('value', parameters('blobServices').deleteRetentionPolicy), createObject('value', true()))]",
                          "deleteRetentionPolicyDays": "[if(contains(parameters('blobServices'), 'deleteRetentionPolicyDays'), createObject('value', parameters('blobServices').deleteRetentionPolicyDays), createObject('value', 7))]",
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('blobServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('blobServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('blobServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('blobServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('blobServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('blobServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('blobServices'), 'diagnosticEventHubName'), createObject('value', parameters('blobServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('blobServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('blobServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('blobServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('blobServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('blobServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('blobServices').diagnosticWorkspaceId), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "2492256184813709438"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the blob service."
                              }
                            },
                            "deleteRetentionPolicy": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates whether DeleteRetentionPolicy is enabled for the Blob service."
                              }
                            },
                            "deleteRetentionPolicyDays": {
                              "type": "int",
                              "defaultValue": 7,
                              "metadata": {
                                "description": "Optional. Indicates the number of days that the deleted blob should be retained. The minimum specified value can be 1 and the maximum value can be 365."
                              }
                            },
                            "automaticSnapshotPolicyEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Automatic Snapshot is enabled if set to true."
                              }
                            },
                            "containers": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Blob containers to create."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/blobServices",
                              "apiVersion": "2021-06-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "deleteRetentionPolicy": {
                                  "enabled": "[parameters('deleteRetentionPolicy')]",
                                  "days": "[parameters('deleteRetentionPolicyDays')]"
                                },
                                "automaticSnapshotPolicyEnabled": "[parameters('automaticSnapshotPolicyEnabled')]"
                              }
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "blobServices_container",
                                "count": "[length(parameters('containers'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Container-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "blobServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('containers')[copyIndex()].name]"
                                  },
                                  "publicAccess": "[if(contains(parameters('containers')[copyIndex()], 'publicAccess'), createObject('value', parameters('containers')[copyIndex()].publicAccess), createObject('value', 'None'))]",
                                  "roleAssignments": "[if(contains(parameters('containers')[copyIndex()], 'roleAssignments'), createObject('value', parameters('containers')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
                                  "immutabilityPolicyProperties": "[if(contains(parameters('containers')[copyIndex()], 'immutabilityPolicyProperties'), createObject('value', parameters('containers')[copyIndex()].immutabilityPolicyProperties), createObject('value', createObject()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "2456554778800083860"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      },
                                      "maxLength": 24
                                    },
                                    "blobServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. Name of the blob service."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the storage container to deploy."
                                      }
                                    },
                                    "immutabilityPolicyName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. Name of the immutable policy."
                                      }
                                    },
                                    "publicAccess": {
                                      "type": "string",
                                      "defaultValue": "None",
                                      "metadata": {
                                        "description": "Optional. Specifies whether data in the container may be accessed publicly and the level of access."
                                      },
                                      "allowedValues": [
                                        "Container",
                                        "Blob",
                                        "None"
                                      ]
                                    },
                                    "immutabilityPolicyProperties": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Configure immutability policy."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                                      "apiVersion": "2021-09-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]",
                                      "properties": {
                                        "publicAccess": "[parameters('publicAccess')]"
                                      }
                                    },
                                    {
                                      "condition": "[not(empty(parameters('immutabilityPolicyProperties')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[parameters('immutabilityPolicyName')]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "storageAccountName": {
                                            "value": "[parameters('storageAccountName')]"
                                          },
                                          "blobServicesName": {
                                            "value": "[parameters('blobServicesName')]"
                                          },
                                          "containerName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "immutabilityPeriodSinceCreationInDays": "[if(contains(parameters('immutabilityPolicyProperties'), 'immutabilityPeriodSinceCreationInDays'), createObject('value', parameters('immutabilityPolicyProperties').immutabilityPeriodSinceCreationInDays), createObject('value', 365))]",
                                          "allowProtectedAppendWrites": "[if(contains(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWrites'), createObject('value', parameters('immutabilityPolicyProperties').allowProtectedAppendWrites), createObject('value', true()))]"
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.13.1.58284",
                                              "templateHash": "12947603763516415104"
                                            }
                                          },
                                          "parameters": {
                                            "storageAccountName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                              },
                                              "maxLength": 24
                                            },
                                            "blobServicesName": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent blob service. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "containerName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent container to apply the policy to. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. Name of the immutable policy."
                                              }
                                            },
                                            "immutabilityPeriodSinceCreationInDays": {
                                              "type": "int",
                                              "defaultValue": 365,
                                              "metadata": {
                                                "description": "Optional. The immutability period for the blobs in the container since the policy creation, in days."
                                              }
                                            },
                                            "allowProtectedAppendWrites": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies",
                                              "apiVersion": "2019-06-01",
                                              "name": "[format('{0}/{1}/{2}/{3}', parameters('storageAccountName'), parameters('blobServicesName'), parameters('containerName'), parameters('name'))]",
                                              "properties": {
                                                "immutabilityPeriodSinceCreationInDays": "[parameters('immutabilityPeriodSinceCreationInDays')]",
                                                "allowProtectedAppendWrites": "[parameters('allowProtectedAppendWrites')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "value": "[parameters('name')]",
                                              "metadata": {
                                                "description": "The name of the deployed immutability policy."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies', parameters('storageAccountName'), parameters('blobServicesName'), parameters('containerName'), parameters('name'))]",
                                              "metadata": {
                                                "description": "The resource ID of the deployed immutability policy."
                                              }
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "value": "[resourceGroup().name]",
                                              "metadata": {
                                                "description": "The resource group of the deployed immutability policy."
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "copy": {
                                        "name": "container_roleAssignments",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.13.1.58284",
                                              "templateHash": "17770721562698605711"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the principals to assign the role to."
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The description of the role assignment."
                                              }
                                            },
                                            "condition": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                                              }
                                            },
                                            "conditionVersion": {
                                              "type": "string",
                                              "defaultValue": "2.0",
                                              "allowedValues": [
                                                "2.0"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Version of the condition."
                                              }
                                            },
                                            "delegatedManagedIdentityResourceId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Id of the delegated managed identity resource."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Desktop Virtualization Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a959dbd1-f747-45e3-8ba6-dd80f235f97c')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                                              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                                              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                                              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                                              "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                                              "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                                              "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                                              "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                                              "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2])]",
                                              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed container."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed container."
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed container."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed blob service."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed blob service."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the deployed blob service."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('fileServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-FileServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('fileServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('fileServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('fileServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('fileServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('fileServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('fileServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('fileServices'), 'diagnosticEventHubName'), createObject('value', parameters('fileServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('fileServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('fileServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('fileServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('fileServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "protocolSettings": "[if(contains(parameters('fileServices'), 'protocolSettings'), createObject('value', parameters('fileServices').protocolSettings), createObject('value', createObject()))]",
                          "shareDeleteRetentionPolicy": "[if(contains(parameters('fileServices'), 'shareDeleteRetentionPolicy'), createObject('value', parameters('fileServices').shareDeleteRetentionPolicy), createObject('value', createObject('enabled', true(), 'days', 7)))]",
                          "shares": "[if(contains(parameters('fileServices'), 'shares'), createObject('value', parameters('fileServices').shares), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('fileServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('fileServices').diagnosticWorkspaceId), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "4217098231629340516"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the file service."
                              }
                            },
                            "protocolSettings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Protocol settings for file service."
                              }
                            },
                            "shareDeleteRetentionPolicy": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": true,
                                "days": 7
                              },
                              "metadata": {
                                "description": "Optional. The service properties for soft delete."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "shares": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. File shares to create."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/fileServices",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "protocolSettings": "[parameters('protocolSettings')]",
                                "shareDeleteRetentionPolicy": "[parameters('shareDeleteRetentionPolicy')]"
                              }
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "fileServices_shares",
                                "count": "[length(parameters('shares'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-shares-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "fileServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('shares')[copyIndex()].name]"
                                  },
                                  "enabledProtocols": "[if(contains(parameters('shares')[copyIndex()], 'enabledProtocols'), createObject('value', parameters('shares')[copyIndex()].enabledProtocols), createObject('value', 'SMB'))]",
                                  "rootSquash": "[if(contains(parameters('shares')[copyIndex()], 'rootSquash'), createObject('value', parameters('shares')[copyIndex()].rootSquash), createObject('value', 'NoRootSquash'))]",
                                  "sharedQuota": "[if(contains(parameters('shares')[copyIndex()], 'sharedQuota'), createObject('value', parameters('shares')[copyIndex()].sharedQuota), createObject('value', 5120))]",
                                  "roleAssignments": "[if(contains(parameters('shares')[copyIndex()], 'roleAssignments'), createObject('value', parameters('shares')[copyIndex()].roleAssignments), createObject('value', createArray()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "7898615982963373812"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      },
                                      "maxLength": 24
                                    },
                                    "fileServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent file service. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the file share to create."
                                      }
                                    },
                                    "sharedQuota": {
                                      "type": "int",
                                      "defaultValue": 5120,
                                      "metadata": {
                                        "description": "Optional. The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400."
                                      }
                                    },
                                    "enabledProtocols": {
                                      "type": "string",
                                      "defaultValue": "SMB",
                                      "metadata": {
                                        "description": "Optional. The authentication protocol that is used for the file share. Can only be specified when creating a share."
                                      },
                                      "allowedValues": [
                                        "NFS",
                                        "SMB"
                                      ]
                                    },
                                    "rootSquash": {
                                      "type": "string",
                                      "defaultValue": "NoRootSquash",
                                      "metadata": {
                                        "description": "Optional. Permissions for NFS file shares are enforced by the client OS rather than the Azure Files service. Toggling the root squash behavior reduces the rights of the root user for NFS shares."
                                      },
                                      "allowedValues": [
                                        "AllSquash",
                                        "NoRootSquash",
                                        "RootSquash"
                                      ]
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                                      "apiVersion": "2021-08-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]",
                                      "properties": {
                                        "shareQuota": "[parameters('sharedQuota')]",
                                        "rootSquash": "[if(equals(parameters('enabledProtocols'), 'NFS'), parameters('rootSquash'), null())]",
                                        "enabledProtocols": "[parameters('enabledProtocols')]"
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "fileShare_roleAssignments",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.13.1.58284",
                                              "templateHash": "5820655604316332903"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the principals to assign the role to."
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The description of the role assignment."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                              "Storage Account Backup Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                                              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                                              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                                              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                                              "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                                              "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                                              "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                                              "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                                              "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}/shares/{2}', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2])]",
                                              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed file share."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed file share."
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed file share."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed file share service."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed file share service."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed file share service."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('queueServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-QueueServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('queueServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('queueServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('queueServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('queueServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('queueServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('queueServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('queueServices'), 'diagnosticEventHubName'), createObject('value', parameters('queueServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('queueServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('queueServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('queueServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('queueServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "queues": "[if(contains(parameters('queueServices'), 'queues'), createObject('value', parameters('queueServices').queues), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('queueServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('queueServices').diagnosticWorkspaceId), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "17554831229879274483"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the queue service."
                              }
                            },
                            "queues": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Queues to create."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/queueServices",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {}
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "queueServices_queues",
                                "count": "[length(parameters('queues'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Queue-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "queueServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('queues')[copyIndex()].name]"
                                  },
                                  "metadata": "[if(contains(parameters('queues')[copyIndex()], 'metadata'), createObject('value', parameters('queues')[copyIndex()].metadata), createObject('value', createObject()))]",
                                  "roleAssignments": "[if(contains(parameters('queues')[copyIndex()], 'roleAssignments'), createObject('value', parameters('queues')[copyIndex()].roleAssignments), createObject('value', createArray()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "12540260969676082467"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      },
                                      "maxLength": 24
                                    },
                                    "queueServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent queue service. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the storage queue to deploy."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Required. A name-value pair that represents queue metadata."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
                                      "apiVersion": "2019-06-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]"
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "queue_roleAssignments",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.13.1.58284",
                                              "templateHash": "9678424203152711384"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the principals to assign the role to."
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The description of the role assignment."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Avere Cluster Create": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7b1b19a-0e83-4fe5-935c-faaefbfd18c3')]",
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Azure Service Deploy Release Management Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21d96096-b162-414a-8302-d8354f9d91b2')]",
                                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                              "CAL-Custom-Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7b266cd7-0bba-4ae2-8423-90ede5e1e898')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                                              "Dsms Role (deprecated)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b91f4c0b-46e3-47bb-a242-eecfe23b3b5b')]",
                                              "Dsms Role (do not use)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7aff565e-6c55-448d-83db-ccf482c6da2f')]",
                                              "GenevaWarmPathResourceContributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9f15f5f5-77bd-413a-aa88-4b9c68b1e7bc')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "masterreader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a48d7796-14b4-4889-afef-fbb65a93e5a2')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                              "Storage Account Backup Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}/queues/{2}', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2])]",
                                              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed queue."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed queue."
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed queue."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed file share service."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed file share service."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed file share service."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('tableServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-TableServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('tableServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('tableServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('tableServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('tableServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('tableServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('tableServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('tableServices'), 'diagnosticEventHubName'), createObject('value', parameters('tableServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('tableServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('tableServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('tableServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('tableServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "tables": "[if(contains(parameters('tableServices'), 'tables'), createObject('value', parameters('tableServices').tables), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('tableServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('tableServices').diagnosticWorkspaceId), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "4879914104814210714"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the table service."
                              }
                            },
                            "tables": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. tables to create."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/tableServices",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {}
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "tableServices_tables",
                                "count": "[length(parameters('tables'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Table-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "tableServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('tables')[copyIndex()]]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "15504629824916397824"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      },
                                      "maxLength": 24
                                    },
                                    "tableServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent table service. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the table."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
                                      "apiVersion": "2021-06-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('tableServicesName'), parameters('name'))]"
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed file share service."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices/tables', parameters('storageAccountName'), parameters('tableServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed file share service."
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed file share service."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed table service."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed table service."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed table service."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the deployed storage account."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the deployed storage account."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group of the deployed storage account."
                      }
                    },
                    "primaryBlobEndpoint": {
                      "type": "string",
                      "value": "[if(and(not(empty(parameters('blobServices'))), contains(parameters('blobServices'), 'containers')), reference(format('Microsoft.Storage/storageAccounts/{0}', parameters('name')), '2019-04-01').primaryEndpoints.blob, '')]",
                      "metadata": {
                        "description": "The primary blob endpoint reference if blob services are deployed."
                      }
                    },
                    "systemAssignedPrincipalId": {
                      "type": "string",
                      "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2021-09-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2021-09-01', 'full').identity.principalId, '')]",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2021-09-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId(parameters('parHubSubscriptionId'), 'Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}-{2}', variables('varPreReqShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[subscriptionResourceId(parameters('parHubSubscriptionId'), 'Microsoft.Resources/deployments', format('{0}-tags-{1}-{2}', variables('varPreReqShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ],
              "metadata": {
                "description": "Logging Storage Account"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-{0}-KV-{1}-{2}', variables('varPreReqShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[parameters('parHubSubscriptionId')]",
              "resourceGroup": "[variables('varPreReqResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varPreReqKeyVaultName')]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "tags": {
                    "value": "[reference(subscriptionResourceId(parameters('parHubSubscriptionId'), 'Microsoft.Resources/deployments', format('{0}-tags-{1}-{2}', variables('varPreReqShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
                  },
                  "accessPolicies": {
                    "value": [
                      {
                        "objectId": "[parameters('parArtifactsKeyVaultPolicies').objectId]",
                        "permissions": {
                          "keys": "[parameters('parArtifactsKeyVaultPolicies').permissions.keys]",
                          "secrets": "[parameters('parArtifactsKeyVaultPolicies').permissions.secrets]"
                        },
                        "tenantId": "[parameters('parArtifactsKeyVaultPolicies').tenantId]"
                      }
                    ]
                  },
                  "secrets": "[if(parameters('parEnableBastionSecrets'), createObject('value', createObject('secureList', createArray(createObject('attributesExp', 1702648632, 'attributesNbf', 10000, 'contentType', 'Microsoft.Compute/virtualMachines', 'name', 'LinuxVmAdminPasswordOrKey', 'value', parameters('parLinuxVmAdminPasswordOrKey')), createObject('attributesExp', 1702648632, 'attributesNbf', 10000, 'contentType', 'Microsoft.Compute/virtualMachines', 'name', 'WindowsVmAdminPassword', 'value', parameters('parWindowsVmAdminPassword'))), 'softDeleteRetentionInDays', 7)), createObject('value', createObject()))]",
                  "enableVaultForDeployment": {
                    "value": true
                  },
                  "enableVaultForDiskEncryption": {
                    "value": true
                  },
                  "enableVaultForTemplateDeployment": {
                    "value": true
                  },
                  "lock": "[if(parameters('parEnableResourceLocks'), createObject('value', 'CanNotDelete'), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "13344371858236071787"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Required. Name of the Key Vault. Must be globally unique."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "accessPolicies": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of access policies object."
                      }
                    },
                    "secrets": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. All secrets to create."
                      }
                    },
                    "keys": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. All keys to create."
                      }
                    },
                    "enableVaultForDeployment": {
                      "type": "bool",
                      "defaultValue": true,
                      "allowedValues": [
                        true,
                        false
                      ],
                      "metadata": {
                        "description": "Optional. Specifies if the vault is enabled for deployment by script or compute."
                      }
                    },
                    "enableVaultForTemplateDeployment": {
                      "type": "bool",
                      "defaultValue": true,
                      "allowedValues": [
                        true,
                        false
                      ],
                      "metadata": {
                        "description": "Optional. Specifies if the vault is enabled for a template deployment."
                      }
                    },
                    "enableVaultForDiskEncryption": {
                      "type": "bool",
                      "defaultValue": true,
                      "allowedValues": [
                        true,
                        false
                      ],
                      "metadata": {
                        "description": "Optional. Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
                      }
                    },
                    "enableSoftDelete": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Switch to enable/disable Key Vault's soft delete feature."
                      }
                    },
                    "softDeleteRetentionInDays": {
                      "type": "int",
                      "defaultValue": 90,
                      "metadata": {
                        "description": "Optional. softDelete data retention days. It accepts >=7 and <=90."
                      }
                    },
                    "enableRbacAuthorization": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be ignored (warning: this is a preview feature). When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC."
                      }
                    },
                    "createMode": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. The vault's create mode to indicate whether the vault need to be recovered or not. - recover or default."
                      }
                    },
                    "enablePurgeProtection": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Provide 'true' to enable Key Vault's purge protection feature."
                      }
                    },
                    "vaultSku": {
                      "type": "string",
                      "defaultValue": "premium",
                      "allowedValues": [
                        "premium",
                        "standard"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies the SKU for the vault."
                      }
                    },
                    "networkAcls": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Service endpoint object information. For security reasons, it is recommended to set the DefaultAction Deny."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "",
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Resource tags."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AuditEvent",
                        "AzurePolicyEvaluationDetails"
                      ],
                      "allowedValues": [
                        "AuditEvent",
                        "AzurePolicyEvaluationDetails"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      },
                      {
                        "name": "formattedAccessPolicies",
                        "count": "[length(parameters('accessPolicies'))]",
                        "input": {
                          "applicationId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'applicationId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].applicationId, '')]",
                          "objectId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'objectId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].objectId, '')]",
                          "permissions": "[parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].permissions]",
                          "tenantId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'tenantId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].tenantId, tenant().tenantId)]"
                        }
                      }
                    ],
                    "networkAcls_var": {
                      "bypass": "[if(not(empty(parameters('networkAcls'))), parameters('networkAcls').bypass, null())]",
                      "defaultAction": "[if(not(empty(parameters('networkAcls'))), parameters('networkAcls').defaultAction, null())]",
                      "virtualNetworkRules": "[if(and(not(empty(parameters('networkAcls'))), contains(parameters('networkAcls'), 'virtualNetworkRules')), parameters('networkAcls').virtualNetworkRules, createArray())]",
                      "ipRules": "[if(and(not(empty(parameters('networkAcls'))), contains(parameters('networkAcls'), 'ipRules')), parameters('networkAcls').ipRules, createArray())]"
                    },
                    "secretList": "[if(not(empty(parameters('secrets'))), parameters('secrets').secureList, createArray())]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2021-11-01-preview",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "enabledForDeployment": "[parameters('enableVaultForDeployment')]",
                        "enabledForTemplateDeployment": "[parameters('enableVaultForTemplateDeployment')]",
                        "enabledForDiskEncryption": "[parameters('enableVaultForDiskEncryption')]",
                        "enableSoftDelete": "[parameters('enableSoftDelete')]",
                        "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                        "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]",
                        "createMode": "[parameters('createMode')]",
                        "enablePurgeProtection": "[if(parameters('enablePurgeProtection'), parameters('enablePurgeProtection'), null())]",
                        "tenantId": "[subscription().tenantId]",
                        "accessPolicies": "[variables('formattedAccessPolicies')]",
                        "sku": {
                          "name": "[parameters('vaultSku')]",
                          "family": "A"
                        },
                        "networkAcls": "[if(not(empty(parameters('networkAcls'))), variables('networkAcls_var'), null())]",
                        "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(not(empty(parameters('privateEndpoints'))), 'Disabled', null()))]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('accessPolicies')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-KeyVault-AccessPolicies', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "accessPolicies": {
                            "value": "[variables('formattedAccessPolicies')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "4274611821112013151"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "add",
                              "metadata": {
                                "description": "Optional. The access policy deployment."
                              }
                            },
                            "accessPolicies": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedAccessPolicies",
                                "count": "[length(parameters('accessPolicies'))]",
                                "input": {
                                  "applicationId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'applicationId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].applicationId, '')]",
                                  "objectId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'objectId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].objectId, '')]",
                                  "permissions": "[parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].permissions]",
                                  "tenantId": "[if(contains(parameters('accessPolicies')[copyIndex('formattedAccessPolicies')], 'tenantId'), parameters('accessPolicies')[copyIndex('formattedAccessPolicies')].tenantId, tenant().tenantId)]"
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.KeyVault/vaults/accessPolicies",
                              "apiVersion": "2021-06-01-preview",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "properties": {
                                "accessPolicies": "[variables('formattedAccessPolicies')]"
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the resource group the access policies assignment was created in."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the access policies assignment."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', parameters('keyVaultName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the access policies assignment."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "keyVault_secrets",
                        "count": "[length(variables('secretList'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-KeyVault-Secret-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('secretList')[copyIndex()].name]"
                          },
                          "value": {
                            "value": "[variables('secretList')[copyIndex()].value]"
                          },
                          "keyVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "attributesEnabled": "[if(contains(variables('secretList')[copyIndex()], 'attributesEnabled'), createObject('value', variables('secretList')[copyIndex()].attributesEnabled), createObject('value', true()))]",
                          "attributesExp": "[if(contains(variables('secretList')[copyIndex()], 'attributesExp'), createObject('value', variables('secretList')[copyIndex()].attributesExp), createObject('value', -1))]",
                          "attributesNbf": "[if(contains(variables('secretList')[copyIndex()], 'attributesNbf'), createObject('value', variables('secretList')[copyIndex()].attributesNbf), createObject('value', -1))]",
                          "contentType": "[if(contains(variables('secretList')[copyIndex()], 'contentType'), createObject('value', variables('secretList')[copyIndex()].contentType), createObject('value', ''))]",
                          "tags": "[if(contains(variables('secretList')[copyIndex()], 'tags'), createObject('value', variables('secretList')[copyIndex()].tags), createObject('value', createObject()))]",
                          "roleAssignments": "[if(contains(variables('secretList')[copyIndex()], 'roleAssignments'), createObject('value', variables('secretList')[copyIndex()].roleAssignments), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "14722760527120520231"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the secret."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Resource tags."
                              }
                            },
                            "attributesEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Determines whether the object is enabled."
                              }
                            },
                            "attributesExp": {
                              "type": "int",
                              "defaultValue": -1,
                              "metadata": {
                                "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z. For security reasons, it is recommended to set an expiration date whenever possible."
                              }
                            },
                            "attributesNbf": {
                              "type": "int",
                              "defaultValue": -1,
                              "metadata": {
                                "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                              }
                            },
                            "contentType": {
                              "type": "secureString",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The content type of the secret."
                              }
                            },
                            "value": {
                              "type": "secureString",
                              "metadata": {
                                "description": "Required. The value of the secret. NOTE: \"value\" will never be returned from the service, as APIs using this model are is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.KeyVault/vaults/secrets",
                              "apiVersion": "2019-09-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "contentType": "[parameters('contentType')]",
                                "attributes": {
                                  "enabled": "[parameters('attributesEnabled')]",
                                  "exp": "[if(not(equals(parameters('attributesExp'), -1)), parameters('attributesExp'), null())]",
                                  "nbf": "[if(not(equals(parameters('attributesNbf'), -1)), parameters('attributesNbf'), null())]"
                                },
                                "value": "[parameters('value')]"
                              }
                            },
                            {
                              "copy": {
                                "name": "secret_roleAssignments",
                                "count": "[length(parameters('roleAssignments'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                  "principalIds": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                  },
                                  "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                  "roleDefinitionIdOrName": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                  },
                                  "resourceId": {
                                    "value": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "6204523044380598325"
                                    }
                                  },
                                  "parameters": {
                                    "principalIds": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. The IDs of the principals to assign the role to."
                                      }
                                    },
                                    "roleDefinitionIdOrName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource ID of the resource to apply the role assignment to."
                                      }
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "allowedValues": [
                                        "ServicePrincipal",
                                        "Group",
                                        "User",
                                        "ForeignGroup",
                                        "Device",
                                        ""
                                      ],
                                      "metadata": {
                                        "description": "Optional. The principal type of the assigned principal ID."
                                      }
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The description of the role assignment."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "roleAssignment",
                                        "count": "[length(parameters('principalIds'))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.KeyVault/vaults/{0}/secrets/{1}', split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[0], split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[1])]",
                                      "name": "[guid(resourceId('Microsoft.KeyVault/vaults/secrets', split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[0], split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[1]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                      "properties": {
                                        "description": "[parameters('description')]",
                                        "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the secret."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the secret."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the resource group the secret was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "keyVault_keys",
                        "count": "[length(parameters('keys'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-KeyVault-Key-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('keys')[copyIndex()].name]"
                          },
                          "keyVaultName": {
                            "value": "[parameters('name')]"
                          },
                          "attributesEnabled": "[if(contains(parameters('keys')[copyIndex()], 'attributesEnabled'), createObject('value', parameters('keys')[copyIndex()].attributesEnabled), createObject('value', true()))]",
                          "attributesExp": "[if(contains(parameters('keys')[copyIndex()], 'attributesExp'), createObject('value', parameters('keys')[copyIndex()].attributesExp), createObject('value', -1))]",
                          "attributesNbf": "[if(contains(parameters('keys')[copyIndex()], 'attributesNbf'), createObject('value', parameters('keys')[copyIndex()].attributesNbf), createObject('value', -1))]",
                          "curveName": "[if(contains(parameters('keys')[copyIndex()], 'curveName'), createObject('value', parameters('keys')[copyIndex()].curveName), createObject('value', 'P-256'))]",
                          "keyOps": "[if(contains(parameters('keys')[copyIndex()], 'keyOps'), createObject('value', parameters('keys')[copyIndex()].keyOps), createObject('value', createArray()))]",
                          "keySize": "[if(contains(parameters('keys')[copyIndex()], 'keySize'), createObject('value', parameters('keys')[copyIndex()].keySize), createObject('value', -1))]",
                          "kty": "[if(contains(parameters('keys')[copyIndex()], 'kty'), createObject('value', parameters('keys')[copyIndex()].kty), createObject('value', 'EC'))]",
                          "tags": "[if(contains(parameters('keys')[copyIndex()], 'tags'), createObject('value', parameters('keys')[copyIndex()].tags), createObject('value', createObject()))]",
                          "roleAssignments": "[if(contains(parameters('keys')[copyIndex()], 'roleAssignments'), createObject('value', parameters('keys')[copyIndex()].roleAssignments), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "1353742574206119753"
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the key."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Resource tags."
                              }
                            },
                            "attributesEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Determines whether the object is enabled."
                              }
                            },
                            "attributesExp": {
                              "type": "int",
                              "defaultValue": -1,
                              "metadata": {
                                "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z. For security reasons, it is recommended to set an expiration date whenever possible."
                              }
                            },
                            "attributesNbf": {
                              "type": "int",
                              "defaultValue": -1,
                              "metadata": {
                                "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                              }
                            },
                            "curveName": {
                              "type": "string",
                              "defaultValue": "P-256",
                              "allowedValues": [
                                "P-256",
                                "P-256K",
                                "P-384",
                                "P-521"
                              ],
                              "metadata": {
                                "description": "Optional. The elliptic curve name."
                              }
                            },
                            "keyOps": {
                              "type": "array",
                              "defaultValue": [],
                              "allowedValues": [
                                "decrypt",
                                "encrypt",
                                "import",
                                "sign",
                                "unwrapKey",
                                "verify",
                                "wrapKey"
                              ],
                              "metadata": {
                                "description": "Optional. Array of JsonWebKeyOperation."
                              }
                            },
                            "keySize": {
                              "type": "int",
                              "defaultValue": -1,
                              "metadata": {
                                "description": "Optional. The key size in bits. For example: 2048, 3072, or 4096 for RSA."
                              }
                            },
                            "kty": {
                              "type": "string",
                              "defaultValue": "EC",
                              "allowedValues": [
                                "EC",
                                "EC-HSM",
                                "RSA",
                                "RSA-HSM"
                              ],
                              "metadata": {
                                "description": "Optional. The type of the key."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2019-09-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "attributes": {
                                  "enabled": "[parameters('attributesEnabled')]",
                                  "exp": "[if(not(equals(parameters('attributesExp'), -1)), parameters('attributesExp'), null())]",
                                  "nbf": "[if(not(equals(parameters('attributesNbf'), -1)), parameters('attributesNbf'), null())]"
                                },
                                "curveName": "[parameters('curveName')]",
                                "keyOps": "[parameters('keyOps')]",
                                "keySize": "[if(not(equals(parameters('keySize'), -1)), parameters('keySize'), null())]",
                                "kty": "[parameters('kty')]"
                              }
                            },
                            {
                              "copy": {
                                "name": "key_roleAssignments",
                                "count": "[length(parameters('roleAssignments'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                  "principalIds": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                  },
                                  "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                  "roleDefinitionIdOrName": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                  },
                                  "resourceId": {
                                    "value": "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "7661429291659507540"
                                    }
                                  },
                                  "parameters": {
                                    "principalIds": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. The IDs of the principals to assign the role to."
                                      }
                                    },
                                    "roleDefinitionIdOrName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource ID of the resource to apply the role assignment to."
                                      }
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "allowedValues": [
                                        "ServicePrincipal",
                                        "Group",
                                        "User",
                                        "ForeignGroup",
                                        "Device",
                                        ""
                                      ],
                                      "metadata": {
                                        "description": "Optional. The principal type of the assigned principal ID."
                                      }
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The description of the role assignment."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "roleAssignment",
                                        "count": "[length(parameters('principalIds'))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.KeyVault/vaults/{0}/keys/{1}', split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[0], split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[1])]",
                                      "name": "[guid(resourceId('Microsoft.KeyVault/vaults/keys', split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[0], split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[1]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                      "properties": {
                                        "description": "[parameters('description')]",
                                        "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the key."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the key."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the resource group the key was created in."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "keyVault_privateEndpoints",
                        "count": "[length(parameters('privateEndpoints'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-KeyVault-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "groupIds": {
                            "value": [
                              "[parameters('privateEndpoints')[copyIndex()].service]"
                            ]
                          },
                          "name": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'name'), createObject('value', parameters('privateEndpoints')[copyIndex()].name), createObject('value', format('pe-{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), parameters('privateEndpoints')[copyIndex()].service, copyIndex())))]",
                          "serviceResourceId": {
                            "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                          },
                          "subnetResourceId": {
                            "value": "[parameters('privateEndpoints')[copyIndex()].subnetResourceId]"
                          },
                          "location": {
                            "value": "[reference(split(parameters('privateEndpoints')[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location]"
                          },
                          "lock": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'lock'), createObject('value', parameters('privateEndpoints')[copyIndex()].lock), createObject('value', parameters('lock')))]",
                          "privateDnsZoneGroup": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'privateDnsZoneGroup'), createObject('value', parameters('privateEndpoints')[copyIndex()].privateDnsZoneGroup), createObject('value', createObject()))]",
                          "roleAssignments": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'roleAssignments'), createObject('value', parameters('privateEndpoints')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
                          "tags": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'tags'), createObject('value', parameters('privateEndpoints')[copyIndex()].tags), createObject('value', createObject()))]",
                          "manualPrivateLinkServiceConnections": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'manualPrivateLinkServiceConnections'), createObject('value', parameters('privateEndpoints')[copyIndex()].manualPrivateLinkServiceConnections), createObject('value', createArray()))]",
                          "customDnsConfigs": "[if(contains(parameters('privateEndpoints')[copyIndex()], 'customDnsConfigs'), createObject('value', parameters('privateEndpoints')[copyIndex()].customDnsConfigs), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "4644865239500382922"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "serviceResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the resource that needs to be connected to the network."
                              }
                            },
                            "groupIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. Subtype(s) of the connection to be created. The allowed values depend on the type serviceResourceId refers to."
                              }
                            },
                            "privateDnsZoneGroup": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The private DNS zone group configuration used to associate the private endpoint with one or multiple private DNS zones. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "lock": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specify the type of lock."
                              },
                              "allowedValues": [
                                "",
                                "CanNotDelete",
                                "ReadOnly"
                              ]
                            },
                            "roleAssignments": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Manual PrivateLink Service Connections."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2022-05-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "privateLinkServiceConnections": [
                                  {
                                    "name": "[parameters('name')]",
                                    "properties": {
                                      "privateLinkServiceId": "[parameters('serviceResourceId')]",
                                      "groupIds": "[parameters('groupIds')]"
                                    }
                                  }
                                ],
                                "manualPrivateLinkServiceConnections": "[parameters('manualPrivateLinkServiceConnections')]",
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                },
                                "customDnsConfigs": "[parameters('customDnsConfigs')]"
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('lock')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                              "properties": {
                                "level": "[parameters('lock')]",
                                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            },
                            {
                              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDNSResourceIds": {
                                    "value": "[parameters('privateDnsZoneGroup').privateDNSResourceIds]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "15676669430944305970"
                                    }
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDNSResourceIds": {
                                      "type": "array",
                                      "maxLength": 5,
                                      "minLength": 1,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigs",
                                        "count": "[length(parameters('privateDNSResourceIds'))]",
                                        "input": {
                                          "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2022-05-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "privateEndpoint_roleAssignments",
                                "count": "[length(parameters('roleAssignments'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-PrivateEndpoint-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                  "principalIds": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                  },
                                  "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                  "roleDefinitionIdOrName": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                  },
                                  "resourceId": {
                                    "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "7834245939786083135"
                                    }
                                  },
                                  "parameters": {
                                    "principalIds": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. The IDs of the principals to assign the role to."
                                      }
                                    },
                                    "roleDefinitionIdOrName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource ID of the resource to apply the role assignment to."
                                      }
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "allowedValues": [
                                        "ServicePrincipal",
                                        "Group",
                                        "User",
                                        "ForeignGroup",
                                        "Device",
                                        ""
                                      ],
                                      "metadata": {
                                        "description": "Optional. The principal type of the assigned principal ID."
                                      }
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The description of the role assignment."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "roleAssignment",
                                        "count": "[length(parameters('principalIds'))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', last(split(parameters('resourceId'), '/')))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateEndpoints', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                      "properties": {
                                        "description": "[parameters('description')]",
                                        "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              }
                            },
                            "location": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), '2022-05-01', 'full').location]",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "keyVault_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-KeyVault-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                          "resourceId": {
                            "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "7096880878526885135"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Id of the delegated managed identity resource."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.KeyVault/vaults', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the key vault."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the key vault was created in."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the key vault."
                      }
                    },
                    "uri": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '2021-11-01-preview').vaultUri]",
                      "metadata": {
                        "description": "The URI of the key vault."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '2021-11-01-preview', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId(parameters('parHubSubscriptionId'), 'Microsoft.Resources/deployments', format('deploy-rg-{0}-{1}-{2}', variables('varPreReqShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[subscriptionResourceId(parameters('parHubSubscriptionId'), 'Microsoft.Resources/deployments', format('{0}-tags-{1}-{2}', variables('varPreReqShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            }
          ],
          "outputs": {
            "prereqStorageResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varPreReqResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-{0}-Storage-{1}-{2}', variables('varPreReqShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
            },
            "prereqKeyVaultResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varPreReqResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-{0}-KV-{1}-{2}', variables('varPreReqShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hubspoke-tags--{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
      "subscriptionId": "[parameters('parHub').subscriptionId]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "parOrgPrefix": {
            "value": "[parameters('parRequired').orgPrefix]"
          },
          "parLocation": {
            "value": "[parameters('parLocation')]"
          },
          "parDeployEnvironment": {
            "value": "[parameters('parRequired').deployEnvironment]"
          },
          "parTags": {
            "value": "[reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hubspoke-tags--{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
          },
          "parDeployddosProtectionPlan": {
            "value": "[parameters('parDdosStandard').enable]"
          },
          "parHubVirtualNetworkAddressPrefix": {
            "value": "[parameters('parHub').virtualNetworkAddressPrefix]"
          },
          "parHubSubnetAddressPrefix": {
            "value": "[parameters('parHub').subnetAddressPrefix]"
          },
          "parHubNetworkSecurityGroupDiagnosticsLogs": {
            "value": "[parameters('parHub').networkSecurityGroupDiagnosticsLogs]"
          },
          "parHubNetworkSecurityGroupRules": {
            "value": "[parameters('parHub').networkSecurityGroupRules]"
          },
          "parHubSubnetServiceEndpoints": {
            "value": "[parameters('parHub').subnetServiceEndpoints]"
          },
          "parHubVirtualNetworkDiagnosticsLogs": {
            "value": "[parameters('parHub').virtualNetworkDiagnosticsLogs]"
          },
          "parHubVirtualNetworkDiagnosticsMetrics": {
            "value": "[parameters('parHub').virtualNetworkDiagnosticsMetrics]"
          },
          "parHubSubnets": {
            "value": "[parameters('parHub').subnets]"
          },
          "parEnablePrivateDnsZones": {
            "value": "[parameters('parHub').enablePrivateDnsZones]"
          },
          "parAzureFirewallEnabled": {
            "value": "[parameters('parAzureFirewall').enable]"
          },
          "parDisableBgpRoutePropagation": {
            "value": "[parameters('parAzureFirewall').disableBgpRoutePropagation]"
          },
          "parFirewallSupernetIPAddress": {
            "value": "[parameters('parAzureFirewall').supernetIPAddress]"
          },
          "parFirewallSkuTier": {
            "value": "[parameters('parAzureFirewall').skuTier]"
          },
          "parFirewallThreatIntelMode": {
            "value": "[parameters('parAzureFirewall').threatIntelMode]"
          },
          "parFirewallIntrusionDetectionMode": {
            "value": "[parameters('parAzureFirewall').intrusionDetectionMode]"
          },
          "parFirewallClientPublicIPAddressAvailabilityZones": {
            "value": "[parameters('parAzureFirewall').clientPublicIPAddressAvailabilityZones]"
          },
          "parFirewallDiagnosticsLogs": {
            "value": "[parameters('parAzureFirewall').diagnosticsLogs]"
          },
          "parFirewallDiagnosticsMetrics": {
            "value": "[parameters('parAzureFirewall').diagnosticsMetrics]"
          },
          "parFirewallManagementPublicIPAddressAvailabilityZones": {
            "value": "[parameters('parAzureFirewall').managementPublicIPAddressAvailabilityZones]"
          },
          "parPublicIPAddressDiagnosticsLogs": {
            "value": "[parameters('parAzureFirewall').publicIPAddressDiagnosticsLogs]"
          },
          "parPublicIPAddressDiagnosticsMetrics": {
            "value": "[parameters('parAzureFirewall').publicIPAddressDiagnosticsMetrics]"
          },
          "parHubStorageAccountAccess": {
            "value": "[parameters('parHub').storageAccountAccess]"
          },
          "parLogAnalyticsWorkspaceResourceId": {
            "value": "[reference(subscriptionResourceId(parameters('parOperationsSpoke').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-laws-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.outLogAnalyticsWorkspaceResourceId.value]"
          },
          "parLogAnalyticsWorkspaceName": {
            "value": "[reference(subscriptionResourceId(parameters('parOperationsSpoke').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-laws-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.outLogAnalyticsWorkspaceName.value]"
          },
          "parEnableResourceLocks": {
            "value": "[parameters('parHub').enableResourceLocks]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.13.1.58284",
              "templateHash": "10963815290886382007"
            }
          },
          "parameters": {
            "parOrgPrefix": {
              "type": "string",
              "defaultValue": "anoa",
              "metadata": {
                "description": "Prefix value which will be prepended to all resource names. Default: anoa"
              }
            },
            "parHubSubscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "The subscription ID for the Hub Network and resources. It defaults to the deployment subscription."
              }
            },
            "parLocation": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "The region to deploy resources into. It defaults to the deployment location."
              }
            },
            "parTags": {
              "type": "object",
              "metadata": {
                "description": "Tags for the Hub Network"
              }
            },
            "parDeployEnvironment": {
              "type": "string",
              "metadata": {
                "description": "A suffix, 3 to 15 characters in length, to append to resource names (e.g. \"dev\", \"test\", \"prod\", \"platforms\"). It defaults to \"platforms\"."
              },
              "maxLength": 15,
              "minLength": 3
            },
            "parDeploymentNameSuffix": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "A suffix to use for naming deployments uniquely. It defaults to the Bicep resolution of the \"utcNow()\" function."
              }
            },
            "parHubVirtualNetworkAddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.100.0/24",
              "metadata": {
                "description": "The CIDR Virtual Network Address Prefix for the Hub Virtual Network."
              }
            },
            "parHubSubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.100.128/27",
              "metadata": {
                "description": "The CIDR Subnet Address Prefix for the default Hub subnet. It must be in the Hub Virtual Network space."
              }
            },
            "parAzureFirewallEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Switch which allows Azure Firewall deployment to be disabled. Default: true"
              }
            },
            "parFirewallSkuTier": {
              "type": "string",
              "allowedValues": [
                "Standard",
                "Premium"
              ],
              "metadata": {
                "description": "Azure Firewall Tier associated with the Firewall to deploy. Default: Standard "
              }
            },
            "parFirewallSupernetIPAddress": {
              "type": "string",
              "defaultValue": "10.0.96.0/19",
              "metadata": {
                "description": "Supernet CIDR address for the entire network of vnets, this address allows for communication between spokes. Recommended to use a Supernet calculator if modifying vnet addresses"
              }
            },
            "parFirewallThreatIntelMode": {
              "type": "string",
              "allowedValues": [
                "Alert",
                "Deny",
                "Off"
              ]
            },
            "parFirewallIntrusionDetectionMode": {
              "type": "string",
              "defaultValue": "Alert",
              "metadata": {
                "description": "[Alert/Deny/Off] The Azure Firewall Intrusion Detection mode. Valid values are \"Alert\", \"Deny\", or \"Off\". The default value is \"Alert\"."
              },
              "allowedValues": [
                "Alert",
                "Deny",
                "Off"
              ]
            },
            "parFirewallDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [
                "AzureFirewallApplicationRule",
                "AzureFirewallNetworkRule",
                "AzureFirewallDnsProxy"
              ],
              "metadata": {
                "description": "An array of Firewall Diagnostic Logs categories to collect. See \"https://docs.microsoft.com/en-us/azure/firewall/firewall-diagnostics#enable-diagnostic-logging-through-the-azure-portal\" for valid values."
              }
            },
            "parFirewallDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "An array of Firewall Diagnostic Metrics categories to collect. See \"https://docs.microsoft.com/en-us/azure/firewall/firewall-diagnostics#enable-diagnostic-logging-through-the-azure-portal\" for valid values."
              }
            },
            "parFirewallClientPublicIPAddressAvailabilityZones": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Azure Firewall Public IP Address Availability Zones. It defaults to empty, or \"No-Zone\", because Availability Zones are not available in every cloud. See https://docs.microsoft.com/en-us/azure/virtual-network/ip-services/public-ip-addresses#sku for valid settings."
              }
            },
            "parFirewallManagementPublicIPAddressAvailabilityZones": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Azure Firewall Public IP Address Availability Zones. It defaults to empty, or \"No-Zone\", because Availability Zones are not available in every cloud. See https://docs.microsoft.com/en-us/azure/virtual-network/ip-services/public-ip-addresses#sku for valid settings."
              }
            },
            "parFirewallPolicyRuleCollectionGroups": {
              "type": "array",
              "defaultValue": [
                {
                  "name": "DefaultApplicationRuleCollectionGroup",
                  "priority": 300,
                  "ruleCollections": [
                    {
                      "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
                      "action": {
                        "type": "Allow"
                      },
                      "rules": [
                        {
                          "ruleType": "ApplicationRule",
                          "name": "msftauth",
                          "protocols": [
                            {
                              "protocolType": "Https",
                              "port": 443
                            }
                          ],
                          "fqdnTags": [],
                          "webCategories": [],
                          "targetFqdns": [
                            "aadcdn.msftauth.net",
                            "aadcdn.msauth.net"
                          ],
                          "targetUrls": [],
                          "terminateTLS": false,
                          "sourceAddresses": [
                            "*"
                          ],
                          "destinationAddresses": [],
                          "sourceIpGroups": []
                        }
                      ],
                      "name": "AzureAuth",
                      "priority": 110
                    }
                  ]
                },
                {
                  "name": "DefaultNetworkRuleCollectionGroup",
                  "priority": 200,
                  "ruleCollections": [
                    {
                      "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
                      "action": {
                        "type": "Allow"
                      },
                      "rules": [
                        {
                          "ruleType": "NetworkRule",
                          "name": "AzureCloud",
                          "ipProtocols": [
                            "Any"
                          ],
                          "sourceAddresses": [
                            "*"
                          ],
                          "sourceIpGroups": [],
                          "destinationAddresses": [
                            "AzureCloud"
                          ],
                          "destinationIpGroups": [],
                          "destinationFqdns": [],
                          "destinationPorts": [
                            "*"
                          ]
                        }
                      ],
                      "name": "AllowAzureCloud",
                      "priority": 100
                    },
                    {
                      "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
                      "action": {
                        "type": "Allow"
                      },
                      "rules": [
                        {
                          "ruleType": "NetworkRule",
                          "name": "AllSpokeTraffic",
                          "ipProtocols": [
                            "Any"
                          ],
                          "sourceAddresses": [
                            "[parameters('parFirewallSupernetIPAddress')]"
                          ],
                          "sourceIpGroups": [],
                          "destinationAddresses": [
                            "*"
                          ],
                          "destinationIpGroups": [],
                          "destinationFqdns": [],
                          "destinationPorts": [
                            "*"
                          ]
                        }
                      ],
                      "name": "AllowTrafficBetweenSpokes",
                      "priority": 200
                    }
                  ]
                }
              ],
              "metadata": {
                "description": "An array of Azure Firewall Policy Rules."
              }
            },
            "parHubSubnets": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of required subnets for the Hub Virtual Network"
              }
            },
            "parHubVirtualNetworkDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Network Diagnostic Logs to enable for the Hub Virtual Network. See https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/diagnostic-settings?tabs=CMD#logs for valid settings."
              }
            },
            "parHubVirtualNetworkDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Network Diagnostic Metrics to enable for the Hub Virtual Network. See https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/diagnostic-settings?tabs=CMD#metrics for valid settings."
              }
            },
            "parHubNetworkSecurityGroupRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Network Security Group Rules to apply to the Hub Virtual Network. See https://docs.microsoft.com/en-us/azure/templates/microsoft.network/networksecuritygroups/securityrules?tabs=bicep#securityrulepropertiesformat for valid settings."
              }
            },
            "parHubNetworkSecurityGroupDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [
                "NetworkSecurityGroupEvent",
                "NetworkSecurityGroupRuleCounter"
              ],
              "metadata": {
                "description": "An array of Network Security Group diagnostic logs to apply to the Hub Virtual Network. See https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-nsg-manage-log#log-categories for valid settings."
              }
            },
            "parHubSubnetServiceEndpoints": {
              "type": "array",
              "defaultValue": [
                {
                  "service": "Microsoft.Storage"
                }
              ],
              "metadata": {
                "description": "An array of Service Endpoints to enable for the Hub subnet. See https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-service-endpoints-overview for valid settings."
              }
            },
            "parDisableBgpRoutePropagation": {
              "type": "bool",
              "defaultValue": false
            },
            "parEnablePrivateDnsZones": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Switch to Enable Private DNS Zones to create for the Hub Virtual Network. See https://docs.microsoft.com/en-us/azure/templates/microsoft.network/privatednszones?tabs=bicep for valid settings."
              }
            },
            "parLogStorageSkuName": {
              "type": "string",
              "defaultValue": "Standard_GRS",
              "metadata": {
                "description": "The Storage Account SKU to use for log storage. It defaults to \"Standard_GRS\". See https://docs.microsoft.com/en-us/rest/api/storagerp/srp_sku_types for valid settings."
              }
            },
            "parLogAnalyticsWorkspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics Workspace Resource Id Needed for NSG, VNet and Activity Logging"
              }
            },
            "parLogAnalyticsWorkspaceName": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics Workspace Name Needed Activity Logging"
              }
            },
            "parPublicIPAddressDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [
                "DDoSProtectionNotifications",
                "DDoSMitigationFlowLogs",
                "DDoSMitigationReports"
              ],
              "metadata": {
                "description": "An array of Public IP Address Diagnostic Logs for the Azure Firewall. See https://docs.microsoft.com/en-us/azure/ddos-protection/diagnostic-logging?tabs=DDoSProtectionNotifications#configure-ddos-diagnostic-logs for valid settings."
              }
            },
            "parPublicIPAddressDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [
                "AllMetrics"
              ],
              "metadata": {
                "description": "An array of Public IP Address Diagnostic Metrics for the Azure Firewall. See https://docs.microsoft.com/en-us/azure/ddos-protection/diagnostic-logging?tabs=DDoSProtectionNotifications for valid settings."
              }
            },
            "parDeployddosProtectionPlan": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Switch which allows DDOS deployment to be disabled. Default: false"
              }
            },
            "parSupportedClouds": {
              "type": "array",
              "defaultValue": [
                "AzureCloud",
                "AzureUSGovernment"
              ]
            },
            "parHubStorageAccountAccess": {
              "type": "object",
              "metadata": {
                "description": "Account for access to Storage"
              }
            },
            "parEnableResourceLocks": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Switch which allows enable resource locks on all resources. Default: true"
              }
            }
          },
          "variables": {
            "varResourceToken": "resource_token",
            "varNameToken": "name_token",
            "varNamingConvention": "[format('{0}-{1}-{2}-{3}-{4}', toLower(parameters('parOrgPrefix')), toLower(parameters('parLocation')), toLower(parameters('parDeployEnvironment')), variables('varNameToken'), toLower(variables('varResourceToken')))]",
            "varNetworkSecurityGroupNamingConvention": "[replace(variables('varNamingConvention'), variables('varResourceToken'), 'nsg')]",
            "varFirewallNamingConvention": "[replace(variables('varNamingConvention'), variables('varResourceToken'), 'afw')]",
            "varFirewallPolicyNamingConvention": "[replace(variables('varNamingConvention'), variables('varResourceToken'), 'afwp')]",
            "varResourceGroupNamingConvention": "[replace(variables('varNamingConvention'), variables('varResourceToken'), 'rg')]",
            "varStorageAccountNamingConvention": "[toLower(format('{0}st{1}unique_storage_token', parameters('parOrgPrefix'), variables('varNameToken')))]",
            "varSubnetNamingConvention": "[replace(variables('varNamingConvention'), variables('varResourceToken'), 'snet')]",
            "varPublicIpAddressNamingConvention": "[replace(variables('varNamingConvention'), variables('varResourceToken'), 'pip')]",
            "varVirtualNetworkNamingConvention": "[replace(variables('varNamingConvention'), variables('varResourceToken'), 'vnet')]",
            "varDdosNamingConvention": "[replace(variables('varNamingConvention'), variables('varResourceToken'), 'ddos')]",
            "varPrivateDNSZoneNamingConvention": "[replace(variables('varNamingConvention'), variables('varResourceToken'), 'pdz-rg')]",
            "varHubName": "hub",
            "varHubShortName": "hub",
            "varHubResourceGroupName": "[replace(variables('varResourceGroupNamingConvention'), variables('varNameToken'), variables('varHubName'))]",
            "varhubLogStorageAccountShortName": "[replace(variables('varStorageAccountNamingConvention'), variables('varNameToken'), variables('varHubShortName'))]",
            "varHubLogStorageAccountUniqueName": "[replace(variables('varhubLogStorageAccountShortName'), 'unique_storage_token', uniqueString(parameters('parHubSubscriptionId'), parameters('parDeployEnvironment'), parameters('parOrgPrefix')))]",
            "varHubLogStorageAccountName": "[take(variables('varHubLogStorageAccountUniqueName'), 23)]",
            "varHubVirtualNetworkName": "[replace(variables('varVirtualNetworkNamingConvention'), variables('varNameToken'), variables('varHubName'))]",
            "varHubNetworkSecurityGroupName": "[replace(variables('varNetworkSecurityGroupNamingConvention'), variables('varNameToken'), variables('varHubName'))]",
            "varHubSubnetName": "[replace(variables('varSubnetNamingConvention'), variables('varNameToken'), variables('varHubName'))]",
            "varHubPDZResourceGroupName": "[replace(variables('varPrivateDNSZoneNamingConvention'), variables('varNameToken'), variables('varHubName'))]",
            "hubddosName": "[replace(variables('varDdosNamingConvention'), variables('varNameToken'), variables('varHubName'))]",
            "varFirewallName": "[replace(variables('varFirewallNamingConvention'), variables('varNameToken'), variables('varHubName'))]",
            "varFirewallPolicyName": "[replace(variables('varFirewallPolicyNamingConvention'), variables('varNameToken'), variables('varHubName'))]",
            "varFirewallClientPublicIPAddressName": "[replace(variables('varPublicIpAddressNamingConvention'), variables('varNameToken'), 'afw-client')]",
            "varFirewallManagementPublicIPAddressName": "[replace(variables('varPublicIpAddressNamingConvention'), variables('varNameToken'), 'afw-mgmt')]",
            "varFirewallPublicIPAddressSkuName": "Standard",
            "varFirewallPublicIpAllocationMethod": "Static",
            "varRouteTableName": "[format('{0}-routetable', variables('varHubSubnetName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-{0}-tags-{1}-{2}', variables('varHubShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "tags": {
                    "value": "[parameters('parTags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "216182755991536021"
                    }
                  },
                  "parameters": {
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags for the resource group. If not provided, removes existing tags."
                      }
                    },
                    "onlyUpdate": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Instead of overwriting the existing tags, combine them with the new tags."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the Resource Group to assign the tags to. If no Resource Group name is provided, and Subscription ID is provided, the module deploys at subscription level, therefore assigns the provided tags to the subscription."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().id]",
                      "metadata": {
                        "description": "Optional. Subscription ID of the subscription to assign the tags to. If no Resource Group name is provided, the module deploys at subscription level, therefore assigns the provided tags to the subscription."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Tags-Sub', deployment().name)]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "onlyUpdate": {
                            "value": "[parameters('onlyUpdate')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "1405711280777017718"
                            }
                          },
                          "parameters": {
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags for the resource group. If not provided, removes existing tags."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the tags resource."
                              }
                            },
                            "onlyUpdate": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Instead of overwriting the existing tags, combine them with the new tags."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/tags",
                              "apiVersion": "2019-10-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "tags": "[if(parameters('onlyUpdate'), union(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2020-10-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]"
                              },
                              "dependsOn": [
                                "[subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name))]"
                              ]
                            },
                            {
                              "condition": "[parameters('onlyUpdate')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-ReadTags', deployment().name)]",
                              "location": "[deployment().location]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "12771816053208228273"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the tags resource."
                                      }
                                    }
                                  },
                                  "resources": [],
                                  "outputs": {
                                    "existingTags": {
                                      "type": "object",
                                      "value": "[if(contains(reference(subscriptionResourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01'), 'tags'), reference(subscriptionResourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01').tags, createObject())]",
                                      "metadata": {
                                        "description": "Tags currently applied to the subscription level"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the tags resource."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "value": "[if(parameters('onlyUpdate'), union(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2020-10-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]",
                              "metadata": {
                                "description": "The applied tags."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[subscriptionResourceId('Microsoft.Resources/tags', parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the applied tags."
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId'))))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Tags-RG', deployment().name)]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "onlyUpdate": {
                            "value": "[parameters('onlyUpdate')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "3625051557808284647"
                            }
                          },
                          "parameters": {
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags for the resource group. If not provided, removes existing tags."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the tags resource."
                              }
                            },
                            "onlyUpdate": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Instead of overwriting the existing tags, combine them with the new tags."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/tags",
                              "apiVersion": "2019-10-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "tags": "[if(parameters('onlyUpdate'), union(reference(resourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2020-10-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name))]"
                              ]
                            },
                            {
                              "condition": "[parameters('onlyUpdate')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-ReadTags', deployment().name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "10085828695555767678"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the tags resource."
                                      }
                                    }
                                  },
                                  "resources": [],
                                  "outputs": {
                                    "existingTags": {
                                      "type": "object",
                                      "value": "[if(contains(reference(resourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01'), 'tags'), reference(resourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01').tags, createObject())]",
                                      "metadata": {
                                        "description": "Tags currently applied to the subscription level"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the tags resource."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Resources/tags', parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the applied tags."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the resource group the tags were applied to."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "value": "[if(parameters('onlyUpdate'), union(reference(resourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2020-10-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]",
                              "metadata": {
                                "description": "The applied tags."
                              }
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[if(and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-Tags-RG', deployment().name)), '2020-10-01').outputs.name.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-Tags-Sub', deployment().name)), '2020-10-01').outputs.name.value)]",
                      "metadata": {
                        "description": "The name of the tags resource."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "value": "[if(and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-Tags-RG', deployment().name)), '2020-10-01').outputs.tags.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-Tags-Sub', deployment().name)), '2020-10-01').outputs.tags.value)]",
                      "metadata": {
                        "description": "The applied tags."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[if(and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-Tags-RG', deployment().name)), '2020-10-01').outputs.resourceId.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-Tags-Sub', deployment().name)), '2020-10-01').outputs.resourceId.value)]",
                      "metadata": {
                        "description": "The resource ID of the applied tags."
                      }
                    }
                  }
                }
              },
              "metadata": {
                "description": "Resource group tags"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-hub-rg-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[parameters('parHubSubscriptionId')]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varHubResourceGroupName')]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "tags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varHubShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "6154872068177151399"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Resource Group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[deployment().location]",
                      "metadata": {
                        "description": "Optional. Location of the Resource Group. It uses the deployment's location when not provided."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the storage account resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/resourceGroups",
                      "apiVersion": "2019-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {}
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-{1}-Lock', uniqueString(deployment().name, parameters('location')), parameters('lock'))]",
                      "resourceGroup": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "level": {
                            "value": "[parameters('lock')]"
                          },
                          "name": {
                            "value": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "16437344464782770871"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}-lock', parameters('level'))]",
                              "metadata": {
                                "description": "Optional. The name of the lock."
                              }
                            },
                            "level": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Set lock level."
                              },
                              "allowedValues": [
                                "CanNotDelete",
                                "ReadOnly"
                              ]
                            },
                            "notes": {
                              "type": "string",
                              "defaultValue": "[if(equals(parameters('level'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]",
                              "metadata": {
                                "description": "Optional. The decription attached to the lock."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "level": "[parameters('level')]",
                                "notes": "[parameters('notes')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the lock."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Authorization/locks', parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the lock."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the resource group name the lock was applied to."
                              }
                            },
                            "scope": {
                              "type": "string",
                              "value": "[resourceGroup().id]",
                              "metadata": {
                                "description": "The scope this lock applies to."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "resourceGroup_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-RG-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "resourceGroup": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "12032035567026887377"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the resource group."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the resource group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varHubShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[parameters('parEnablePrivateDnsZones')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-pdz-rg-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[parameters('parHubSubscriptionId')]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varHubPDZResourceGroupName')]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "tags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varHubShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "6154872068177151399"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Resource Group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[deployment().location]",
                      "metadata": {
                        "description": "Optional. Location of the Resource Group. It uses the deployment's location when not provided."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the storage account resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/resourceGroups",
                      "apiVersion": "2019-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {}
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-{1}-Lock', uniqueString(deployment().name, parameters('location')), parameters('lock'))]",
                      "resourceGroup": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "level": {
                            "value": "[parameters('lock')]"
                          },
                          "name": {
                            "value": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "16437344464782770871"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}-lock', parameters('level'))]",
                              "metadata": {
                                "description": "Optional. The name of the lock."
                              }
                            },
                            "level": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Set lock level."
                              },
                              "allowedValues": [
                                "CanNotDelete",
                                "ReadOnly"
                              ]
                            },
                            "notes": {
                              "type": "string",
                              "defaultValue": "[if(equals(parameters('level'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]",
                              "metadata": {
                                "description": "Optional. The decription attached to the lock."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "level": "[parameters('level')]",
                                "notes": "[parameters('notes')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the lock."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Authorization/locks', parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the lock."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the resource group name the lock was applied to."
                              }
                            },
                            "scope": {
                              "type": "string",
                              "value": "[resourceGroup().id]",
                              "metadata": {
                                "description": "The scope this lock applies to."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "resourceGroup_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-RG-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "resourceGroup": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "12032035567026887377"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the resource group."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the resource group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varHubShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-hub-logStorage-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[parameters('parHubSubscriptionId')]",
              "resourceGroup": "[variables('varHubResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varHubLogStorageAccountName')]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "storageAccountSku": {
                    "value": "[parameters('parLogStorageSkuName')]"
                  },
                  "tags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varHubShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
                  },
                  "roleAssignments": "[if(parameters('parHubStorageAccountAccess').enableRoleAssignmentForStorageAccount, createObject('value', createArray(createObject('principalIds', parameters('parHubStorageAccountAccess').principalIds, 'roleDefinitionIdOrName', parameters('parHubStorageAccountAccess').roleDefinitionIdOrName))), createObject('value', createArray()))]",
                  "lock": "[if(parameters('parEnableResourceLocks'), createObject('value', 'CanNotDelete'), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "845876767253618321"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Storage Account."
                      },
                      "maxLength": 24
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "systemAssignedIdentity": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enables system assigned managed identity on the resource."
                      }
                    },
                    "userAssignedIdentities": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The ID(s) to assign to the resource."
                      }
                    },
                    "storageAccountKind": {
                      "type": "string",
                      "defaultValue": "StorageV2",
                      "metadata": {
                        "description": "Optional. Type of Storage Account to create."
                      },
                      "allowedValues": [
                        "Storage",
                        "StorageV2",
                        "BlobStorage",
                        "FileStorage",
                        "BlockBlobStorage"
                      ]
                    },
                    "storageAccountSku": {
                      "type": "string",
                      "defaultValue": "Standard_GRS",
                      "metadata": {
                        "description": "Optional. Storage Account Sku Name."
                      },
                      "allowedValues": [
                        "Standard_LRS",
                        "Standard_GRS",
                        "Standard_RAGRS",
                        "Standard_ZRS",
                        "Premium_LRS",
                        "Premium_ZRS",
                        "Standard_GZRS",
                        "Standard_RAGZRS"
                      ]
                    },
                    "storageAccountAccessTier": {
                      "type": "string",
                      "defaultValue": "Hot",
                      "metadata": {
                        "description": "Optional. Storage Account Access Tier."
                      },
                      "allowedValues": [
                        "Hot",
                        "Cool"
                      ]
                    },
                    "azureFilesIdentityBasedAuthentication": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Provides the identity based authentication settings for Azure Files."
                      }
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                      }
                    },
                    "managementPolicyRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The Storage Account ManagementPolicies Rules."
                      }
                    },
                    "networkAcls": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Networks ACLs, this value contains IPs to whitelist and/or Subnet information. For security reasons, it is recommended to set the DefaultAction Deny."
                      }
                    },
                    "requireInfrastructureEncryption": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. A Boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest. For security reasons, it is recommended to set it to true."
                      }
                    },
                    "blobServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Blob service and containers to deploy."
                      }
                    },
                    "fileServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. File service and shares to deploy."
                      }
                    },
                    "queueServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Queue service and queues to create."
                      }
                    },
                    "tableServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Table service and tables to create."
                      }
                    },
                    "allowBlobPublicAccess": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether public access is enabled for all blobs or containers in the storage account. For security reasons, it is recommended to set it to false."
                      }
                    },
                    "minimumTlsVersion": {
                      "type": "string",
                      "defaultValue": "TLS1_2",
                      "metadata": {
                        "description": "Optional. Set the minimum TLS version on request to storage."
                      },
                      "allowedValues": [
                        "TLS1_0",
                        "TLS1_1",
                        "TLS1_2"
                      ]
                    },
                    "enableHierarchicalNamespace": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If true, enables Hierarchical Namespace for the storage account."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "",
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
                      }
                    },
                    "supportsHttpsTrafficOnly": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Allows HTTPS traffic only to storage service if sets to true."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "Transaction"
                      ],
                      "allowedValues": [
                        "Transaction"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "cMKKeyVaultResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The resource ID of a key vault to reference a customer managed key for encryption from."
                      }
                    },
                    "cMKKeyName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the customer managed key to use for encryption. Cannot be deployed together with the parameter 'systemAssignedIdentity' enabled."
                      }
                    },
                    "cMKUserAssignedIdentityResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Conditional. User assigned identity to use when fetching the customer managed key. Required if 'cMKKeyName' is not empty."
                      }
                    },
                    "cMKKeyVersion": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, latest is used."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ],
                    "supportsBlobService": "[or(or(or(equals(parameters('storageAccountKind'), 'BlockBlobStorage'), equals(parameters('storageAccountKind'), 'BlobStorage')), equals(parameters('storageAccountKind'), 'StorageV2')), equals(parameters('storageAccountKind'), 'Storage'))]",
                    "supportsFileService": "[or(or(equals(parameters('storageAccountKind'), 'FileStorage'), equals(parameters('storageAccountKind'), 'StorageV2')), equals(parameters('storageAccountKind'), 'Storage'))]",
                    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
                    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), createObject())), createObject())]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-09-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "kind": "[parameters('storageAccountKind')]",
                      "sku": {
                        "name": "[parameters('storageAccountSku')]"
                      },
                      "identity": "[variables('identity')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "encryption": {
                          "keySource": "[if(not(empty(parameters('cMKKeyName'))), 'Microsoft.Keyvault', 'Microsoft.Storage')]",
                          "services": {
                            "blob": "[if(variables('supportsBlobService'), createObject('enabled', true()), null())]",
                            "file": "[if(variables('supportsFileService'), createObject('enabled', true()), null())]",
                            "table": {
                              "enabled": true
                            },
                            "queue": {
                              "enabled": true
                            }
                          },
                          "requireInfrastructureEncryption": "[if(not(equals(parameters('storageAccountKind'), 'Storage')), parameters('requireInfrastructureEncryption'), null())]",
                          "keyvaultproperties": "[if(not(empty(parameters('cMKKeyName'))), createObject('keyname', parameters('cMKKeyName'), 'keyvaulturi', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('cMKKeyVaultResourceId'), '/')[2], split(parameters('cMKKeyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults', last(split(parameters('cMKKeyVaultResourceId'), '/'))), '2021-06-01-preview').vaultUri, 'keyversion', if(not(empty(parameters('cMKKeyVersion'))), parameters('cMKKeyVersion'), null())), null())]",
                          "identity": "[if(not(empty(parameters('cMKKeyName'))), createObject('userAssignedIdentity', parameters('cMKUserAssignedIdentityResourceId')), null())]"
                        },
                        "accessTier": "[if(not(equals(parameters('storageAccountKind'), 'Storage')), parameters('storageAccountAccessTier'), null())]",
                        "supportsHttpsTrafficOnly": "[parameters('supportsHttpsTrafficOnly')]",
                        "isHnsEnabled": "[if(parameters('enableHierarchicalNamespace'), parameters('enableHierarchicalNamespace'), null())]",
                        "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                        "networkAcls": "[if(not(empty(parameters('networkAcls'))), createObject('bypass', if(contains(parameters('networkAcls'), 'bypass'), parameters('networkAcls').bypass, null()), 'defaultAction', if(contains(parameters('networkAcls'), 'defaultAction'), parameters('networkAcls').defaultAction, null()), 'virtualNetworkRules', if(contains(parameters('networkAcls'), 'virtualNetworkRules'), parameters('networkAcls').virtualNetworkRules, createArray()), 'ipRules', if(contains(parameters('networkAcls'), 'ipRules'), parameters('networkAcls').ipRules, createArray())), null())]",
                        "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
                        "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkAcls'))), 'Disabled', null()))]",
                        "azureFilesIdentityBasedAuthentication": "[if(not(empty(parameters('azureFilesIdentityBasedAuthentication'))), parameters('azureFilesIdentityBasedAuthentication'), null())]"
                      }
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "storageAccount_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "2827160161514534534"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Id of the delegated managed identity resource."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('managementPolicyRules')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-ManagementPolicies', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "rules": {
                            "value": "[parameters('managementPolicyRules')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "648447714037160345"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the storage container to deploy."
                              }
                            },
                            "rules": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The Storage Account ManagementPolicies Rules."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[not(empty(parameters('rules')))]",
                              "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                              "apiVersion": "2019-06-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "policy": {
                                  "rules": "[parameters('rules')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The resource ID of the deployed management policy."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed management policy."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed management policy."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('blobServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-BlobServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "containers": "[if(contains(parameters('blobServices'), 'containers'), createObject('value', parameters('blobServices').containers), createObject('value', createArray()))]",
                          "automaticSnapshotPolicyEnabled": "[if(contains(parameters('blobServices'), 'automaticSnapshotPolicyEnabled'), createObject('value', parameters('blobServices').automaticSnapshotPolicyEnabled), createObject('value', false()))]",
                          "deleteRetentionPolicy": "[if(contains(parameters('blobServices'), 'deleteRetentionPolicy'), createObject('value', parameters('blobServices').deleteRetentionPolicy), createObject('value', true()))]",
                          "deleteRetentionPolicyDays": "[if(contains(parameters('blobServices'), 'deleteRetentionPolicyDays'), createObject('value', parameters('blobServices').deleteRetentionPolicyDays), createObject('value', 7))]",
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('blobServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('blobServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('blobServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('blobServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('blobServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('blobServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('blobServices'), 'diagnosticEventHubName'), createObject('value', parameters('blobServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('blobServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('blobServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('blobServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('blobServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('blobServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('blobServices').diagnosticWorkspaceId), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "2492256184813709438"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the blob service."
                              }
                            },
                            "deleteRetentionPolicy": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates whether DeleteRetentionPolicy is enabled for the Blob service."
                              }
                            },
                            "deleteRetentionPolicyDays": {
                              "type": "int",
                              "defaultValue": 7,
                              "metadata": {
                                "description": "Optional. Indicates the number of days that the deleted blob should be retained. The minimum specified value can be 1 and the maximum value can be 365."
                              }
                            },
                            "automaticSnapshotPolicyEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Automatic Snapshot is enabled if set to true."
                              }
                            },
                            "containers": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Blob containers to create."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/blobServices",
                              "apiVersion": "2021-06-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "deleteRetentionPolicy": {
                                  "enabled": "[parameters('deleteRetentionPolicy')]",
                                  "days": "[parameters('deleteRetentionPolicyDays')]"
                                },
                                "automaticSnapshotPolicyEnabled": "[parameters('automaticSnapshotPolicyEnabled')]"
                              }
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "blobServices_container",
                                "count": "[length(parameters('containers'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Container-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "blobServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('containers')[copyIndex()].name]"
                                  },
                                  "publicAccess": "[if(contains(parameters('containers')[copyIndex()], 'publicAccess'), createObject('value', parameters('containers')[copyIndex()].publicAccess), createObject('value', 'None'))]",
                                  "roleAssignments": "[if(contains(parameters('containers')[copyIndex()], 'roleAssignments'), createObject('value', parameters('containers')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
                                  "immutabilityPolicyProperties": "[if(contains(parameters('containers')[copyIndex()], 'immutabilityPolicyProperties'), createObject('value', parameters('containers')[copyIndex()].immutabilityPolicyProperties), createObject('value', createObject()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "2456554778800083860"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      },
                                      "maxLength": 24
                                    },
                                    "blobServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. Name of the blob service."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the storage container to deploy."
                                      }
                                    },
                                    "immutabilityPolicyName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. Name of the immutable policy."
                                      }
                                    },
                                    "publicAccess": {
                                      "type": "string",
                                      "defaultValue": "None",
                                      "metadata": {
                                        "description": "Optional. Specifies whether data in the container may be accessed publicly and the level of access."
                                      },
                                      "allowedValues": [
                                        "Container",
                                        "Blob",
                                        "None"
                                      ]
                                    },
                                    "immutabilityPolicyProperties": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Configure immutability policy."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                                      "apiVersion": "2021-09-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]",
                                      "properties": {
                                        "publicAccess": "[parameters('publicAccess')]"
                                      }
                                    },
                                    {
                                      "condition": "[not(empty(parameters('immutabilityPolicyProperties')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[parameters('immutabilityPolicyName')]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "storageAccountName": {
                                            "value": "[parameters('storageAccountName')]"
                                          },
                                          "blobServicesName": {
                                            "value": "[parameters('blobServicesName')]"
                                          },
                                          "containerName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "immutabilityPeriodSinceCreationInDays": "[if(contains(parameters('immutabilityPolicyProperties'), 'immutabilityPeriodSinceCreationInDays'), createObject('value', parameters('immutabilityPolicyProperties').immutabilityPeriodSinceCreationInDays), createObject('value', 365))]",
                                          "allowProtectedAppendWrites": "[if(contains(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWrites'), createObject('value', parameters('immutabilityPolicyProperties').allowProtectedAppendWrites), createObject('value', true()))]"
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.13.1.58284",
                                              "templateHash": "12947603763516415104"
                                            }
                                          },
                                          "parameters": {
                                            "storageAccountName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                              },
                                              "maxLength": 24
                                            },
                                            "blobServicesName": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent blob service. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "containerName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent container to apply the policy to. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. Name of the immutable policy."
                                              }
                                            },
                                            "immutabilityPeriodSinceCreationInDays": {
                                              "type": "int",
                                              "defaultValue": 365,
                                              "metadata": {
                                                "description": "Optional. The immutability period for the blobs in the container since the policy creation, in days."
                                              }
                                            },
                                            "allowProtectedAppendWrites": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies",
                                              "apiVersion": "2019-06-01",
                                              "name": "[format('{0}/{1}/{2}/{3}', parameters('storageAccountName'), parameters('blobServicesName'), parameters('containerName'), parameters('name'))]",
                                              "properties": {
                                                "immutabilityPeriodSinceCreationInDays": "[parameters('immutabilityPeriodSinceCreationInDays')]",
                                                "allowProtectedAppendWrites": "[parameters('allowProtectedAppendWrites')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "value": "[parameters('name')]",
                                              "metadata": {
                                                "description": "The name of the deployed immutability policy."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies', parameters('storageAccountName'), parameters('blobServicesName'), parameters('containerName'), parameters('name'))]",
                                              "metadata": {
                                                "description": "The resource ID of the deployed immutability policy."
                                              }
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "value": "[resourceGroup().name]",
                                              "metadata": {
                                                "description": "The resource group of the deployed immutability policy."
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "copy": {
                                        "name": "container_roleAssignments",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.13.1.58284",
                                              "templateHash": "17770721562698605711"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the principals to assign the role to."
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The description of the role assignment."
                                              }
                                            },
                                            "condition": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                                              }
                                            },
                                            "conditionVersion": {
                                              "type": "string",
                                              "defaultValue": "2.0",
                                              "allowedValues": [
                                                "2.0"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Version of the condition."
                                              }
                                            },
                                            "delegatedManagedIdentityResourceId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Id of the delegated managed identity resource."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Desktop Virtualization Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a959dbd1-f747-45e3-8ba6-dd80f235f97c')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                                              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                                              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                                              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                                              "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                                              "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                                              "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                                              "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                                              "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2])]",
                                              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed container."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed container."
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed container."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed blob service."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed blob service."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the deployed blob service."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('fileServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-FileServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('fileServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('fileServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('fileServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('fileServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('fileServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('fileServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('fileServices'), 'diagnosticEventHubName'), createObject('value', parameters('fileServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('fileServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('fileServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('fileServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('fileServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "protocolSettings": "[if(contains(parameters('fileServices'), 'protocolSettings'), createObject('value', parameters('fileServices').protocolSettings), createObject('value', createObject()))]",
                          "shareDeleteRetentionPolicy": "[if(contains(parameters('fileServices'), 'shareDeleteRetentionPolicy'), createObject('value', parameters('fileServices').shareDeleteRetentionPolicy), createObject('value', createObject('enabled', true(), 'days', 7)))]",
                          "shares": "[if(contains(parameters('fileServices'), 'shares'), createObject('value', parameters('fileServices').shares), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('fileServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('fileServices').diagnosticWorkspaceId), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "4217098231629340516"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the file service."
                              }
                            },
                            "protocolSettings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Protocol settings for file service."
                              }
                            },
                            "shareDeleteRetentionPolicy": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": true,
                                "days": 7
                              },
                              "metadata": {
                                "description": "Optional. The service properties for soft delete."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "shares": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. File shares to create."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/fileServices",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "protocolSettings": "[parameters('protocolSettings')]",
                                "shareDeleteRetentionPolicy": "[parameters('shareDeleteRetentionPolicy')]"
                              }
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "fileServices_shares",
                                "count": "[length(parameters('shares'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-shares-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "fileServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('shares')[copyIndex()].name]"
                                  },
                                  "enabledProtocols": "[if(contains(parameters('shares')[copyIndex()], 'enabledProtocols'), createObject('value', parameters('shares')[copyIndex()].enabledProtocols), createObject('value', 'SMB'))]",
                                  "rootSquash": "[if(contains(parameters('shares')[copyIndex()], 'rootSquash'), createObject('value', parameters('shares')[copyIndex()].rootSquash), createObject('value', 'NoRootSquash'))]",
                                  "sharedQuota": "[if(contains(parameters('shares')[copyIndex()], 'sharedQuota'), createObject('value', parameters('shares')[copyIndex()].sharedQuota), createObject('value', 5120))]",
                                  "roleAssignments": "[if(contains(parameters('shares')[copyIndex()], 'roleAssignments'), createObject('value', parameters('shares')[copyIndex()].roleAssignments), createObject('value', createArray()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "7898615982963373812"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      },
                                      "maxLength": 24
                                    },
                                    "fileServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent file service. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the file share to create."
                                      }
                                    },
                                    "sharedQuota": {
                                      "type": "int",
                                      "defaultValue": 5120,
                                      "metadata": {
                                        "description": "Optional. The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400."
                                      }
                                    },
                                    "enabledProtocols": {
                                      "type": "string",
                                      "defaultValue": "SMB",
                                      "metadata": {
                                        "description": "Optional. The authentication protocol that is used for the file share. Can only be specified when creating a share."
                                      },
                                      "allowedValues": [
                                        "NFS",
                                        "SMB"
                                      ]
                                    },
                                    "rootSquash": {
                                      "type": "string",
                                      "defaultValue": "NoRootSquash",
                                      "metadata": {
                                        "description": "Optional. Permissions for NFS file shares are enforced by the client OS rather than the Azure Files service. Toggling the root squash behavior reduces the rights of the root user for NFS shares."
                                      },
                                      "allowedValues": [
                                        "AllSquash",
                                        "NoRootSquash",
                                        "RootSquash"
                                      ]
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                                      "apiVersion": "2021-08-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]",
                                      "properties": {
                                        "shareQuota": "[parameters('sharedQuota')]",
                                        "rootSquash": "[if(equals(parameters('enabledProtocols'), 'NFS'), parameters('rootSquash'), null())]",
                                        "enabledProtocols": "[parameters('enabledProtocols')]"
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "fileShare_roleAssignments",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.13.1.58284",
                                              "templateHash": "5820655604316332903"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the principals to assign the role to."
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The description of the role assignment."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                              "Storage Account Backup Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                                              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                                              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                                              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                                              "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                                              "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                                              "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                                              "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                                              "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}/shares/{2}', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2])]",
                                              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed file share."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed file share."
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed file share."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed file share service."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed file share service."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed file share service."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('queueServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-QueueServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('queueServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('queueServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('queueServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('queueServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('queueServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('queueServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('queueServices'), 'diagnosticEventHubName'), createObject('value', parameters('queueServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('queueServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('queueServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('queueServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('queueServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "queues": "[if(contains(parameters('queueServices'), 'queues'), createObject('value', parameters('queueServices').queues), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('queueServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('queueServices').diagnosticWorkspaceId), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "17554831229879274483"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the queue service."
                              }
                            },
                            "queues": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Queues to create."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/queueServices",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {}
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "queueServices_queues",
                                "count": "[length(parameters('queues'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Queue-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "queueServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('queues')[copyIndex()].name]"
                                  },
                                  "metadata": "[if(contains(parameters('queues')[copyIndex()], 'metadata'), createObject('value', parameters('queues')[copyIndex()].metadata), createObject('value', createObject()))]",
                                  "roleAssignments": "[if(contains(parameters('queues')[copyIndex()], 'roleAssignments'), createObject('value', parameters('queues')[copyIndex()].roleAssignments), createObject('value', createArray()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "12540260969676082467"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      },
                                      "maxLength": 24
                                    },
                                    "queueServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent queue service. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the storage queue to deploy."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Required. A name-value pair that represents queue metadata."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
                                      "apiVersion": "2019-06-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]"
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "queue_roleAssignments",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.13.1.58284",
                                              "templateHash": "9678424203152711384"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the principals to assign the role to."
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The description of the role assignment."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Avere Cluster Create": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7b1b19a-0e83-4fe5-935c-faaefbfd18c3')]",
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Azure Service Deploy Release Management Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21d96096-b162-414a-8302-d8354f9d91b2')]",
                                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                              "CAL-Custom-Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7b266cd7-0bba-4ae2-8423-90ede5e1e898')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                                              "Dsms Role (deprecated)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b91f4c0b-46e3-47bb-a242-eecfe23b3b5b')]",
                                              "Dsms Role (do not use)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7aff565e-6c55-448d-83db-ccf482c6da2f')]",
                                              "GenevaWarmPathResourceContributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9f15f5f5-77bd-413a-aa88-4b9c68b1e7bc')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "masterreader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a48d7796-14b4-4889-afef-fbb65a93e5a2')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                              "Storage Account Backup Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}/queues/{2}', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2])]",
                                              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed queue."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed queue."
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed queue."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed file share service."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed file share service."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed file share service."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('tableServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-TableServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('tableServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('tableServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('tableServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('tableServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('tableServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('tableServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('tableServices'), 'diagnosticEventHubName'), createObject('value', parameters('tableServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('tableServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('tableServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('tableServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('tableServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "tables": "[if(contains(parameters('tableServices'), 'tables'), createObject('value', parameters('tableServices').tables), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('tableServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('tableServices').diagnosticWorkspaceId), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "4879914104814210714"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the table service."
                              }
                            },
                            "tables": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. tables to create."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/tableServices",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {}
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "tableServices_tables",
                                "count": "[length(parameters('tables'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Table-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "tableServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('tables')[copyIndex()]]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "15504629824916397824"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      },
                                      "maxLength": 24
                                    },
                                    "tableServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent table service. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the table."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
                                      "apiVersion": "2021-06-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('tableServicesName'), parameters('name'))]"
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed file share service."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices/tables', parameters('storageAccountName'), parameters('tableServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed file share service."
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed file share service."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed table service."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed table service."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed table service."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the deployed storage account."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the deployed storage account."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group of the deployed storage account."
                      }
                    },
                    "primaryBlobEndpoint": {
                      "type": "string",
                      "value": "[if(and(not(empty(parameters('blobServices'))), contains(parameters('blobServices'), 'containers')), reference(format('Microsoft.Storage/storageAccounts/{0}', parameters('name')), '2019-04-01').primaryEndpoints.blob, '')]",
                      "metadata": {
                        "description": "The primary blob endpoint reference if blob services are deployed."
                      }
                    },
                    "systemAssignedPrincipalId": {
                      "type": "string",
                      "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2021-09-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2021-09-01', 'full').identity.principalId, '')]",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2021-09-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId(parameters('parHubSubscriptionId'), 'Microsoft.Resources/deployments', format('deploy-hub-rg-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varHubShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-hub-networkSecurityGroup-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[parameters('parHubSubscriptionId')]",
              "resourceGroup": "[variables('varHubResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varHubNetworkSecurityGroupName')]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "tags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varHubShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
                  },
                  "securityRules": {
                    "value": "[parameters('parHubNetworkSecurityGroupRules')]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('parLogAnalyticsWorkspaceResourceId')]"
                  },
                  "diagnosticStorageAccountId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-logStorage-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
                  },
                  "diagnosticLogCategoriesToEnable": {
                    "value": "[parameters('parHubNetworkSecurityGroupDiagnosticsLogs')]"
                  },
                  "lock": "[if(parameters('parEnableResourceLocks'), createObject('value', 'CanNotDelete'), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "7363888954384305308"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Network Security Group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "securityRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the NSG resource."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "NetworkSecurityGroupEvent",
                        "NetworkSecurityGroupRuleCounter"
                      ],
                      "allowedValues": [
                        "NetworkSecurityGroupEvent",
                        "NetworkSecurityGroupRuleCounter"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2021-08-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "securityRules",
                            "count": "[length(parameters('securityRules'))]",
                            "input": {
                              "name": "[parameters('securityRules')[copyIndex('securityRules')].name]",
                              "properties": {
                                "protocol": "[parameters('securityRules')[copyIndex('securityRules')].properties.protocol]",
                                "access": "[parameters('securityRules')[copyIndex('securityRules')].properties.access]",
                                "priority": "[parameters('securityRules')[copyIndex('securityRules')].properties.priority]",
                                "direction": "[parameters('securityRules')[copyIndex('securityRules')].properties.direction]",
                                "description": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'description'), parameters('securityRules')[copyIndex('securityRules')].properties.description, '')]",
                                "sourcePortRange": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourcePortRange'), parameters('securityRules')[copyIndex('securityRules')].properties.sourcePortRange, '')]",
                                "sourcePortRanges": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourcePortRanges'), parameters('securityRules')[copyIndex('securityRules')].properties.sourcePortRanges, createArray())]",
                                "destinationPortRange": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationPortRange'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationPortRange, '')]",
                                "destinationPortRanges": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationPortRanges'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationPortRanges, createArray())]",
                                "sourceAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefix'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix, '')]",
                                "destinationAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefix'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix, '')]",
                                "sourceAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefixes'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceAddressPrefixes, createArray())]",
                                "destinationAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefixes'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes, createArray())]",
                                "sourceApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceApplicationSecurityGroups'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceApplicationSecurityGroups, createArray())]",
                                "destinationApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationApplicationSecurityGroups'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationApplicationSecurityGroups, createArray())]"
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "networkSecurityGroup_securityRules",
                        "count": "[length(parameters('securityRules'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-securityRule-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('securityRules')[copyIndex()].name]"
                          },
                          "networkSecurityGroupName": {
                            "value": "[parameters('name')]"
                          },
                          "protocol": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.protocol]"
                          },
                          "access": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.access]"
                          },
                          "priority": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.priority]"
                          },
                          "direction": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.direction]"
                          },
                          "description": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'description'), createObject('value', parameters('securityRules')[copyIndex()].properties.description), createObject('value', ''))]",
                          "sourcePortRange": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourcePortRange'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourcePortRange), createObject('value', ''))]",
                          "sourcePortRanges": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourcePortRanges'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourcePortRanges), createObject('value', createArray()))]",
                          "destinationPortRange": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationPortRange'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationPortRange), createObject('value', ''))]",
                          "destinationPortRanges": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationPortRanges'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationPortRanges), createObject('value', createArray()))]",
                          "sourceAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceAddressPrefix'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceAddressPrefix), createObject('value', ''))]",
                          "destinationAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationAddressPrefix'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationAddressPrefix), createObject('value', ''))]",
                          "sourceAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceAddressPrefixes'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceAddressPrefixes), createObject('value', createArray()))]",
                          "destinationAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationAddressPrefixes'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationAddressPrefixes), createObject('value', createArray()))]",
                          "sourceApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceApplicationSecurityGroups'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceApplicationSecurityGroups), createObject('value', createArray()))]",
                          "destinationApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationApplicationSecurityGroups'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationApplicationSecurityGroups), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "9882808433260651098"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the security rule."
                              }
                            },
                            "networkSecurityGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent network security group to deploy the security rule into. Required if the template is used in a standalone deployment."
                              }
                            },
                            "access": {
                              "type": "string",
                              "defaultValue": "Deny",
                              "allowedValues": [
                                "Allow",
                                "Deny"
                              ],
                              "metadata": {
                                "description": "Optional. Whether network traffic is allowed or denied."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "maxLength": 140,
                              "metadata": {
                                "description": "Optional. A description for this rule."
                              }
                            },
                            "destinationAddressPrefix": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The destination address prefix. CIDR or destination IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used."
                              }
                            },
                            "destinationAddressPrefixes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The destination address prefixes. CIDR or destination IP ranges."
                              }
                            },
                            "destinationApplicationSecurityGroups": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The application security group specified as destination."
                              }
                            },
                            "destinationPortRange": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The destination port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                              }
                            },
                            "destinationPortRanges": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The destination port ranges."
                              }
                            },
                            "direction": {
                              "type": "string",
                              "allowedValues": [
                                "Inbound",
                                "Outbound"
                              ],
                              "metadata": {
                                "description": "Required. The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic."
                              }
                            },
                            "priority": {
                              "type": "int",
                              "metadata": {
                                "description": "Required. The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule."
                              }
                            },
                            "protocol": {
                              "type": "string",
                              "allowedValues": [
                                "*",
                                "Ah",
                                "Esp",
                                "Icmp",
                                "Tcp",
                                "Udp"
                              ],
                              "metadata": {
                                "description": "Required. Network protocol this rule applies to."
                              }
                            },
                            "sourceAddressPrefix": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The CIDR or source IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used. If this is an ingress rule, specifies where network traffic originates from."
                              }
                            },
                            "sourceAddressPrefixes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The CIDR or source IP ranges."
                              }
                            },
                            "sourceApplicationSecurityGroups": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The application security group specified as source."
                              }
                            },
                            "sourcePortRange": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The source port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                              }
                            },
                            "sourcePortRanges": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The source port ranges."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                              "apiVersion": "2021-05-01",
                              "name": "[format('{0}/{1}', parameters('networkSecurityGroupName'), parameters('name'))]",
                              "properties": {
                                "access": "[parameters('access')]",
                                "description": "[parameters('description')]",
                                "destinationAddressPrefix": "[parameters('destinationAddressPrefix')]",
                                "destinationAddressPrefixes": "[parameters('destinationAddressPrefixes')]",
                                "destinationApplicationSecurityGroups": "[parameters('destinationApplicationSecurityGroups')]",
                                "destinationPortRange": "[parameters('destinationPortRange')]",
                                "destinationPortRanges": "[parameters('destinationPortRanges')]",
                                "direction": "[parameters('direction')]",
                                "priority": "[parameters('priority')]",
                                "protocol": "[parameters('protocol')]",
                                "sourceAddressPrefix": "[parameters('sourceAddressPrefix')]",
                                "sourceAddressPrefixes": "[parameters('sourceAddressPrefixes')]",
                                "sourceApplicationSecurityGroups": "[parameters('sourceApplicationSecurityGroups')]",
                                "sourcePortRange": "[parameters('sourcePortRange')]",
                                "sourcePortRanges": "[parameters('sourcePortRanges')]"
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the security rule was deployed into."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', parameters('networkSecurityGroupName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the security rule."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the security rule."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "networkSecurityGroup_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-NSG-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "6538834856152168835"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Network/networkSecurityGroups', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the network security group was deployed into."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the network security group."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the network security group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/networkSecurityGroups', parameters('name')), '2021-08-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-logStorage-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varHubShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-hub-vnet-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[parameters('parHubSubscriptionId')]",
              "resourceGroup": "[variables('varHubResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varHubVirtualNetworkName')]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "tags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varHubShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
                  },
                  "addressPrefixes": {
                    "value": [
                      "[parameters('parHubVirtualNetworkAddressPrefix')]"
                    ]
                  },
                  "subnets": {
                    "value": "[parameters('parHubSubnets')]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('parLogAnalyticsWorkspaceResourceId')]"
                  },
                  "diagnosticStorageAccountId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-logStorage-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
                  },
                  "diagnosticLogCategoriesToEnable": {
                    "value": "[parameters('parHubVirtualNetworkDiagnosticsLogs')]"
                  },
                  "diagnosticMetricsToEnable": {
                    "value": "[parameters('parHubVirtualNetworkDiagnosticsMetrics')]"
                  },
                  "ddosProtectionPlanEnabled": {
                    "value": "[parameters('parDeployddosProtectionPlan')]"
                  },
                  "ddosProtectionPlanId": {
                    "value": "[variables('hubddosName')]"
                  },
                  "lock": "[if(parameters('parEnableResourceLocks'), createObject('value', 'CanNotDelete'), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "16680740436443577959"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Virtual Network (vNet) Name."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "addressPrefixes": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. An Array of 1 or more IP Address Prefixes for the Virtual Network."
                      }
                    },
                    "subnets": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An Array of subnets to deploy to the Virtual Network."
                      }
                    },
                    "dnsServers": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. DNS Servers associated to the Virtual Network."
                      }
                    },
                    "ddosProtectionPlanEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Switch which allows DDOS deployment to be disabled. Default: false"
                      }
                    },
                    "ddosProtectionPlanId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the DDoS protection plan to assign the VNET to. If it's left blank, DDoS protection will not be configured. If it's provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription."
                      }
                    },
                    "virtualNetworkPeerings": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Virtual Network Peerings configurations."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "VMProtectionAlerts"
                      ],
                      "allowedValues": [
                        "VMProtectionAlerts"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ],
                    "dnsServersVar": {
                      "dnsServers": "[array(parameters('dnsServers'))]"
                    },
                    "ddosProtectionPlan": {
                      "id": "[parameters('ddosProtectionPlanId')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2021-08-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "subnets",
                            "count": "[length(parameters('subnets'))]",
                            "input": {
                              "name": "[parameters('subnets')[copyIndex('subnets')].name]",
                              "properties": {
                                "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].addressPrefix]",
                                "addressPrefixes": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'addressPrefixes'), parameters('subnets')[copyIndex('subnets')].addressPrefixes, createArray())]",
                                "applicationGatewayIpConfigurations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'applicationGatewayIpConfigurations'), parameters('subnets')[copyIndex('subnets')].applicationGatewayIpConfigurations, createArray())]",
                                "delegations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'delegations'), parameters('subnets')[copyIndex('subnets')].delegations, createArray())]",
                                "ipAllocations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'ipAllocations'), parameters('subnets')[copyIndex('subnets')].ipAllocations, createArray())]",
                                "natGateway": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'natGatewayId'), createObject('id', parameters('subnets')[copyIndex('subnets')].natGatewayId), null())]",
                                "networkSecurityGroup": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'networkSecurityGroupId'), createObject('id', parameters('subnets')[copyIndex('subnets')].networkSecurityGroupId), null())]",
                                "privateEndpointNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'privateEndpointNetworkPolicies'), parameters('subnets')[copyIndex('subnets')].privateEndpointNetworkPolicies, null())]",
                                "privateLinkServiceNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'privateLinkServiceNetworkPolicies'), parameters('subnets')[copyIndex('subnets')].privateLinkServiceNetworkPolicies, null())]",
                                "routeTable": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'routeTableId'), createObject('id', parameters('subnets')[copyIndex('subnets')].routeTableId), null())]",
                                "serviceEndpoints": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'serviceEndpoints'), parameters('subnets')[copyIndex('subnets')].serviceEndpoints, createArray())]",
                                "serviceEndpointPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'serviceEndpointPolicies'), parameters('subnets')[copyIndex('subnets')].serviceEndpointPolicies, createArray())]"
                              }
                            }
                          }
                        ],
                        "addressSpace": {
                          "addressPrefixes": "[parameters('addressPrefixes')]"
                        },
                        "ddosProtectionPlan": "[if(parameters('ddosProtectionPlanEnabled'), variables('ddosProtectionPlan'), null())]",
                        "dhcpOptions": "[if(not(empty(parameters('dnsServers'))), variables('dnsServersVar'), null())]",
                        "enableDdosProtection": "[not(empty(parameters('ddosProtectionPlanId')))]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "virtualNetwork_subnets",
                        "count": "[length(parameters('subnets'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-subnet-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualNetworkName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('subnets')[copyIndex()].name]"
                          },
                          "addressPrefix": {
                            "value": "[parameters('subnets')[copyIndex()].addressPrefix]"
                          },
                          "addressPrefixes": "[if(contains(parameters('subnets')[copyIndex()], 'addressPrefixes'), createObject('value', parameters('subnets')[copyIndex()].addressPrefixes), createObject('value', createArray()))]",
                          "applicationGatewayIpConfigurations": "[if(contains(parameters('subnets')[copyIndex()], 'applicationGatewayIpConfigurations'), createObject('value', parameters('subnets')[copyIndex()].applicationGatewayIpConfigurations), createObject('value', createArray()))]",
                          "delegations": "[if(contains(parameters('subnets')[copyIndex()], 'delegations'), createObject('value', parameters('subnets')[copyIndex()].delegations), createObject('value', createArray()))]",
                          "ipAllocations": "[if(contains(parameters('subnets')[copyIndex()], 'ipAllocations'), createObject('value', parameters('subnets')[copyIndex()].ipAllocations), createObject('value', createArray()))]",
                          "natGatewayId": "[if(contains(parameters('subnets')[copyIndex()], 'natGatewayId'), createObject('value', parameters('subnets')[copyIndex()].natGatewayId), createObject('value', ''))]",
                          "networkSecurityGroupId": "[if(contains(parameters('subnets')[copyIndex()], 'networkSecurityGroupId'), createObject('value', parameters('subnets')[copyIndex()].networkSecurityGroupId), createObject('value', ''))]",
                          "privateEndpointNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex()], 'privateEndpointNetworkPolicies'), createObject('value', parameters('subnets')[copyIndex()].privateEndpointNetworkPolicies), createObject('value', ''))]",
                          "privateLinkServiceNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex()], 'privateLinkServiceNetworkPolicies'), createObject('value', parameters('subnets')[copyIndex()].privateLinkServiceNetworkPolicies), createObject('value', ''))]",
                          "roleAssignments": "[if(contains(parameters('subnets')[copyIndex()], 'roleAssignments'), createObject('value', parameters('subnets')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
                          "routeTableId": "[if(contains(parameters('subnets')[copyIndex()], 'routeTableId'), createObject('value', parameters('subnets')[copyIndex()].routeTableId), createObject('value', ''))]",
                          "serviceEndpointPolicies": "[if(contains(parameters('subnets')[copyIndex()], 'serviceEndpointPolicies'), createObject('value', parameters('subnets')[copyIndex()].serviceEndpointPolicies), createObject('value', createArray()))]",
                          "serviceEndpoints": "[if(contains(parameters('subnets')[copyIndex()], 'serviceEndpoints'), createObject('value', parameters('subnets')[copyIndex()].serviceEndpoints), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "516599437942070407"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Optional. The Name of the subnet resource."
                              }
                            },
                            "virtualNetworkName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent virtual network. Required if the template is used in a standalone deployment."
                              }
                            },
                            "addressPrefix": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The address prefix for the subnet."
                              }
                            },
                            "networkSecurityGroupId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource ID of the network security group to assign to the subnet."
                              }
                            },
                            "routeTableId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource ID of the route table to assign to the subnet."
                              }
                            },
                            "serviceEndpoints": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The service endpoints to enable on the subnet."
                              }
                            },
                            "delegations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The delegations to enable on the subnet."
                              }
                            },
                            "natGatewayId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource ID of the NAT Gateway to use for the subnet."
                              }
                            },
                            "privateEndpointNetworkPolicies": {
                              "type": "string",
                              "defaultValue": "Disabled",
                              "allowedValues": [
                                "Disabled",
                                "Enabled",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. enable or disable apply network policies on private endpoint in the subnet."
                              }
                            },
                            "privateLinkServiceNetworkPolicies": {
                              "type": "string",
                              "defaultValue": "Enabled",
                              "allowedValues": [
                                "Disabled",
                                "Enabled",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. enable or disable apply network policies on private link service in the subnet."
                              }
                            },
                            "addressPrefixes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of address prefixes for the subnet."
                              }
                            },
                            "applicationGatewayIpConfigurations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Application gateway IP configurations of virtual network resource."
                              }
                            },
                            "ipAllocations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of IpAllocation which reference this subnet."
                              }
                            },
                            "serviceEndpointPolicies": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. An array of service endpoint policies."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/subnets",
                              "apiVersion": "2021-05-01",
                              "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                              "properties": {
                                "addressPrefix": "[parameters('addressPrefix')]",
                                "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupId'))), createObject('id', parameters('networkSecurityGroupId')), null())]",
                                "routeTable": "[if(not(empty(parameters('routeTableId'))), createObject('id', parameters('routeTableId')), null())]",
                                "natGateway": "[if(not(empty(parameters('natGatewayId'))), createObject('id', parameters('natGatewayId')), null())]",
                                "serviceEndpoints": "[parameters('serviceEndpoints')]",
                                "delegations": "[parameters('delegations')]",
                                "privateEndpointNetworkPolicies": "[if(not(empty(parameters('privateEndpointNetworkPolicies'))), parameters('privateEndpointNetworkPolicies'), null())]",
                                "privateLinkServiceNetworkPolicies": "[if(not(empty(parameters('privateLinkServiceNetworkPolicies'))), parameters('privateLinkServiceNetworkPolicies'), null())]",
                                "addressPrefixes": "[parameters('addressPrefixes')]",
                                "applicationGatewayIpConfigurations": "[parameters('applicationGatewayIpConfigurations')]",
                                "ipAllocations": "[parameters('ipAllocations')]",
                                "serviceEndpointPolicies": "[parameters('serviceEndpointPolicies')]"
                              }
                            },
                            {
                              "copy": {
                                "name": "subnet_roleAssignments",
                                "count": "[length(parameters('roleAssignments'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Subnet-Rbac-{1}', uniqueString(deployment().name, resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                  "principalIds": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                  },
                                  "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                  "roleDefinitionIdOrName": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                  },
                                  "resourceId": {
                                    "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "16413339242304344709"
                                    }
                                  },
                                  "parameters": {
                                    "principalIds": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. The IDs of the principals to assign the role to."
                                      }
                                    },
                                    "roleDefinitionIdOrName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource ID of the resource to apply the role assignment to."
                                      }
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "allowedValues": [
                                        "ServicePrincipal",
                                        "Group",
                                        "User",
                                        "ForeignGroup",
                                        "Device",
                                        ""
                                      ],
                                      "metadata": {
                                        "description": "Optional. The principal type of the assigned principal ID."
                                      }
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The description of the role assignment."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "roleAssignment",
                                        "count": "[length(parameters('principalIds'))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}/subnets/{1}', split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[0], split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[1])]",
                                      "name": "[guid(resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[0], split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[1]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                      "properties": {
                                        "description": "[parameters('description')]",
                                        "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the virtual network peering was deployed into."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the virtual network peering."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the virtual network peering."
                              }
                            },
                            "subnetAddressPrefix": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name')), '2021-05-01').addressPrefix]",
                              "metadata": {
                                "description": "The address prefix for the subnet."
                              }
                            },
                            "subnetAddressPrefixes": {
                              "type": "array",
                              "value": "[if(not(empty(parameters('addressPrefixes'))), reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name')), '2021-05-01').addressPrefixes, createArray())]",
                              "metadata": {
                                "description": "List of address prefixes for the subnet."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "virtualNetwork_peering_local",
                        "count": "[length(parameters('virtualNetworkPeerings'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-virtualNetworkPeering-local-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "localVnetName": {
                            "value": "[parameters('name')]"
                          },
                          "remoteVirtualNetworkId": {
                            "value": "[parameters('virtualNetworkPeerings')[copyIndex()].remoteVirtualNetworkId]"
                          },
                          "name": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'name'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].name), createObject('value', format('{0}-{1}', parameters('name'), last(split(parameters('virtualNetworkPeerings')[copyIndex()].remoteVirtualNetworkId, '/')))))]",
                          "allowForwardedTraffic": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'allowForwardedTraffic'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].allowForwardedTraffic), createObject('value', true()))]",
                          "allowGatewayTransit": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'allowGatewayTransit'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].allowGatewayTransit), createObject('value', false()))]",
                          "allowVirtualNetworkAccess": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'allowVirtualNetworkAccess'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].allowVirtualNetworkAccess), createObject('value', true()))]",
                          "doNotVerifyRemoteGateways": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'doNotVerifyRemoteGateways'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].doNotVerifyRemoteGateways), createObject('value', true()))]",
                          "useRemoteGateways": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'useRemoteGateways'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].useRemoteGateways), createObject('value', false()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "1418107840489134803"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkId'), '/')))]",
                              "metadata": {
                                "description": "Optional. The Name of Vnet Peering resource. If not provided, default value will be localVnetName-remoteVnetName."
                              }
                            },
                            "localVnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Virtual Network to add the peering to. Required if the template is used in a standalone deployment."
                              }
                            },
                            "remoteVirtualNetworkId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                              }
                            },
                            "allowForwardedTraffic": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                              }
                            },
                            "allowGatewayTransit": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                              }
                            },
                            "allowVirtualNetworkAccess": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                              }
                            },
                            "doNotVerifyRemoteGateways": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true."
                              }
                            },
                            "useRemoteGateways": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2021-05-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                                "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                                "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                                "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                                "useRemoteGateways": "[parameters('useRemoteGateways')]",
                                "remoteVirtualNetwork": {
                                  "id": "[parameters('remoteVirtualNetworkId')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the virtual network peering was deployed into."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the virtual network peering."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', split(parameters('name'), '/')[0], split(parameters('name'), '/')[1])]",
                              "metadata": {
                                "description": "The resource ID of the virtual network peering."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringEnabled'), equals(parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringEnabled, true()), false())]",
                      "copy": {
                        "name": "virtualNetwork_peering_remote",
                        "count": "[length(parameters('virtualNetworkPeerings'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-virtualNetworkPeering-remote-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "subscriptionId": "[split(parameters('virtualNetworkPeerings')[copyIndex()].remoteVirtualNetworkId, '/')[2]]",
                      "resourceGroup": "[split(parameters('virtualNetworkPeerings')[copyIndex()].remoteVirtualNetworkId, '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "localVnetName": {
                            "value": "[last(split(parameters('virtualNetworkPeerings')[copyIndex()].remoteVirtualNetworkId, '/'))]"
                          },
                          "remoteVirtualNetworkId": {
                            "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                          },
                          "name": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringName'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringName), createObject('value', format('{0}-{1}', last(split(parameters('virtualNetworkPeerings')[copyIndex()].remoteVirtualNetworkId, '/')), parameters('name'))))]",
                          "allowForwardedTraffic": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringAllowForwardedTraffic'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringAllowForwardedTraffic), createObject('value', true()))]",
                          "allowGatewayTransit": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringAllowGatewayTransit'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringAllowGatewayTransit), createObject('value', false()))]",
                          "allowVirtualNetworkAccess": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringAllowVirtualNetworkAccess'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringAllowVirtualNetworkAccess), createObject('value', true()))]",
                          "doNotVerifyRemoteGateways": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringDoNotVerifyRemoteGateways'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringDoNotVerifyRemoteGateways), createObject('value', true()))]",
                          "useRemoteGateways": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringUseRemoteGateways'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringUseRemoteGateways), createObject('value', false()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "1418107840489134803"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkId'), '/')))]",
                              "metadata": {
                                "description": "Optional. The Name of Vnet Peering resource. If not provided, default value will be localVnetName-remoteVnetName."
                              }
                            },
                            "localVnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Virtual Network to add the peering to. Required if the template is used in a standalone deployment."
                              }
                            },
                            "remoteVirtualNetworkId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                              }
                            },
                            "allowForwardedTraffic": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                              }
                            },
                            "allowGatewayTransit": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                              }
                            },
                            "allowVirtualNetworkAccess": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                              }
                            },
                            "doNotVerifyRemoteGateways": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true."
                              }
                            },
                            "useRemoteGateways": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2021-05-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                                "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                                "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                                "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                                "useRemoteGateways": "[parameters('useRemoteGateways')]",
                                "remoteVirtualNetwork": {
                                  "id": "[parameters('remoteVirtualNetworkId')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the virtual network peering was deployed into."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the virtual network peering."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', split(parameters('name'), '/')[0], split(parameters('name'), '/')[1])]",
                              "metadata": {
                                "description": "The resource ID of the virtual network peering."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "virtualNetwork_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VNet-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "726979463184508627"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Id of the delegated managed identity resource."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Network/virtualNetworks', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the virtual network was deployed into."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the virtual network."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the virtual network."
                      }
                    },
                    "subnetNames": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('subnets'))]",
                        "input": "[parameters('subnets')[copyIndex()].name]"
                      },
                      "metadata": {
                        "description": "The names of the deployed subnets."
                      }
                    },
                    "subnetResourceIds": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('subnets'))]",
                        "input": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('name'), parameters('subnets')[copyIndex()].name)]"
                      },
                      "metadata": {
                        "description": "The resource IDs of the deployed subnets."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2021-08-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-logStorage-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varHubShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-hub-routeTable-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[parameters('parHubSubscriptionId')]",
              "resourceGroup": "[variables('varHubResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varRouteTableName')]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "tags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varHubShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
                  },
                  "routes": {
                    "value": [
                      {
                        "name": "default_route",
                        "properties": {
                          "addressPrefix": "0.0.0.0/0",
                          "nextHopIpAddress": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-FW-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.privateIp.value]",
                          "nextHopType": "VirtualAppliance"
                        }
                      }
                    ]
                  },
                  "disableBgpRoutePropagation": {
                    "value": "[parameters('parDisableBgpRoutePropagation')]"
                  },
                  "lock": "[if(parameters('parEnableResourceLocks'), createObject('value', 'CanNotDelete'), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "12951294337263059431"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name given for the hub route table."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "routes": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An Array of Routes to be established within the hub route table."
                      }
                    },
                    "disableBgpRoutePropagation": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Switch to disable BGP route propagation."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/routeTables",
                      "apiVersion": "2021-08-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "routes": "[parameters('routes')]",
                        "disableBgpRoutePropagation": "[parameters('disableBgpRoutePropagation')]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/routeTables/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "routeTable_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-RouteTable-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "4373655375548493381"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/routeTables/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Network/routeTables', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the route table was deployed into."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the route table."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/routeTables', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the route table."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/routeTables', parameters('name')), '2021-08-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-FW-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[subscriptionResourceId(parameters('parHubSubscriptionId'), 'Microsoft.Resources/deployments', format('deploy-hub-rg-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varHubShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-hub-subnet-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[parameters('parHubSubscriptionId')]",
              "resourceGroup": "[variables('varHubResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "addressPrefix": {
                    "value": "[parameters('parHubSubnetAddressPrefix')]"
                  },
                  "networkSecurityGroupId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-networkSecurityGroup-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
                  },
                  "name": {
                    "value": "[variables('varHubSubnetName')]"
                  },
                  "routeTableId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-routeTable-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
                  },
                  "serviceEndpoints": {
                    "value": "[parameters('parHubSubnetServiceEndpoints')]"
                  },
                  "virtualNetworkName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-vnet-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.name.value]"
                  },
                  "privateEndpointNetworkPolicies": {
                    "value": "Disabled"
                  },
                  "privateLinkServiceNetworkPolicies": {
                    "value": "Enabled"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "516599437942070407"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Optional. The Name of the subnet resource."
                      }
                    },
                    "virtualNetworkName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual network. Required if the template is used in a standalone deployment."
                      }
                    },
                    "addressPrefix": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The address prefix for the subnet."
                      }
                    },
                    "networkSecurityGroupId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The resource ID of the network security group to assign to the subnet."
                      }
                    },
                    "routeTableId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The resource ID of the route table to assign to the subnet."
                      }
                    },
                    "serviceEndpoints": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The service endpoints to enable on the subnet."
                      }
                    },
                    "delegations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The delegations to enable on the subnet."
                      }
                    },
                    "natGatewayId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The resource ID of the NAT Gateway to use for the subnet."
                      }
                    },
                    "privateEndpointNetworkPolicies": {
                      "type": "string",
                      "defaultValue": "Disabled",
                      "allowedValues": [
                        "Disabled",
                        "Enabled",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. enable or disable apply network policies on private endpoint in the subnet."
                      }
                    },
                    "privateLinkServiceNetworkPolicies": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Disabled",
                        "Enabled",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. enable or disable apply network policies on private link service in the subnet."
                      }
                    },
                    "addressPrefixes": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of address prefixes for the subnet."
                      }
                    },
                    "applicationGatewayIpConfigurations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Application gateway IP configurations of virtual network resource."
                      }
                    },
                    "ipAllocations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of IpAllocation which reference this subnet."
                      }
                    },
                    "serviceEndpointPolicies": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An array of service endpoint policies."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/subnets",
                      "apiVersion": "2021-05-01",
                      "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                      "properties": {
                        "addressPrefix": "[parameters('addressPrefix')]",
                        "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupId'))), createObject('id', parameters('networkSecurityGroupId')), null())]",
                        "routeTable": "[if(not(empty(parameters('routeTableId'))), createObject('id', parameters('routeTableId')), null())]",
                        "natGateway": "[if(not(empty(parameters('natGatewayId'))), createObject('id', parameters('natGatewayId')), null())]",
                        "serviceEndpoints": "[parameters('serviceEndpoints')]",
                        "delegations": "[parameters('delegations')]",
                        "privateEndpointNetworkPolicies": "[if(not(empty(parameters('privateEndpointNetworkPolicies'))), parameters('privateEndpointNetworkPolicies'), null())]",
                        "privateLinkServiceNetworkPolicies": "[if(not(empty(parameters('privateLinkServiceNetworkPolicies'))), parameters('privateLinkServiceNetworkPolicies'), null())]",
                        "addressPrefixes": "[parameters('addressPrefixes')]",
                        "applicationGatewayIpConfigurations": "[parameters('applicationGatewayIpConfigurations')]",
                        "ipAllocations": "[parameters('ipAllocations')]",
                        "serviceEndpointPolicies": "[parameters('serviceEndpointPolicies')]"
                      }
                    },
                    {
                      "copy": {
                        "name": "subnet_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Subnet-Rbac-{1}', uniqueString(deployment().name, resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "16413339242304344709"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/virtualNetworks/{0}/subnets/{1}', split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[0], split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[1])]",
                              "name": "[guid(resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[0], split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[1]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the virtual network peering was deployed into."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the virtual network peering."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the virtual network peering."
                      }
                    },
                    "subnetAddressPrefix": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name')), '2021-05-01').addressPrefix]",
                      "metadata": {
                        "description": "The address prefix for the subnet."
                      }
                    },
                    "subnetAddressPrefixes": {
                      "type": "array",
                      "value": "[if(not(empty(parameters('addressPrefixes'))), reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name')), '2021-05-01').addressPrefixes, createArray())]",
                      "metadata": {
                        "description": "List of address prefixes for the subnet."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-FW-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-networkSecurityGroup-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-routeTable-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-vnet-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-hub-FW-Client-PIP-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[parameters('parHubSubscriptionId')]",
              "resourceGroup": "[variables('varHubResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varFirewallClientPublicIPAddressName')]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "tags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varHubShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
                  },
                  "skuName": {
                    "value": "[variables('varFirewallPublicIPAddressSkuName')]"
                  },
                  "publicIPAllocationMethod": {
                    "value": "[variables('varFirewallPublicIpAllocationMethod')]"
                  },
                  "zones": {
                    "value": "[parameters('parFirewallClientPublicIPAddressAvailabilityZones')]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('parLogAnalyticsWorkspaceResourceId')]"
                  },
                  "diagnosticStorageAccountId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-logStorage-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
                  },
                  "diagnosticLogCategoriesToEnable": {
                    "value": "[parameters('parPublicIPAddressDiagnosticsLogs')]"
                  },
                  "diagnosticMetricsToEnable": {
                    "value": "[parameters('parPublicIPAddressDiagnosticsMetrics')]"
                  },
                  "publicIPAddressVersion": {
                    "value": "IPv4"
                  },
                  "skuTier": {
                    "value": "Regional"
                  },
                  "lock": "[if(parameters('parEnableResourceLocks'), createObject('value', 'CanNotDelete'), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "13449739070789540681"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Public IP Address."
                      }
                    },
                    "publicIPPrefixResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                      }
                    },
                    "publicIPAllocationMethod": {
                      "type": "string",
                      "defaultValue": "Dynamic",
                      "allowedValues": [
                        "Dynamic",
                        "Static"
                      ],
                      "metadata": {
                        "description": "Optional. The public IP address allocation method."
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "Basic",
                      "allowedValues": [
                        "Basic",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. Name of a public IP address SKU."
                      }
                    },
                    "skuTier": {
                      "type": "string",
                      "defaultValue": "Regional",
                      "allowedValues": [
                        "Global",
                        "Regional"
                      ],
                      "metadata": {
                        "description": "Optional. Tier of a public IP address SKU."
                      }
                    },
                    "zones": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                      }
                    },
                    "publicIPAddressVersion": {
                      "type": "string",
                      "defaultValue": "IPv4",
                      "allowedValues": [
                        "IPv4",
                        "IPv6"
                      ],
                      "metadata": {
                        "description": "Optional. IP address version."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "DDoSProtectionNotifications",
                        "DDoSMitigationFlowLogs",
                        "DDoSMitigationReports"
                      ],
                      "allowedValues": [
                        "DDoSProtectionNotifications",
                        "DDoSMitigationFlowLogs",
                        "DDoSMitigationReports"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2021-08-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('skuName')]",
                        "tier": "[parameters('skuTier')]"
                      },
                      "zones": "[parameters('zones')]",
                      "properties": {
                        "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                        "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                        "publicIPPrefix": "[if(not(empty(parameters('publicIPPrefixResourceId'))), createObject('id', parameters('publicIPPrefixResourceId')), null())]",
                        "idleTimeoutInMinutes": 4,
                        "ipTags": []
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "publicIpAddress_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-PIPAddress-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "7287021548899153761"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Id of the delegated managed identity resource."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Network/publicIPAddresses', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the public IP address was deployed into."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the public IP address."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the public IP address."
                      }
                    },
                    "ipAddress": {
                      "type": "string",
                      "value": "[if(contains(reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-08-01'), 'ipAddress'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-08-01').ipAddress, '')]",
                      "metadata": {
                        "description": "The public IP address of the public IP address resource."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-08-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-logStorage-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varHubShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-hub-FW-Mgmt-PIP-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[parameters('parHubSubscriptionId')]",
              "resourceGroup": "[variables('varHubResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varFirewallManagementPublicIPAddressName')]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "tags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varHubShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
                  },
                  "skuName": {
                    "value": "[variables('varFirewallPublicIPAddressSkuName')]"
                  },
                  "publicIPAllocationMethod": {
                    "value": "[variables('varFirewallPublicIpAllocationMethod')]"
                  },
                  "zones": {
                    "value": "[parameters('parFirewallManagementPublicIPAddressAvailabilityZones')]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('parLogAnalyticsWorkspaceResourceId')]"
                  },
                  "diagnosticStorageAccountId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-logStorage-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
                  },
                  "diagnosticLogCategoriesToEnable": {
                    "value": "[parameters('parPublicIPAddressDiagnosticsLogs')]"
                  },
                  "diagnosticMetricsToEnable": {
                    "value": "[parameters('parPublicIPAddressDiagnosticsMetrics')]"
                  },
                  "publicIPAddressVersion": {
                    "value": "IPv4"
                  },
                  "skuTier": {
                    "value": "Regional"
                  },
                  "lock": "[if(parameters('parEnableResourceLocks'), createObject('value', 'CanNotDelete'), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "13449739070789540681"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Public IP Address."
                      }
                    },
                    "publicIPPrefixResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                      }
                    },
                    "publicIPAllocationMethod": {
                      "type": "string",
                      "defaultValue": "Dynamic",
                      "allowedValues": [
                        "Dynamic",
                        "Static"
                      ],
                      "metadata": {
                        "description": "Optional. The public IP address allocation method."
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "Basic",
                      "allowedValues": [
                        "Basic",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. Name of a public IP address SKU."
                      }
                    },
                    "skuTier": {
                      "type": "string",
                      "defaultValue": "Regional",
                      "allowedValues": [
                        "Global",
                        "Regional"
                      ],
                      "metadata": {
                        "description": "Optional. Tier of a public IP address SKU."
                      }
                    },
                    "zones": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                      }
                    },
                    "publicIPAddressVersion": {
                      "type": "string",
                      "defaultValue": "IPv4",
                      "allowedValues": [
                        "IPv4",
                        "IPv6"
                      ],
                      "metadata": {
                        "description": "Optional. IP address version."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "DDoSProtectionNotifications",
                        "DDoSMitigationFlowLogs",
                        "DDoSMitigationReports"
                      ],
                      "allowedValues": [
                        "DDoSProtectionNotifications",
                        "DDoSMitigationFlowLogs",
                        "DDoSMitigationReports"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2021-08-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('skuName')]",
                        "tier": "[parameters('skuTier')]"
                      },
                      "zones": "[parameters('zones')]",
                      "properties": {
                        "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                        "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                        "publicIPPrefix": "[if(not(empty(parameters('publicIPPrefixResourceId'))), createObject('id', parameters('publicIPPrefixResourceId')), null())]",
                        "idleTimeoutInMinutes": 4,
                        "ipTags": []
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "publicIpAddress_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-PIPAddress-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "7287021548899153761"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Id of the delegated managed identity resource."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Network/publicIPAddresses', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the public IP address was deployed into."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the public IP address."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the public IP address."
                      }
                    },
                    "ipAddress": {
                      "type": "string",
                      "value": "[if(contains(reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-08-01'), 'ipAddress'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-08-01').ipAddress, '')]",
                      "metadata": {
                        "description": "The public IP address of the public IP address resource."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-08-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-logStorage-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varHubShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[parameters('parAzureFirewallEnabled')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-hub-FW-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[parameters('parHubSubscriptionId')]",
              "resourceGroup": "[variables('varHubResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varFirewallName')]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "tags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varHubShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
                  },
                  "azureSkuName": {
                    "value": "AZFW_VNet"
                  },
                  "azureSkuTier": {
                    "value": "[parameters('parFirewallSkuTier')]"
                  },
                  "isCreateDefaultPublicIP": {
                    "value": false
                  },
                  "azureFirewallSubnetPublicIpId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-FW-Client-PIP-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
                  },
                  "azureFirewallMgmtSubnetPublicIpId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-FW-Mgmt-PIP-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
                  },
                  "firewallPolicyId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-FW-Policy-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
                  },
                  "threatIntelMode": {
                    "value": "[parameters('parFirewallThreatIntelMode')]"
                  },
                  "vNetId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-vnet-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('parLogAnalyticsWorkspaceResourceId')]"
                  },
                  "diagnosticStorageAccountId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-logStorage-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
                  },
                  "diagnosticLogCategoriesToEnable": {
                    "value": "[parameters('parFirewallDiagnosticsLogs')]"
                  },
                  "diagnosticMetricsToEnable": {
                    "value": "[parameters('parFirewallDiagnosticsMetrics')]"
                  },
                  "zones": {
                    "value": []
                  },
                  "lock": "[if(parameters('parEnableResourceLocks'), createObject('value', 'CanNotDelete'), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "17350916299003668156"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Azure Firewall."
                      }
                    },
                    "azureSkuName": {
                      "type": "string",
                      "defaultValue": "AZFW_VNet",
                      "allowedValues": [
                        "AZFW_VNet",
                        "AZFW_Hub"
                      ],
                      "metadata": {
                        "description": "Optional. Name of an Azure Firewall SKU."
                      }
                    },
                    "azureSkuTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Standard",
                        "Premium"
                      ],
                      "metadata": {
                        "description": "Optional. Tier of an Azure Firewall."
                      }
                    },
                    "vNetId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Shared services Virtual Network resource ID. The virtual network ID containing AzureFirewallSubnet. If a public ip is not provided, then the public ip that is created as part of this module will be applied with the subnet provided in this variable."
                      }
                    },
                    "azureFirewallSubnetPublicIpId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The public ip resource ID to associate to the AzureFirewallSubnet. If empty, then the public ip that is created as part of this module will be applied to the AzureFirewallSubnet."
                      }
                    },
                    "azureFirewallMgmtSubnetPublicIpId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The public ip resource ID to associate to the AzureFirewallSubnet. If empty, then the public ip that is created as part of this module will be applied to the AzureFirewallSubnet."
                      }
                    },
                    "additionalPublicIpConfigurations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. This is to add any additional public ip configurations on top of the public ip with subnet ip configuration."
                      }
                    },
                    "isCreateDefaultPublicIP": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies if a public ip should be created by default if one is not provided."
                      }
                    },
                    "publicIPAddressObject": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Specifies the properties of the public IP to create and be used by Azure Firewall. If it's not provided and publicIPAddressId is empty, a '-pip' suffix will be appended to the Firewall's name."
                      }
                    },
                    "applicationRuleCollections": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Collection of application rule collections used by Azure Firewall."
                      }
                    },
                    "networkRuleCollections": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Collection of network rule collections used by Azure Firewall."
                      }
                    },
                    "natRuleCollections": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Collection of NAT rule collections used by Azure Firewall."
                      }
                    },
                    "firewallPolicyId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the Firewall Policy that should be attached."
                      }
                    },
                    "threatIntelMode": {
                      "type": "string",
                      "defaultValue": "Deny",
                      "metadata": {
                        "description": "Optional. The operation mode for Threat Intel."
                      },
                      "allowedValues": [
                        "Alert",
                        "Deny",
                        "Off"
                      ]
                    },
                    "zones": {
                      "type": "array",
                      "defaultValue": [
                        "1",
                        "2",
                        "3"
                      ],
                      "metadata": {
                        "description": "Optional. Zone numbers e.g. 1,2,3."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Diagnostic Storage Account resource identifier."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Log Analytics workspace resource identifier."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the Azure Firewall resource."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AzureFirewallApplicationRule",
                        "AzureFirewallNetworkRule",
                        "AzureFirewallDnsProxy"
                      ],
                      "allowedValues": [
                        "AzureFirewallApplicationRule",
                        "AzureFirewallNetworkRule",
                        "AzureFirewallDnsProxy"
                      ],
                      "metadata": {
                        "description": "Optional. The name of firewall logs that will be streamed."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "additionalPublicIpConfigurationsVar",
                        "count": "[length(parameters('additionalPublicIpConfigurations'))]",
                        "input": {
                          "name": "[parameters('additionalPublicIpConfigurations')[copyIndex('additionalPublicIpConfigurationsVar')].name]",
                          "properties": {
                            "publicIPAddress": "[if(contains(parameters('additionalPublicIpConfigurations')[copyIndex('additionalPublicIpConfigurationsVar')], 'publicIPAddressResourceId'), createObject('id', parameters('additionalPublicIpConfigurations')[copyIndex('additionalPublicIpConfigurationsVar')].publicIPAddressResourceId), null())]"
                          }
                        }
                      },
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ],
                    "subnetVar": {
                      "subnet": {
                        "id": "[format('{0}/subnets/AzureFirewallSubnet', parameters('vNetId'))]"
                      }
                    },
                    "mgmtSubnetVar": {
                      "subnet": {
                        "id": "[format('{0}/subnets/AzureFirewallManagementSubnet', parameters('vNetId'))]"
                      }
                    },
                    "existingPip": {
                      "publicIPAddress": {
                        "id": "[parameters('azureFirewallSubnetPublicIpId')]"
                      }
                    },
                    "existingMgmtPip": {
                      "publicIPAddress": {
                        "id": "[parameters('azureFirewallMgmtSubnetPublicIpId')]"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/azureFirewalls",
                      "apiVersion": "2021-08-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "zones": "[if(equals(length(parameters('zones')), 0), null(), parameters('zones'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "threatIntelMode": "[parameters('threatIntelMode')]",
                        "firewallPolicy": "[if(empty(parameters('firewallPolicyId')), null(), createObject('id', parameters('firewallPolicyId')))]",
                        "ipConfigurations": "[concat(createArray(createObject('name', if(not(empty(parameters('azureFirewallSubnetPublicIpId'))), last(split(parameters('azureFirewallSubnetPublicIpId'), '/')), reference(resourceId('Microsoft.Resources/deployments', format('{0}-Firewall-PIP', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.name.value), 'properties', union(variables('subnetVar'), if(not(empty(parameters('azureFirewallSubnetPublicIpId'))), variables('existingPip'), createObject()), if(parameters('isCreateDefaultPublicIP'), createObject('publicIPAddress', if(and(empty(parameters('azureFirewallSubnetPublicIpId')), parameters('isCreateDefaultPublicIP')), createObject('id', reference(resourceId('Microsoft.Resources/deployments', format('{0}-Firewall-PIP', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.resourceId.value), null())), createObject())))), variables('additionalPublicIpConfigurationsVar'))]",
                        "managementIpConfiguration": {
                          "name": "[if(not(empty(parameters('azureFirewallMgmtSubnetPublicIpId'))), last(split(parameters('azureFirewallMgmtSubnetPublicIpId'), '/')), reference(resourceId('Microsoft.Resources/deployments', format('{0}-Firewall-PIP', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.name.value)]",
                          "properties": "[union(variables('mgmtSubnetVar'), if(not(empty(parameters('azureFirewallMgmtSubnetPublicIpId'))), variables('existingMgmtPip'), createObject()), if(parameters('isCreateDefaultPublicIP'), createObject('publicIPAddress', if(and(empty(parameters('azureFirewallMgmtSubnetPublicIpId')), parameters('isCreateDefaultPublicIP')), createObject('id', reference(resourceId('Microsoft.Resources/deployments', format('{0}-Firewall-PIP', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.resourceId.value), null())), createObject()))]"
                        },
                        "sku": {
                          "name": "[parameters('azureSkuName')]",
                          "tier": "[parameters('azureSkuTier')]"
                        },
                        "applicationRuleCollections": "[parameters('applicationRuleCollections')]",
                        "natRuleCollections": "[parameters('natRuleCollections')]",
                        "networkRuleCollections": "[parameters('networkRuleCollections')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-Firewall-PIP', uniqueString(deployment().name, parameters('location'))))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/azureFirewalls/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/azureFirewalls', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/azureFirewalls/{0}', parameters('name'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/azureFirewalls', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[and(empty(parameters('azureFirewallSubnetPublicIpId')), parameters('isCreateDefaultPublicIP'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Firewall-PIP', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": "[if(contains(parameters('publicIPAddressObject'), 'name'), createObject('value', if(not(empty(parameters('publicIPAddressObject').name)), parameters('publicIPAddressObject').name, format('{0}-pip', parameters('name')))), createObject('value', format('{0}-pip', parameters('name'))))]",
                          "publicIPPrefixResourceId": "[if(contains(parameters('publicIPAddressObject'), 'publicIPPrefixResourceId'), createObject('value', if(not(empty(parameters('publicIPAddressObject').publicIPPrefixResourceId)), parameters('publicIPAddressObject').publicIPPrefixResourceId, '')), createObject('value', ''))]",
                          "publicIPAllocationMethod": "[if(contains(parameters('publicIPAddressObject'), 'publicIPAllocationMethod'), createObject('value', if(not(empty(parameters('publicIPAddressObject').publicIPAllocationMethod)), parameters('publicIPAddressObject').publicIPAllocationMethod, 'Static')), createObject('value', 'Static'))]",
                          "skuName": "[if(contains(parameters('publicIPAddressObject'), 'skuName'), createObject('value', if(not(empty(parameters('publicIPAddressObject').skuName)), parameters('publicIPAddressObject').skuName, 'Standard')), createObject('value', 'Standard'))]",
                          "skuTier": "[if(contains(parameters('publicIPAddressObject'), 'skuTier'), createObject('value', if(not(empty(parameters('publicIPAddressObject').skuTier)), parameters('publicIPAddressObject').skuTier, 'Regional')), createObject('value', 'Regional'))]",
                          "roleAssignments": "[if(contains(parameters('publicIPAddressObject'), 'roleAssignments'), createObject('value', if(not(empty(parameters('publicIPAddressObject').roleAssignments)), parameters('publicIPAddressObject').roleAssignments, createArray())), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('publicIPAddressObject'), 'diagnosticMetricsToEnable'), createObject('value', if(not(empty(parameters('publicIPAddressObject').diagnosticMetricsToEnable)), parameters('publicIPAddressObject').diagnosticMetricsToEnable, createArray('AllMetrics'))), createObject('value', createArray('AllMetrics')))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('publicIPAddressObject'), 'diagnosticLogCategoriesToEnable'), createObject('value', if(not(empty(parameters('publicIPAddressObject').diagnosticLogCategoriesToEnable)), parameters('publicIPAddressObject').diagnosticLogCategoriesToEnable, createArray('DDoSProtectionNotifications', 'DDoSMitigationFlowLogs', 'DDoSMitigationReports'))), createObject('value', createArray('DDoSProtectionNotifications', 'DDoSMitigationFlowLogs', 'DDoSMitigationReports')))]",
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "diagnosticStorageAccountId": {
                            "value": "[parameters('diagnosticStorageAccountId')]"
                          },
                          "diagnosticLogsRetentionInDays": {
                            "value": "[parameters('diagnosticLogsRetentionInDays')]"
                          },
                          "diagnosticWorkspaceId": {
                            "value": "[parameters('diagnosticWorkspaceId')]"
                          },
                          "diagnosticEventHubAuthorizationRuleId": {
                            "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                          },
                          "diagnosticEventHubName": {
                            "value": "[parameters('diagnosticEventHubName')]"
                          },
                          "lock": {
                            "value": "[parameters('lock')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "zones": {
                            "value": "[parameters('zones')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "13449739070789540681"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the Public IP Address."
                              }
                            },
                            "publicIPPrefixResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                              }
                            },
                            "publicIPAllocationMethod": {
                              "type": "string",
                              "defaultValue": "Dynamic",
                              "allowedValues": [
                                "Dynamic",
                                "Static"
                              ],
                              "metadata": {
                                "description": "Optional. The public IP address allocation method."
                              }
                            },
                            "skuName": {
                              "type": "string",
                              "defaultValue": "Basic",
                              "allowedValues": [
                                "Basic",
                                "Standard"
                              ],
                              "metadata": {
                                "description": "Optional. Name of a public IP address SKU."
                              }
                            },
                            "skuTier": {
                              "type": "string",
                              "defaultValue": "Regional",
                              "allowedValues": [
                                "Global",
                                "Regional"
                              ],
                              "metadata": {
                                "description": "Optional. Tier of a public IP address SKU."
                              }
                            },
                            "zones": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                              }
                            },
                            "publicIPAddressVersion": {
                              "type": "string",
                              "defaultValue": "IPv4",
                              "allowedValues": [
                                "IPv4",
                                "IPv6"
                              ],
                              "metadata": {
                                "description": "Optional. IP address version."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "lock": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specify the type of lock."
                              },
                              "allowedValues": [
                                "",
                                "CanNotDelete",
                                "ReadOnly"
                              ]
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "DDoSProtectionNotifications",
                                "DDoSMitigationFlowLogs",
                                "DDoSMitigationReports"
                              ],
                              "allowedValues": [
                                "DDoSProtectionNotifications",
                                "DDoSMitigationFlowLogs",
                                "DDoSMitigationReports"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "AllMetrics"
                              ],
                              "allowedValues": [
                                "AllMetrics"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2021-08-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "sku": {
                                "name": "[parameters('skuName')]",
                                "tier": "[parameters('skuTier')]"
                              },
                              "zones": "[parameters('zones')]",
                              "properties": {
                                "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                                "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                                "publicIPPrefix": "[if(not(empty(parameters('publicIPPrefixResourceId'))), createObject('id', parameters('publicIPPrefixResourceId')), null())]",
                                "idleTimeoutInMinutes": 4,
                                "ipTags": []
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('lock')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                              "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                              "properties": {
                                "level": "[parameters('lock')]",
                                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                              ]
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "publicIpAddress_roleAssignments",
                                "count": "[length(parameters('roleAssignments'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-PIPAddress-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                  "principalIds": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                  },
                                  "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                  "roleDefinitionIdOrName": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                  },
                                  "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                                  "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                                  "resourceId": {
                                    "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "7287021548899153761"
                                    }
                                  },
                                  "parameters": {
                                    "principalIds": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. The IDs of the principals to assign the role to."
                                      }
                                    },
                                    "roleDefinitionIdOrName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource ID of the resource to apply the role assignment to."
                                      }
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "allowedValues": [
                                        "ServicePrincipal",
                                        "Group",
                                        "User",
                                        "ForeignGroup",
                                        "Device",
                                        ""
                                      ],
                                      "metadata": {
                                        "description": "Optional. The principal type of the assigned principal ID."
                                      }
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The description of the role assignment."
                                      }
                                    },
                                    "condition": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                                      }
                                    },
                                    "conditionVersion": {
                                      "type": "string",
                                      "defaultValue": "2.0",
                                      "allowedValues": [
                                        "2.0"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Version of the condition."
                                      }
                                    },
                                    "delegatedManagedIdentityResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Id of the delegated managed identity resource."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "roleAssignment",
                                        "count": "[length(parameters('principalIds'))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', last(split(parameters('resourceId'), '/')))]",
                                      "name": "[guid(resourceId('Microsoft.Network/publicIPAddresses', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                      "properties": {
                                        "description": "[parameters('description')]",
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                        "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                        "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                        "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the public IP address was deployed into."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the public IP address."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the public IP address."
                              }
                            },
                            "ipAddress": {
                              "type": "string",
                              "value": "[if(contains(reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-08-01'), 'ipAddress'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-08-01').ipAddress, '')]",
                              "metadata": {
                                "description": "The public IP address of the public IP address resource."
                              }
                            },
                            "location": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-08-01', 'full').location]",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "azureFirewall_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-AzFW-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Network/azureFirewalls', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "10126893776673481369"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Id of the delegated managed identity resource."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/azureFirewalls/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Network/azureFirewalls', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/azureFirewalls', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/azureFirewalls', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the Azure firewall."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the Azure firewall."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the Azure firewall was deployed into."
                      }
                    },
                    "privateIp": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/azureFirewalls', parameters('name')), '2021-08-01').ipConfigurations[0].properties.privateIPAddress]",
                      "metadata": {
                        "description": "The private IP of the Azure firewall."
                      }
                    },
                    "ipConfAzureFirewallSubnet": {
                      "type": "object",
                      "value": "[reference(resourceId('Microsoft.Network/azureFirewalls', parameters('name')), '2021-08-01').ipConfigurations[0]]",
                      "metadata": {
                        "description": "The public ipconfiguration object for the AzureFirewallSubnet."
                      }
                    },
                    "applicationRuleCollections": {
                      "type": "array",
                      "value": "[parameters('applicationRuleCollections')]",
                      "metadata": {
                        "description": "List of Application Rule Collections."
                      }
                    },
                    "networkRuleCollections": {
                      "type": "array",
                      "value": "[parameters('networkRuleCollections')]",
                      "metadata": {
                        "description": "List of Network Rule Collections."
                      }
                    },
                    "natRuleCollections": {
                      "type": "array",
                      "value": "[parameters('natRuleCollections')]",
                      "metadata": {
                        "description": "Collection of NAT rule collections used by Azure Firewall."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/azureFirewalls', parameters('name')), '2021-08-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-FW-Policy-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-FW-Client-PIP-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-FW-Mgmt-PIP-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-logStorage-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-vnet-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varHubShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[parameters('parAzureFirewallEnabled')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-hub-FW-Policy-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[parameters('parHubSubscriptionId')]",
              "resourceGroup": "[variables('varHubResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varFirewallPolicyName')]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "threatIntelMode": {
                    "value": "[parameters('parFirewallThreatIntelMode')]"
                  },
                  "mode": {
                    "value": "[parameters('parFirewallIntrusionDetectionMode')]"
                  },
                  "tier": {
                    "value": "[parameters('parFirewallSkuTier')]"
                  },
                  "ruleCollectionGroups": {
                    "value": "[parameters('parFirewallPolicyRuleCollectionGroups')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "8759564075740183235"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Firewall Policy."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the Firewall policy resource."
                      }
                    },
                    "systemAssignedIdentity": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enables system assigned managed identity on the resource."
                      }
                    },
                    "userAssignedIdentities": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The ID(s) to assign to the resource."
                      }
                    },
                    "basePolicyResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the base policy."
                      }
                    },
                    "enableProxy": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enable DNS Proxy on Firewalls attached to the Firewall Policy."
                      }
                    },
                    "servers": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of Custom DNS Servers."
                      }
                    },
                    "insightsIsEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. A flag to indicate if the insights are enabled on the policy."
                      }
                    },
                    "defaultWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Default Log Analytics Resource ID for Firewall Policy Insights."
                      }
                    },
                    "workspaces": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of workspaces for Firewall Policy Insights."
                      }
                    },
                    "retentionDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "metadata": {
                        "description": "Optional. Number of days the insights should be enabled on the policy."
                      }
                    },
                    "bypassTrafficSettings": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of rules for traffic to bypass."
                      }
                    },
                    "signatureOverrides": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of specific signatures states."
                      }
                    },
                    "mode": {
                      "type": "string",
                      "defaultValue": "Off",
                      "allowedValues": [
                        "Alert",
                        "Deny",
                        "Off"
                      ],
                      "metadata": {
                        "description": "Optional. The configuring of intrusion detection."
                      }
                    },
                    "tier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Premium",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. Tier of Firewall Policy."
                      }
                    },
                    "privateRanges": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of private IP addresses/IP address ranges to not be SNAT."
                      }
                    },
                    "threatIntelMode": {
                      "type": "string",
                      "defaultValue": "Off",
                      "allowedValues": [
                        "Alert",
                        "Deny",
                        "Off"
                      ],
                      "metadata": {
                        "description": "Optional. The operation mode for Threat Intel."
                      }
                    },
                    "fqdns": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of FQDNs for the ThreatIntel Allowlist."
                      }
                    },
                    "ipAddresses": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of IP addresses for the ThreatIntel Allowlist."
                      }
                    },
                    "keyVaultSecretId": {
                      "type": "secureString",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Secret ID of (base-64 encoded unencrypted PFX) Secret or Certificate object stored in KeyVault."
                      }
                    },
                    "certificateName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the CA certificate."
                      }
                    },
                    "ruleCollectionGroups": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Rule collection groups."
                      }
                    }
                  },
                  "variables": {
                    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
                    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), null())), null())]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/firewallPolicies",
                      "apiVersion": "2021-08-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": "[variables('identity')]",
                      "properties": {
                        "basePolicy": "[if(not(empty(parameters('basePolicyResourceId'))), createObject('id', parameters('basePolicyResourceId')), null())]",
                        "dnsSettings": "[if(parameters('enableProxy'), createObject('enableProxy', parameters('enableProxy'), 'servers', parameters('servers')), null())]",
                        "insights": "[if(parameters('insightsIsEnabled'), createObject('isEnabled', parameters('insightsIsEnabled'), 'logAnalyticsResources', createObject('defaultWorkspaceId', createObject('id', if(not(empty(parameters('defaultWorkspaceId'))), parameters('defaultWorkspaceId'), null())), 'workspaces', if(not(empty(parameters('workspaces'))), parameters('workspaces'), null())), 'retentionDays', parameters('retentionDays')), null())]",
                        "intrusionDetection": "[if(and(equals(parameters('tier'), 'Premium'), not(equals(parameters('mode'), 'Off'))), createObject('configuration', createObject('bypassTrafficSettings', if(not(empty(parameters('bypassTrafficSettings'))), parameters('bypassTrafficSettings'), null()), 'signatureOverrides', if(not(empty(parameters('signatureOverrides'))), parameters('signatureOverrides'), null())), 'mode', parameters('mode')), null())]",
                        "sku": {
                          "tier": "[parameters('tier')]"
                        },
                        "snat": "[if(not(empty(parameters('privateRanges'))), createObject('privateRanges', parameters('privateRanges')), null())]",
                        "threatIntelMode": "[parameters('threatIntelMode')]",
                        "threatIntelWhitelist": {
                          "fqdns": "[parameters('fqdns')]",
                          "ipAddresses": "[parameters('ipAddresses')]"
                        },
                        "transportSecurity": "[if(or(not(empty(parameters('keyVaultSecretId'))), not(empty(parameters('certificateName')))), createObject('certificateAuthority', createObject('keyVaultSecretId', if(not(empty(parameters('keyVaultSecretId'))), parameters('keyVaultSecretId'), null()), 'name', if(not(empty(parameters('certificateName'))), parameters('certificateName'), null()))), null())]"
                      }
                    },
                    {
                      "copy": {
                        "name": "firewallPolicy_ruleCollectionGroups",
                        "count": "[length(parameters('ruleCollectionGroups'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-firewallPolicy_ruleCollectionGroups-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "firewallPolicyName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('ruleCollectionGroups')[copyIndex()].name]"
                          },
                          "priority": {
                            "value": "[parameters('ruleCollectionGroups')[copyIndex()].priority]"
                          },
                          "ruleCollections": {
                            "value": "[parameters('ruleCollectionGroups')[copyIndex()].ruleCollections]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "6937283284981354550"
                            }
                          },
                          "parameters": {
                            "firewallPolicyName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Firewall Policy. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the rule collection group to deploy."
                              }
                            },
                            "priority": {
                              "type": "int",
                              "metadata": {
                                "description": "Required. Priority of the Firewall Policy Rule Collection Group resource."
                              }
                            },
                            "ruleCollections": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Group of Firewall Policy rule collections."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/firewallPolicies/ruleCollectionGroups",
                              "apiVersion": "2021-05-01",
                              "name": "[format('{0}/{1}', parameters('firewallPolicyName'), parameters('name'))]",
                              "properties": {
                                "priority": "[parameters('priority')]",
                                "ruleCollections": "[parameters('ruleCollections')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed rule collection group."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/firewallPolicies/ruleCollectionGroups', parameters('firewallPolicyName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed rule collection group."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed rule collection group."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/firewallPolicies', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the deployed firewall policy."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/firewallPolicies', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the deployed firewall policy."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group of the deployed firewall policy."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/firewallPolicies', parameters('name')), '2021-08-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId(parameters('parHubSubscriptionId'), 'Microsoft.Resources/deployments', format('deploy-hub-rg-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[and(contains(parameters('parSupportedClouds'), environment().name), parameters('parEnablePrivateDnsZones'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-hub-prvt-dns-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[parameters('parHubSubscriptionId')]",
              "resourceGroup": "[variables('varHubPDZResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetResourceGroup": {
                    "value": "[variables('varHubResourceGroupName')]"
                  },
                  "vnetSubscriptionId": {
                    "value": "[parameters('parHubSubscriptionId')]"
                  },
                  "tags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varHubShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
                  },
                  "vnetName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-vnet-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.name.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "14673883653200201451"
                    }
                  },
                  "parameters": {
                    "vnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the virtual network the private dns zones will be connected to"
                      }
                    },
                    "vnetResourceGroup": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the the resource group where the virtual network exists"
                      }
                    },
                    "vnetSubscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().subscriptionId]",
                      "metadata": {
                        "description": "The subscription id of the subscription the virtual network exists in"
                      }
                    },
                    "vnetLocation": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The location where the virtual network exists"
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "The tags that will be associated to the resources"
                      }
                    }
                  },
                  "variables": {
                    "privateDnsZones_privatelink_monitor_azure_name": "[if(equals(toLower(environment().name), toLower('AzureCloud')), 'privatelink.monitor.azure.com', 'privatelink.monitor.azure.us')]",
                    "privateDnsZones_privatelink_ods_opinsights_azure_name": "[if(equals(toLower(environment().name), toLower('AzureCloud')), 'privatelink.ods.opinsights.azure.com', 'privatelink.ods.opinsights.azure.us')]",
                    "privateDnsZones_privatelink_oms_opinsights_azure_name": "[if(equals(toLower(environment().name), toLower('AzureCloud')), 'privatelink.oms.opinsights.azure.com', 'privatelink.oms.opinsights.azure.us')]",
                    "privateDnsZones_privatelink_blob_core_cloudapi_net_name": "[if(equals(toLower(environment().name), toLower('AzureCloud')), format('privatelink.blob.{0}', environment().suffixes.storage), 'privatelink.blob.core.usgovcloudapi.net')]",
                    "privateDnsZones_privatelink_agentsvc_azure_automation_name": "[if(equals(toLower(environment().name), toLower('AzureCloud')), 'privatelink.agentsvc.azure-automation.net', 'privatelink.agentsvc.azure-automation.us')]",
                    "privateDnsZones_privatelink_aks_name": "[if(equals(toLower(environment().name), toLower('AzureCloud')), format('privatelink.{0}.azmk8s.io', parameters('vnetLocation')), format('privatelink.{0}.azmk8s.io', parameters('vnetLocation')))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2018-09-01",
                      "name": "[variables('privateDnsZones_privatelink_monitor_azure_name')]",
                      "location": "global",
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2018-09-01",
                      "name": "[variables('privateDnsZones_privatelink_oms_opinsights_azure_name')]",
                      "location": "global",
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2018-09-01",
                      "name": "[variables('privateDnsZones_privatelink_ods_opinsights_azure_name')]",
                      "location": "global",
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2018-09-01",
                      "name": "[variables('privateDnsZones_privatelink_agentsvc_azure_automation_name')]",
                      "location": "global",
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2018-09-01",
                      "name": "[variables('privateDnsZones_privatelink_blob_core_cloudapi_net_name')]",
                      "location": "global",
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2018-09-01",
                      "name": "[variables('privateDnsZones_privatelink_aks_name')]",
                      "location": "global",
                      "tags": "[parameters('tags')]"
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2018-09-01",
                      "name": "[format('{0}/{1}-link', variables('privateDnsZones_privatelink_monitor_azure_name'), variables('privateDnsZones_privatelink_monitor_azure_name'))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[resourceId(parameters('vnetSubscriptionId'), parameters('vnetResourceGroup'), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones_privatelink_monitor_azure_name'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2018-09-01",
                      "name": "[format('{0}/{1}-link', variables('privateDnsZones_privatelink_oms_opinsights_azure_name'), variables('privateDnsZones_privatelink_oms_opinsights_azure_name'))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[resourceId(parameters('vnetSubscriptionId'), parameters('vnetResourceGroup'), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', split(format('{0}/{1}-link', variables('privateDnsZones_privatelink_monitor_azure_name'), variables('privateDnsZones_privatelink_monitor_azure_name')), '/')[0], split(format('{0}/{1}-link', variables('privateDnsZones_privatelink_monitor_azure_name'), variables('privateDnsZones_privatelink_monitor_azure_name')), '/')[1])]",
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones_privatelink_oms_opinsights_azure_name'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2018-09-01",
                      "name": "[format('{0}/{1}-link', variables('privateDnsZones_privatelink_ods_opinsights_azure_name'), variables('privateDnsZones_privatelink_ods_opinsights_azure_name'))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[resourceId(parameters('vnetSubscriptionId'), parameters('vnetResourceGroup'), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones_privatelink_ods_opinsights_azure_name'))]",
                        "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', split(format('{0}/{1}-link', variables('privateDnsZones_privatelink_oms_opinsights_azure_name'), variables('privateDnsZones_privatelink_oms_opinsights_azure_name')), '/')[0], split(format('{0}/{1}-link', variables('privateDnsZones_privatelink_oms_opinsights_azure_name'), variables('privateDnsZones_privatelink_oms_opinsights_azure_name')), '/')[1])]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2018-09-01",
                      "name": "[format('{0}/{1}-link', variables('privateDnsZones_privatelink_agentsvc_azure_automation_name'), variables('privateDnsZones_privatelink_agentsvc_azure_automation_name'))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[resourceId(parameters('vnetSubscriptionId'), parameters('vnetResourceGroup'), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones_privatelink_agentsvc_azure_automation_name'))]",
                        "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', split(format('{0}/{1}-link', variables('privateDnsZones_privatelink_ods_opinsights_azure_name'), variables('privateDnsZones_privatelink_ods_opinsights_azure_name')), '/')[0], split(format('{0}/{1}-link', variables('privateDnsZones_privatelink_ods_opinsights_azure_name'), variables('privateDnsZones_privatelink_ods_opinsights_azure_name')), '/')[1])]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2018-09-01",
                      "name": "[format('{0}/{1}-link', variables('privateDnsZones_privatelink_blob_core_cloudapi_net_name'), variables('privateDnsZones_privatelink_blob_core_cloudapi_net_name'))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[resourceId(parameters('vnetSubscriptionId'), parameters('vnetResourceGroup'), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', split(format('{0}/{1}-link', variables('privateDnsZones_privatelink_agentsvc_azure_automation_name'), variables('privateDnsZones_privatelink_agentsvc_azure_automation_name')), '/')[0], split(format('{0}/{1}-link', variables('privateDnsZones_privatelink_agentsvc_azure_automation_name'), variables('privateDnsZones_privatelink_agentsvc_azure_automation_name')), '/')[1])]",
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones_privatelink_blob_core_cloudapi_net_name'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2018-09-01",
                      "name": "[format('{0}/{1}-link', variables('privateDnsZones_privatelink_aks_name'), variables('privateDnsZones_privatelink_aks_name'))]",
                      "location": "global",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[resourceId(parameters('vnetSubscriptionId'), parameters('vnetResourceGroup'), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones_privatelink_aks_name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "monitorPrivateDnsZoneId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones_privatelink_monitor_azure_name'))]"
                    },
                    "omsPrivateDnsZoneId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones_privatelink_oms_opinsights_azure_name'))]"
                    },
                    "odsPrivateDnsZoneId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones_privatelink_ods_opinsights_azure_name'))]"
                    },
                    "agentsvcPrivateDnsZoneId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones_privatelink_agentsvc_azure_automation_name'))]"
                    },
                    "storagePrivateDnsZoneId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones_privatelink_blob_core_cloudapi_net_name'))]"
                    },
                    "aksPrivateDnsZoneId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZones_privatelink_aks_name'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-subnet-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-vnet-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varHubShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-activity-logs-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[parameters('parHubSubscriptionId')]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('log-hub-sub-activity-to-{0}', parameters('parLogAnalyticsWorkspaceName'))]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('parLogAnalyticsWorkspaceResourceId')]"
                  },
                  "diagnosticLogCategoriesToEnable": {
                    "value": [
                      "Administrative",
                      "Security",
                      "ServiceHealth",
                      "Alert",
                      "Recommendation",
                      "Policy",
                      "Autoscale",
                      "ResourceHealth"
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "2841833840091048198"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "[format('{0}-ActivityLog', uniqueString(subscription().id))]",
                      "maxLength": 260,
                      "minLength": 1,
                      "metadata": {
                        "description": "Optional. Name of the ActivityLog diagnostic settings."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [],
                      "allowedValues": [
                        "Administrative",
                        "Security",
                        "ServiceHealth",
                        "Alert",
                        "Recommendation",
                        "Policy",
                        "Autoscale",
                        "ResourceHealth",
                        "Audit",
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "diagnosticMetricCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      },
                      {
                        "name": "diagnosticsMetricLogs",
                        "count": "[length(parameters('diagnosticMetricCategoriesToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricCategoriesToEnable')[copyIndex('diagnosticsMetricLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "name": "[parameters('name')]",
                      "properties": {
                        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), null(), parameters('diagnosticStorageAccountId'))]",
                        "workspaceId": "[if(empty(parameters('diagnosticWorkspaceId')), null(), parameters('diagnosticWorkspaceId'))]",
                        "eventHubAuthorizationRuleId": "[if(empty(parameters('diagnosticEventHubAuthorizationRuleId')), null(), parameters('diagnosticEventHubAuthorizationRuleId'))]",
                        "eventHubName": "[if(empty(parameters('diagnosticEventHubName')), null(), parameters('diagnosticEventHubName'))]",
                        "logs": "[if(and(and(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('diagnosticWorkspaceId'))), empty(parameters('diagnosticEventHubAuthorizationRuleId'))), empty(parameters('diagnosticEventHubName'))), null(), variables('diagnosticsLogs'))]",
                        "metrics": "[if(and(and(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('diagnosticWorkspaceId'))), empty(parameters('diagnosticEventHubAuthorizationRuleId'))), empty(parameters('diagnosticEventHubName'))), null(), variables('diagnosticsMetricLogs'))]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the diagnostic settings."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[subscriptionResourceId('Microsoft.Insights/diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the diagnostic settings."
                      }
                    },
                    "subscriptionName": {
                      "type": "string",
                      "value": "[subscription().displayName]",
                      "metadata": {
                        "description": "The name of the subscription to deploy into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-logStorage-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-vnet-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            }
          ],
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "value": "[reference(subscriptionResourceId(parameters('parHubSubscriptionId'), 'Microsoft.Resources/deployments', format('deploy-hub-rg-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.name.value]"
            },
            "resourceGroupResourceId": {
              "type": "string",
              "value": "[reference(subscriptionResourceId(parameters('parHubSubscriptionId'), 'Microsoft.Resources/deployments', format('deploy-hub-rg-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
            },
            "virtualNetworkName": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-vnet-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.name.value]"
            },
            "virtualNetworkResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-vnet-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
            },
            "subnetName": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-subnet-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.name.value]"
            },
            "subnetResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-subnet-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
            },
            "subnetAddressPrefix": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-subnet-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.subnetAddressPrefix.value]"
            },
            "networkSecurityGroupName": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-networkSecurityGroup-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.name.value]"
            },
            "networkSecurityGroupResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-networkSecurityGroup-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
            },
            "firewallPrivateIPAddress": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-FW-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.privateIp.value]"
            },
            "firewallPolicyName": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-FW-Policy-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.name.value]"
            },
            "hubStorageAccountResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-logStorage-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
            },
            "hubRouteTableResourceName": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-routeTable-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.name.value]"
            },
            "hubNetworkSecurityGroupResourceName": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-networkSecurityGroup-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.name.value]"
            },
            "azurePrivateDnsMonitoringId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubPDZResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-prvt-dns-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.monitorPrivateDnsZoneId.value]"
            },
            "azurePrivateDnsAgentsvcId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubPDZResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-prvt-dns-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.agentsvcPrivateDnsZoneId.value]"
            },
            "azurePrivateDnsOdsResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubPDZResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-prvt-dns-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.odsPrivateDnsZoneId.value]"
            },
            "azurePrivateDnsOmsResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubPDZResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-prvt-dns-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.omsPrivateDnsZoneId.value]"
            },
            "azurePrivateDnsStorageResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHubSubscriptionId'), variables('varHubPDZResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-hub-prvt-dns-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.storagePrivateDnsZoneId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(parameters('parOperationsSpoke').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-laws-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hubspoke-tags--{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('deploy-vnet-spoke-ops-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
      "subscriptionId": "[parameters('parOperationsSpoke').subscriptionId]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "parOrgPrefix": {
            "value": "[parameters('parRequired').orgPrefix]"
          },
          "parLocation": {
            "value": "[parameters('parLocation')]"
          },
          "parDeployEnvironment": {
            "value": "[parameters('parRequired').deployEnvironment]"
          },
          "parTags": {
            "value": "[reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hubspoke-tags--{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
          },
          "parOperationsNetworkSecurityGroupDiagnosticsLogs": {
            "value": "[parameters('parOperationsSpoke').networkSecurityGroupDiagnosticsLogs]"
          },
          "parOperationsSubnetAddressPrefix": {
            "value": "[parameters('parOperationsSpoke').subnetAddressPrefix]"
          },
          "parOperationsNetworkSecurityGroupRules": {
            "value": "[parameters('parOperationsSpoke').networkSecurityGroupRules]"
          },
          "parOperationsSubnetServiceEndpoints": {
            "value": "[parameters('parOperationsSpoke').subnetServiceEndpoints]"
          },
          "parOperationsVirtualNetworkAddressPrefix": {
            "value": "[parameters('parOperationsSpoke').virtualNetworkAddressPrefix]"
          },
          "parOperationsVirtualNetworkDiagnosticsLogs": {
            "value": "[parameters('parOperationsSpoke').virtualNetworkDiagnosticsLogs]"
          },
          "parOperationsVirtualNetworkDiagnosticsMetrics": {
            "value": "[parameters('parOperationsSpoke').virtualNetworkDiagnosticsMetrics]"
          },
          "parFirewallPrivateIPAddress": {
            "value": "[reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.firewallPrivateIPAddress.value]"
          },
          "parDisableBgpRoutePropagation": {
            "value": true
          },
          "parEnablePrivateDnsZones": {
            "value": "[parameters('parHub').enablePrivateDnsZones]"
          },
          "parOperationsPrivateDNSResourceIds": "[if(parameters('parHub').enablePrivateDnsZones, createObject('value', createArray(reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.azurePrivateDnsMonitoringId.value, reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.azurePrivateDnsAgentsvcId.value, reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.azurePrivateDnsOdsResourceId.value, reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.azurePrivateDnsOmsResourceId.value, reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.azurePrivateDnsStorageResourceId.value)), createObject('value', createArray()))]",
          "parLogStorageSkuName": {
            "value": "[parameters('parLogging').logStorageSkuName]"
          },
          "parOperationsStorageAccountAccess": {
            "value": "[parameters('parOperationsSpoke').storageAccountAccess]"
          },
          "parLogAnalyticsWorkspaceResourceId": {
            "value": "[reference(subscriptionResourceId(parameters('parOperationsSpoke').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-laws-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.outLogAnalyticsWorkspaceResourceId.value]"
          },
          "parLogAnalyticsWorkspaceName": {
            "value": "[reference(subscriptionResourceId(parameters('parOperationsSpoke').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-laws-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.outLogAnalyticsWorkspaceName.value]"
          },
          "parEnableResourceLocks": {
            "value": "[parameters('parOperationsSpoke').enableResourceLocks]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.13.1.58284",
              "templateHash": "14518001076371595087"
            }
          },
          "parameters": {
            "parOrgPrefix": {
              "type": "string",
              "defaultValue": "anoa",
              "metadata": {
                "description": "Prefix value which will be prepended to all resource names. Default: anoa"
              }
            },
            "parOperationsSubscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "The subscription ID for the Operations Network and resources. It defaults to the deployment subscription."
              }
            },
            "parLocation": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "The region to deploy resources into. It defaults to the deployment location."
              }
            },
            "parTags": {
              "type": "object",
              "metadata": {
                "description": "Tags"
              }
            },
            "parDeployEnvironment": {
              "type": "string",
              "metadata": {
                "description": "A suffix, 3 to 15 characters in length, to append to resource names (e.g. \"dev\", \"test\", \"prod\"). "
              },
              "maxLength": 15,
              "minLength": 3
            },
            "parDeploymentNameSuffix": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "A suffix to use for naming deployments uniquely. It defaults to the Bicep resolution of the \"utcNow()\" function."
              }
            },
            "parOperationsVirtualNetworkAddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.115.0/26",
              "metadata": {
                "description": "The CIDR Virtual Network Address Prefix for the Operations Virtual Network."
              }
            },
            "parOperationsSubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.0.115.0/27",
              "metadata": {
                "description": "The CIDR Subnet Address Prefix for the default Operations subnet. It must be in the Operations Virtual Network space."
              }
            },
            "parLogStorageSkuName": {
              "type": "string",
              "defaultValue": "Standard_GRS",
              "metadata": {
                "description": "The Storage Account SKU to use for log storage. It defaults to \"Standard_GRS\". See https://docs.microsoft.com/en-us/rest/api/storagerp/srp_sku_types for valid settings."
              }
            },
            "parOperationsVirtualNetworkDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Network Diagnostic Logs to enable for the Operations Virtual Network. See https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/diagnostic-settings?tabs=CMD#logs for valid settings."
              }
            },
            "parOperationsVirtualNetworkDiagnosticsMetrics": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Network Diagnostic Metrics to enable for the Operations Virtual Network. See https://docs.microsoft.com/en-us/azure/azure-monitor/essentials/diagnostic-settings?tabs=CMD#metrics for valid settings."
              }
            },
            "parOperationsNetworkSecurityGroupRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Network Security Group rules to apply to the Operations Virtual Network. See https://docs.microsoft.com/en-us/azure/templates/microsoft.network/networksecuritygroups/securityrules?tabs=bicep#securityrulepropertiesformat for valid settings."
              }
            },
            "parOperationsNetworkSecurityGroupDiagnosticsLogs": {
              "type": "array",
              "defaultValue": [
                "NetworkSecurityGroupEvent",
                "NetworkSecurityGroupRuleCounter"
              ],
              "metadata": {
                "description": "An array of Network Security Group diagnostic logs to apply to the Operations Virtual Network. See https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-nsg-manage-log#log-categories for valid settings."
              }
            },
            "parOperationsSubnetServiceEndpoints": {
              "type": "array",
              "defaultValue": [
                {
                  "service": "Microsoft.Storage"
                }
              ],
              "metadata": {
                "description": "An array of Service Endpoints to enable for the Operations subnet. See https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-service-endpoints-overview for valid settings."
              }
            },
            "parOperationsPrivateDNSResourceIds": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of Private DNS Resource Ids to enable for the Operations subnet."
              }
            },
            "parLogAnalyticsWorkspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics Workspace Resource Id Needed for NSG, VNet and Activity Logging"
              }
            },
            "parLogAnalyticsWorkspaceName": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics Workspace Name Needed Activity Logging"
              }
            },
            "enableActivityLogging": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable this setting if this network is on a different subscriptiom as the Hub. Will give conflict errors if on same sub as the Hub"
              }
            },
            "parRouteTableRoutes": {
              "type": "array",
              "defaultValue": [
                {
                  "name": "ops-routetable",
                  "properties": {
                    "addressPrefix": "0.0.0.0/0",
                    "nextHopIpAddress": "[parameters('parFirewallPrivateIPAddress')]",
                    "nextHopType": "VirtualAppliance"
                  }
                }
              ],
              "metadata": {
                "description": " An Array of Routes to be established within the hub route table."
              }
            },
            "parFirewallPrivateIPAddress": {
              "type": "string",
              "metadata": {
                "description": "Firewall private IP address within the hub route table."
              }
            },
            "parDisableBgpRoutePropagation": {
              "type": "bool"
            },
            "parDeployddosProtectionPlan": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Switch which allows DDOS deployment to be disabled. Default: false"
              }
            },
            "parOperationsStorageAccountAccess": {
              "type": "object",
              "metadata": {
                "description": "Account for access to Storage"
              }
            },
            "parEnableResourceLocks": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Switch which allows enable resource locks on all resources. Default: true"
              }
            },
            "parEnablePrivateDnsZones": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Switch to Enable Private DNS Zones to create for the Hub Virtual Network. See https://docs.microsoft.com/en-us/azure/templates/microsoft.network/privatednszones?tabs=bicep for valid settings."
              }
            },
            "parSupportedClouds": {
              "type": "array",
              "defaultValue": [
                "AzureCloud",
                "AzureUSGovernment"
              ]
            }
          },
          "variables": {
            "varResourceToken": "resource_token",
            "varNameToken": "name_token",
            "varNamingConvention": "[format('{0}-{1}-{2}-{3}-{4}', toLower(parameters('parOrgPrefix')), toLower(parameters('parLocation')), toLower(parameters('parDeployEnvironment')), variables('varNameToken'), toLower(variables('varResourceToken')))]",
            "varNetworkSecurityGroupNamingConvention": "[replace(variables('varNamingConvention'), variables('varResourceToken'), 'nsg')]",
            "varResourceGroupNamingConvention": "[replace(variables('varNamingConvention'), variables('varResourceToken'), 'rg')]",
            "varStorageAccountNamingConvention": "[toLower(format('{0}st{1}unique_storage_token', parameters('parOrgPrefix'), variables('varNameToken')))]",
            "subnetNamingConvention": "[replace(variables('varNamingConvention'), variables('varResourceToken'), 'snet')]",
            "virtualNetworkNamingConvention": "[replace(variables('varNamingConvention'), variables('varResourceToken'), 'vnet')]",
            "varDdosNamingConvention": "[replace(variables('varNamingConvention'), variables('varResourceToken'), 'ddos')]",
            "varOperationsName": "operations",
            "varOperationsShortName": "ops",
            "varOperationsResourceGroupName": "[replace(variables('varResourceGroupNamingConvention'), variables('varNameToken'), variables('varOperationsName'))]",
            "varOperationsLogStorageAccountShortName": "[replace(variables('varStorageAccountNamingConvention'), variables('varNameToken'), variables('varOperationsShortName'))]",
            "varOperationsLogStorageAccountUniqueName": "[replace(variables('varOperationsLogStorageAccountShortName'), 'unique_storage_token', uniqueString(parameters('parOperationsSubscriptionId'), parameters('parLocation'), parameters('parDeployEnvironment'), parameters('parOrgPrefix')))]",
            "varOperationsLogStorageAccountName": "[take(variables('varOperationsLogStorageAccountUniqueName'), 23)]",
            "varOperationsVirtualNetworkName": "[replace(variables('virtualNetworkNamingConvention'), variables('varNameToken'), variables('varOperationsName'))]",
            "varOperationsNetworkSecurityGroupName": "[replace(variables('varNetworkSecurityGroupNamingConvention'), variables('varNameToken'), variables('varOperationsName'))]",
            "varOperationsSubnetName": "[replace(variables('subnetNamingConvention'), variables('varNameToken'), variables('varOperationsName'))]",
            "opsddosName": "[replace(variables('varDdosNamingConvention'), variables('varNameToken'), variables('varOperationsName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-{0}-tags-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "tags": {
                    "value": "[parameters('parTags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "216182755991536021"
                    }
                  },
                  "parameters": {
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags for the resource group. If not provided, removes existing tags."
                      }
                    },
                    "onlyUpdate": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Instead of overwriting the existing tags, combine them with the new tags."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the Resource Group to assign the tags to. If no Resource Group name is provided, and Subscription ID is provided, the module deploys at subscription level, therefore assigns the provided tags to the subscription."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().id]",
                      "metadata": {
                        "description": "Optional. Subscription ID of the subscription to assign the tags to. If no Resource Group name is provided, the module deploys at subscription level, therefore assigns the provided tags to the subscription."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Tags-Sub', deployment().name)]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "onlyUpdate": {
                            "value": "[parameters('onlyUpdate')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "1405711280777017718"
                            }
                          },
                          "parameters": {
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags for the resource group. If not provided, removes existing tags."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the tags resource."
                              }
                            },
                            "onlyUpdate": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Instead of overwriting the existing tags, combine them with the new tags."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/tags",
                              "apiVersion": "2019-10-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "tags": "[if(parameters('onlyUpdate'), union(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2020-10-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]"
                              },
                              "dependsOn": [
                                "[subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name))]"
                              ]
                            },
                            {
                              "condition": "[parameters('onlyUpdate')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-ReadTags', deployment().name)]",
                              "location": "[deployment().location]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "12771816053208228273"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the tags resource."
                                      }
                                    }
                                  },
                                  "resources": [],
                                  "outputs": {
                                    "existingTags": {
                                      "type": "object",
                                      "value": "[if(contains(reference(subscriptionResourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01'), 'tags'), reference(subscriptionResourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01').tags, createObject())]",
                                      "metadata": {
                                        "description": "Tags currently applied to the subscription level"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the tags resource."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "value": "[if(parameters('onlyUpdate'), union(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2020-10-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]",
                              "metadata": {
                                "description": "The applied tags."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[subscriptionResourceId('Microsoft.Resources/tags', parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the applied tags."
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId'))))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Tags-RG', deployment().name)]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "onlyUpdate": {
                            "value": "[parameters('onlyUpdate')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "3625051557808284647"
                            }
                          },
                          "parameters": {
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags for the resource group. If not provided, removes existing tags."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the tags resource."
                              }
                            },
                            "onlyUpdate": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Instead of overwriting the existing tags, combine them with the new tags."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/tags",
                              "apiVersion": "2019-10-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "tags": "[if(parameters('onlyUpdate'), union(reference(resourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2020-10-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name))]"
                              ]
                            },
                            {
                              "condition": "[parameters('onlyUpdate')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-ReadTags', deployment().name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "10085828695555767678"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the tags resource."
                                      }
                                    }
                                  },
                                  "resources": [],
                                  "outputs": {
                                    "existingTags": {
                                      "type": "object",
                                      "value": "[if(contains(reference(resourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01'), 'tags'), reference(resourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01').tags, createObject())]",
                                      "metadata": {
                                        "description": "Tags currently applied to the subscription level"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the tags resource."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Resources/tags', parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the applied tags."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the resource group the tags were applied to."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "value": "[if(parameters('onlyUpdate'), union(reference(resourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2020-10-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]",
                              "metadata": {
                                "description": "The applied tags."
                              }
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[if(and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-Tags-RG', deployment().name)), '2020-10-01').outputs.name.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-Tags-Sub', deployment().name)), '2020-10-01').outputs.name.value)]",
                      "metadata": {
                        "description": "The name of the tags resource."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "value": "[if(and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-Tags-RG', deployment().name)), '2020-10-01').outputs.tags.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-Tags-Sub', deployment().name)), '2020-10-01').outputs.tags.value)]",
                      "metadata": {
                        "description": "The applied tags."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[if(and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-Tags-RG', deployment().name)), '2020-10-01').outputs.resourceId.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-Tags-Sub', deployment().name)), '2020-10-01').outputs.resourceId.value)]",
                      "metadata": {
                        "description": "The resource ID of the applied tags."
                      }
                    }
                  }
                }
              },
              "metadata": {
                "description": "Resource group tags"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-{0}-rg-{1}', variables('varOperationsShortName'), parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[parameters('parOperationsSubscriptionId')]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varOperationsResourceGroupName')]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "tags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "6154872068177151399"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Resource Group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[deployment().location]",
                      "metadata": {
                        "description": "Optional. Location of the Resource Group. It uses the deployment's location when not provided."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the storage account resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/resourceGroups",
                      "apiVersion": "2019-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {}
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-{1}-Lock', uniqueString(deployment().name, parameters('location')), parameters('lock'))]",
                      "resourceGroup": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "level": {
                            "value": "[parameters('lock')]"
                          },
                          "name": {
                            "value": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "16437344464782770871"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}-lock', parameters('level'))]",
                              "metadata": {
                                "description": "Optional. The name of the lock."
                              }
                            },
                            "level": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Set lock level."
                              },
                              "allowedValues": [
                                "CanNotDelete",
                                "ReadOnly"
                              ]
                            },
                            "notes": {
                              "type": "string",
                              "defaultValue": "[if(equals(parameters('level'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]",
                              "metadata": {
                                "description": "Optional. The decription attached to the lock."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "level": "[parameters('level')]",
                                "notes": "[parameters('notes')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the lock."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Authorization/locks', parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the lock."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the resource group name the lock was applied to."
                              }
                            },
                            "scope": {
                              "type": "string",
                              "value": "[resourceGroup().id]",
                              "metadata": {
                                "description": "The scope this lock applies to."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "resourceGroup_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-RG-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "resourceGroup": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "12032035567026887377"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the resource group."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the resource group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name')), '2019-05-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-{0}-logStorage-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "resourceGroup": "[variables('varOperationsResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varOperationsLogStorageAccountName')]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "storageAccountSku": {
                    "value": "[parameters('parLogStorageSkuName')]"
                  },
                  "tags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
                  },
                  "roleAssignments": "[if(parameters('parOperationsStorageAccountAccess').enableRoleAssignmentForStorageAccount, createObject('value', createArray(createObject('principalIds', parameters('parOperationsStorageAccountAccess').principalIds, 'roleDefinitionIdOrName', parameters('parOperationsStorageAccountAccess').roleDefinitionIdOrName))), createObject('value', createArray()))]",
                  "lock": "[if(parameters('parEnableResourceLocks'), createObject('value', 'CanNotDelete'), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "845876767253618321"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Storage Account."
                      },
                      "maxLength": 24
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "systemAssignedIdentity": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enables system assigned managed identity on the resource."
                      }
                    },
                    "userAssignedIdentities": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The ID(s) to assign to the resource."
                      }
                    },
                    "storageAccountKind": {
                      "type": "string",
                      "defaultValue": "StorageV2",
                      "metadata": {
                        "description": "Optional. Type of Storage Account to create."
                      },
                      "allowedValues": [
                        "Storage",
                        "StorageV2",
                        "BlobStorage",
                        "FileStorage",
                        "BlockBlobStorage"
                      ]
                    },
                    "storageAccountSku": {
                      "type": "string",
                      "defaultValue": "Standard_GRS",
                      "metadata": {
                        "description": "Optional. Storage Account Sku Name."
                      },
                      "allowedValues": [
                        "Standard_LRS",
                        "Standard_GRS",
                        "Standard_RAGRS",
                        "Standard_ZRS",
                        "Premium_LRS",
                        "Premium_ZRS",
                        "Standard_GZRS",
                        "Standard_RAGZRS"
                      ]
                    },
                    "storageAccountAccessTier": {
                      "type": "string",
                      "defaultValue": "Hot",
                      "metadata": {
                        "description": "Optional. Storage Account Access Tier."
                      },
                      "allowedValues": [
                        "Hot",
                        "Cool"
                      ]
                    },
                    "azureFilesIdentityBasedAuthentication": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Provides the identity based authentication settings for Azure Files."
                      }
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                      }
                    },
                    "managementPolicyRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The Storage Account ManagementPolicies Rules."
                      }
                    },
                    "networkAcls": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Networks ACLs, this value contains IPs to whitelist and/or Subnet information. For security reasons, it is recommended to set the DefaultAction Deny."
                      }
                    },
                    "requireInfrastructureEncryption": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. A Boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest. For security reasons, it is recommended to set it to true."
                      }
                    },
                    "blobServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Blob service and containers to deploy."
                      }
                    },
                    "fileServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. File service and shares to deploy."
                      }
                    },
                    "queueServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Queue service and queues to create."
                      }
                    },
                    "tableServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Table service and tables to create."
                      }
                    },
                    "allowBlobPublicAccess": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether public access is enabled for all blobs or containers in the storage account. For security reasons, it is recommended to set it to false."
                      }
                    },
                    "minimumTlsVersion": {
                      "type": "string",
                      "defaultValue": "TLS1_2",
                      "metadata": {
                        "description": "Optional. Set the minimum TLS version on request to storage."
                      },
                      "allowedValues": [
                        "TLS1_0",
                        "TLS1_1",
                        "TLS1_2"
                      ]
                    },
                    "enableHierarchicalNamespace": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If true, enables Hierarchical Namespace for the storage account."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "",
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
                      }
                    },
                    "supportsHttpsTrafficOnly": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Allows HTTPS traffic only to storage service if sets to true."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "Transaction"
                      ],
                      "allowedValues": [
                        "Transaction"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "cMKKeyVaultResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The resource ID of a key vault to reference a customer managed key for encryption from."
                      }
                    },
                    "cMKKeyName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the customer managed key to use for encryption. Cannot be deployed together with the parameter 'systemAssignedIdentity' enabled."
                      }
                    },
                    "cMKUserAssignedIdentityResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Conditional. User assigned identity to use when fetching the customer managed key. Required if 'cMKKeyName' is not empty."
                      }
                    },
                    "cMKKeyVersion": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, latest is used."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ],
                    "supportsBlobService": "[or(or(or(equals(parameters('storageAccountKind'), 'BlockBlobStorage'), equals(parameters('storageAccountKind'), 'BlobStorage')), equals(parameters('storageAccountKind'), 'StorageV2')), equals(parameters('storageAccountKind'), 'Storage'))]",
                    "supportsFileService": "[or(or(equals(parameters('storageAccountKind'), 'FileStorage'), equals(parameters('storageAccountKind'), 'StorageV2')), equals(parameters('storageAccountKind'), 'Storage'))]",
                    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
                    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), createObject())), createObject())]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-09-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "kind": "[parameters('storageAccountKind')]",
                      "sku": {
                        "name": "[parameters('storageAccountSku')]"
                      },
                      "identity": "[variables('identity')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "encryption": {
                          "keySource": "[if(not(empty(parameters('cMKKeyName'))), 'Microsoft.Keyvault', 'Microsoft.Storage')]",
                          "services": {
                            "blob": "[if(variables('supportsBlobService'), createObject('enabled', true()), null())]",
                            "file": "[if(variables('supportsFileService'), createObject('enabled', true()), null())]",
                            "table": {
                              "enabled": true
                            },
                            "queue": {
                              "enabled": true
                            }
                          },
                          "requireInfrastructureEncryption": "[if(not(equals(parameters('storageAccountKind'), 'Storage')), parameters('requireInfrastructureEncryption'), null())]",
                          "keyvaultproperties": "[if(not(empty(parameters('cMKKeyName'))), createObject('keyname', parameters('cMKKeyName'), 'keyvaulturi', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('cMKKeyVaultResourceId'), '/')[2], split(parameters('cMKKeyVaultResourceId'), '/')[4]), 'Microsoft.KeyVault/vaults', last(split(parameters('cMKKeyVaultResourceId'), '/'))), '2021-06-01-preview').vaultUri, 'keyversion', if(not(empty(parameters('cMKKeyVersion'))), parameters('cMKKeyVersion'), null())), null())]",
                          "identity": "[if(not(empty(parameters('cMKKeyName'))), createObject('userAssignedIdentity', parameters('cMKUserAssignedIdentityResourceId')), null())]"
                        },
                        "accessTier": "[if(not(equals(parameters('storageAccountKind'), 'Storage')), parameters('storageAccountAccessTier'), null())]",
                        "supportsHttpsTrafficOnly": "[parameters('supportsHttpsTrafficOnly')]",
                        "isHnsEnabled": "[if(parameters('enableHierarchicalNamespace'), parameters('enableHierarchicalNamespace'), null())]",
                        "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                        "networkAcls": "[if(not(empty(parameters('networkAcls'))), createObject('bypass', if(contains(parameters('networkAcls'), 'bypass'), parameters('networkAcls').bypass, null()), 'defaultAction', if(contains(parameters('networkAcls'), 'defaultAction'), parameters('networkAcls').defaultAction, null()), 'virtualNetworkRules', if(contains(parameters('networkAcls'), 'virtualNetworkRules'), parameters('networkAcls').virtualNetworkRules, createArray()), 'ipRules', if(contains(parameters('networkAcls'), 'ipRules'), parameters('networkAcls').ipRules, createArray())), null())]",
                        "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
                        "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkAcls'))), 'Disabled', null()))]",
                        "azureFilesIdentityBasedAuthentication": "[if(not(empty(parameters('azureFilesIdentityBasedAuthentication'))), parameters('azureFilesIdentityBasedAuthentication'), null())]"
                      }
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "storageAccount_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "2827160161514534534"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Id of the delegated managed identity resource."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('managementPolicyRules')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-ManagementPolicies', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "rules": {
                            "value": "[parameters('managementPolicyRules')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "648447714037160345"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the storage container to deploy."
                              }
                            },
                            "rules": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The Storage Account ManagementPolicies Rules."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[not(empty(parameters('rules')))]",
                              "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                              "apiVersion": "2019-06-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "policy": {
                                  "rules": "[parameters('rules')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The resource ID of the deployed management policy."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed management policy."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed management policy."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('blobServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-BlobServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "containers": "[if(contains(parameters('blobServices'), 'containers'), createObject('value', parameters('blobServices').containers), createObject('value', createArray()))]",
                          "automaticSnapshotPolicyEnabled": "[if(contains(parameters('blobServices'), 'automaticSnapshotPolicyEnabled'), createObject('value', parameters('blobServices').automaticSnapshotPolicyEnabled), createObject('value', false()))]",
                          "deleteRetentionPolicy": "[if(contains(parameters('blobServices'), 'deleteRetentionPolicy'), createObject('value', parameters('blobServices').deleteRetentionPolicy), createObject('value', true()))]",
                          "deleteRetentionPolicyDays": "[if(contains(parameters('blobServices'), 'deleteRetentionPolicyDays'), createObject('value', parameters('blobServices').deleteRetentionPolicyDays), createObject('value', 7))]",
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('blobServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('blobServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('blobServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('blobServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('blobServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('blobServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('blobServices'), 'diagnosticEventHubName'), createObject('value', parameters('blobServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('blobServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('blobServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('blobServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('blobServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('blobServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('blobServices').diagnosticWorkspaceId), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "2492256184813709438"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the blob service."
                              }
                            },
                            "deleteRetentionPolicy": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates whether DeleteRetentionPolicy is enabled for the Blob service."
                              }
                            },
                            "deleteRetentionPolicyDays": {
                              "type": "int",
                              "defaultValue": 7,
                              "metadata": {
                                "description": "Optional. Indicates the number of days that the deleted blob should be retained. The minimum specified value can be 1 and the maximum value can be 365."
                              }
                            },
                            "automaticSnapshotPolicyEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Automatic Snapshot is enabled if set to true."
                              }
                            },
                            "containers": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Blob containers to create."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/blobServices",
                              "apiVersion": "2021-06-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "deleteRetentionPolicy": {
                                  "enabled": "[parameters('deleteRetentionPolicy')]",
                                  "days": "[parameters('deleteRetentionPolicyDays')]"
                                },
                                "automaticSnapshotPolicyEnabled": "[parameters('automaticSnapshotPolicyEnabled')]"
                              }
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "blobServices_container",
                                "count": "[length(parameters('containers'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Container-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "blobServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('containers')[copyIndex()].name]"
                                  },
                                  "publicAccess": "[if(contains(parameters('containers')[copyIndex()], 'publicAccess'), createObject('value', parameters('containers')[copyIndex()].publicAccess), createObject('value', 'None'))]",
                                  "roleAssignments": "[if(contains(parameters('containers')[copyIndex()], 'roleAssignments'), createObject('value', parameters('containers')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
                                  "immutabilityPolicyProperties": "[if(contains(parameters('containers')[copyIndex()], 'immutabilityPolicyProperties'), createObject('value', parameters('containers')[copyIndex()].immutabilityPolicyProperties), createObject('value', createObject()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "2456554778800083860"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      },
                                      "maxLength": 24
                                    },
                                    "blobServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. Name of the blob service."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the storage container to deploy."
                                      }
                                    },
                                    "immutabilityPolicyName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. Name of the immutable policy."
                                      }
                                    },
                                    "publicAccess": {
                                      "type": "string",
                                      "defaultValue": "None",
                                      "metadata": {
                                        "description": "Optional. Specifies whether data in the container may be accessed publicly and the level of access."
                                      },
                                      "allowedValues": [
                                        "Container",
                                        "Blob",
                                        "None"
                                      ]
                                    },
                                    "immutabilityPolicyProperties": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Configure immutability policy."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                                      "apiVersion": "2021-09-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]",
                                      "properties": {
                                        "publicAccess": "[parameters('publicAccess')]"
                                      }
                                    },
                                    {
                                      "condition": "[not(empty(parameters('immutabilityPolicyProperties')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[parameters('immutabilityPolicyName')]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "storageAccountName": {
                                            "value": "[parameters('storageAccountName')]"
                                          },
                                          "blobServicesName": {
                                            "value": "[parameters('blobServicesName')]"
                                          },
                                          "containerName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "immutabilityPeriodSinceCreationInDays": "[if(contains(parameters('immutabilityPolicyProperties'), 'immutabilityPeriodSinceCreationInDays'), createObject('value', parameters('immutabilityPolicyProperties').immutabilityPeriodSinceCreationInDays), createObject('value', 365))]",
                                          "allowProtectedAppendWrites": "[if(contains(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWrites'), createObject('value', parameters('immutabilityPolicyProperties').allowProtectedAppendWrites), createObject('value', true()))]"
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.13.1.58284",
                                              "templateHash": "12947603763516415104"
                                            }
                                          },
                                          "parameters": {
                                            "storageAccountName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                              },
                                              "maxLength": 24
                                            },
                                            "blobServicesName": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent blob service. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "containerName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent container to apply the policy to. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. Name of the immutable policy."
                                              }
                                            },
                                            "immutabilityPeriodSinceCreationInDays": {
                                              "type": "int",
                                              "defaultValue": 365,
                                              "metadata": {
                                                "description": "Optional. The immutability period for the blobs in the container since the policy creation, in days."
                                              }
                                            },
                                            "allowProtectedAppendWrites": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies",
                                              "apiVersion": "2019-06-01",
                                              "name": "[format('{0}/{1}/{2}/{3}', parameters('storageAccountName'), parameters('blobServicesName'), parameters('containerName'), parameters('name'))]",
                                              "properties": {
                                                "immutabilityPeriodSinceCreationInDays": "[parameters('immutabilityPeriodSinceCreationInDays')]",
                                                "allowProtectedAppendWrites": "[parameters('allowProtectedAppendWrites')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "value": "[parameters('name')]",
                                              "metadata": {
                                                "description": "The name of the deployed immutability policy."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies', parameters('storageAccountName'), parameters('blobServicesName'), parameters('containerName'), parameters('name'))]",
                                              "metadata": {
                                                "description": "The resource ID of the deployed immutability policy."
                                              }
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "value": "[resourceGroup().name]",
                                              "metadata": {
                                                "description": "The resource group of the deployed immutability policy."
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "copy": {
                                        "name": "container_roleAssignments",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.13.1.58284",
                                              "templateHash": "17770721562698605711"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the principals to assign the role to."
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The description of the role assignment."
                                              }
                                            },
                                            "condition": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                                              }
                                            },
                                            "conditionVersion": {
                                              "type": "string",
                                              "defaultValue": "2.0",
                                              "allowedValues": [
                                                "2.0"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Version of the condition."
                                              }
                                            },
                                            "delegatedManagedIdentityResourceId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Id of the delegated managed identity resource."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Desktop Virtualization Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a959dbd1-f747-45e3-8ba6-dd80f235f97c')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                                              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                                              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                                              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                                              "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                                              "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                                              "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                                              "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                                              "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2])]",
                                              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed container."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed container."
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed container."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed blob service."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed blob service."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the deployed blob service."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('fileServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-FileServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('fileServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('fileServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('fileServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('fileServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('fileServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('fileServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('fileServices'), 'diagnosticEventHubName'), createObject('value', parameters('fileServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('fileServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('fileServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('fileServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('fileServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "protocolSettings": "[if(contains(parameters('fileServices'), 'protocolSettings'), createObject('value', parameters('fileServices').protocolSettings), createObject('value', createObject()))]",
                          "shareDeleteRetentionPolicy": "[if(contains(parameters('fileServices'), 'shareDeleteRetentionPolicy'), createObject('value', parameters('fileServices').shareDeleteRetentionPolicy), createObject('value', createObject('enabled', true(), 'days', 7)))]",
                          "shares": "[if(contains(parameters('fileServices'), 'shares'), createObject('value', parameters('fileServices').shares), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('fileServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('fileServices').diagnosticWorkspaceId), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "4217098231629340516"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the file service."
                              }
                            },
                            "protocolSettings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Protocol settings for file service."
                              }
                            },
                            "shareDeleteRetentionPolicy": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": true,
                                "days": 7
                              },
                              "metadata": {
                                "description": "Optional. The service properties for soft delete."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "shares": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. File shares to create."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/fileServices",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "protocolSettings": "[parameters('protocolSettings')]",
                                "shareDeleteRetentionPolicy": "[parameters('shareDeleteRetentionPolicy')]"
                              }
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "fileServices_shares",
                                "count": "[length(parameters('shares'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-shares-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "fileServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('shares')[copyIndex()].name]"
                                  },
                                  "enabledProtocols": "[if(contains(parameters('shares')[copyIndex()], 'enabledProtocols'), createObject('value', parameters('shares')[copyIndex()].enabledProtocols), createObject('value', 'SMB'))]",
                                  "rootSquash": "[if(contains(parameters('shares')[copyIndex()], 'rootSquash'), createObject('value', parameters('shares')[copyIndex()].rootSquash), createObject('value', 'NoRootSquash'))]",
                                  "sharedQuota": "[if(contains(parameters('shares')[copyIndex()], 'sharedQuota'), createObject('value', parameters('shares')[copyIndex()].sharedQuota), createObject('value', 5120))]",
                                  "roleAssignments": "[if(contains(parameters('shares')[copyIndex()], 'roleAssignments'), createObject('value', parameters('shares')[copyIndex()].roleAssignments), createObject('value', createArray()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "7898615982963373812"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      },
                                      "maxLength": 24
                                    },
                                    "fileServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent file service. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the file share to create."
                                      }
                                    },
                                    "sharedQuota": {
                                      "type": "int",
                                      "defaultValue": 5120,
                                      "metadata": {
                                        "description": "Optional. The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5TB (5120). For Large File Shares, the maximum size is 102400."
                                      }
                                    },
                                    "enabledProtocols": {
                                      "type": "string",
                                      "defaultValue": "SMB",
                                      "metadata": {
                                        "description": "Optional. The authentication protocol that is used for the file share. Can only be specified when creating a share."
                                      },
                                      "allowedValues": [
                                        "NFS",
                                        "SMB"
                                      ]
                                    },
                                    "rootSquash": {
                                      "type": "string",
                                      "defaultValue": "NoRootSquash",
                                      "metadata": {
                                        "description": "Optional. Permissions for NFS file shares are enforced by the client OS rather than the Azure Files service. Toggling the root squash behavior reduces the rights of the root user for NFS shares."
                                      },
                                      "allowedValues": [
                                        "AllSquash",
                                        "NoRootSquash",
                                        "RootSquash"
                                      ]
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                                      "apiVersion": "2021-08-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]",
                                      "properties": {
                                        "shareQuota": "[parameters('sharedQuota')]",
                                        "rootSquash": "[if(equals(parameters('enabledProtocols'), 'NFS'), parameters('rootSquash'), null())]",
                                        "enabledProtocols": "[parameters('enabledProtocols')]"
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "fileShare_roleAssignments",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.13.1.58284",
                                              "templateHash": "5820655604316332903"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the principals to assign the role to."
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The description of the role assignment."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                              "Storage Account Backup Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                                              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                                              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                                              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                                              "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                                              "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                                              "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                                              "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                                              "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}/shares/{2}', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2])]",
                                              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed file share."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed file share."
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed file share."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed file share service."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed file share service."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed file share service."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('queueServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-QueueServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('queueServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('queueServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('queueServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('queueServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('queueServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('queueServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('queueServices'), 'diagnosticEventHubName'), createObject('value', parameters('queueServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('queueServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('queueServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('queueServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('queueServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "queues": "[if(contains(parameters('queueServices'), 'queues'), createObject('value', parameters('queueServices').queues), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('queueServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('queueServices').diagnosticWorkspaceId), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "17554831229879274483"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the queue service."
                              }
                            },
                            "queues": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Queues to create."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/queueServices",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {}
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "queueServices_queues",
                                "count": "[length(parameters('queues'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Queue-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "queueServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('queues')[copyIndex()].name]"
                                  },
                                  "metadata": "[if(contains(parameters('queues')[copyIndex()], 'metadata'), createObject('value', parameters('queues')[copyIndex()].metadata), createObject('value', createObject()))]",
                                  "roleAssignments": "[if(contains(parameters('queues')[copyIndex()], 'roleAssignments'), createObject('value', parameters('queues')[copyIndex()].roleAssignments), createObject('value', createArray()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "12540260969676082467"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      },
                                      "maxLength": 24
                                    },
                                    "queueServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent queue service. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the storage queue to deploy."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Required. A name-value pair that represents queue metadata."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
                                      "apiVersion": "2019-06-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]"
                                      }
                                    },
                                    {
                                      "copy": {
                                        "name": "queue_roleAssignments",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-Rbac-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.13.1.58284",
                                              "templateHash": "9678424203152711384"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the principals to assign the role to."
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The description of the role assignment."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Avere Cluster Create": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7b1b19a-0e83-4fe5-935c-faaefbfd18c3')]",
                                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                                              "Azure Service Deploy Release Management Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21d96096-b162-414a-8302-d8354f9d91b2')]",
                                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                                              "CAL-Custom-Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7b266cd7-0bba-4ae2-8423-90ede5e1e898')]",
                                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                                              "Dsms Role (deprecated)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b91f4c0b-46e3-47bb-a242-eecfe23b3b5b')]",
                                              "Dsms Role (do not use)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7aff565e-6c55-448d-83db-ccf482c6da2f')]",
                                              "GenevaWarmPathResourceContributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9f15f5f5-77bd-413a-aa88-4b9c68b1e7bc')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Logic App Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '87a39d53-fc1b-424a-814c-f7e04687dc9e')]",
                                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                                              "masterreader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a48d7796-14b4-4889-afef-fbb65a93e5a2')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                                              "Storage Account Backup Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}/queues/{2}', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2])]",
                                              "name": "[guid(resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[0], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[1], split(format('{0}/{1}/{2}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10], split(parameters('resourceId'), '/')[12]), '/')[2]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed queue."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), parameters('queueServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed queue."
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed queue."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed file share service."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed file share service."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed file share service."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('tableServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Storage-TableServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "diagnosticLogsRetentionInDays": "[if(contains(parameters('tableServices'), 'diagnosticLogsRetentionInDays'), createObject('value', parameters('tableServices').diagnosticLogsRetentionInDays), createObject('value', 365))]",
                          "diagnosticStorageAccountId": "[if(contains(parameters('tableServices'), 'diagnosticStorageAccountId'), createObject('value', parameters('tableServices').diagnosticStorageAccountId), createObject('value', ''))]",
                          "diagnosticEventHubAuthorizationRuleId": "[if(contains(parameters('tableServices'), 'diagnosticEventHubAuthorizationRuleId'), createObject('value', parameters('tableServices').diagnosticEventHubAuthorizationRuleId), createObject('value', ''))]",
                          "diagnosticEventHubName": "[if(contains(parameters('tableServices'), 'diagnosticEventHubName'), createObject('value', parameters('tableServices').diagnosticEventHubName), createObject('value', ''))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('tableServices'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('tableServices').diagnosticLogCategoriesToEnable), createObject('value', createArray()))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('tableServices'), 'diagnosticMetricsToEnable'), createObject('value', parameters('tableServices').diagnosticMetricsToEnable), createObject('value', createArray()))]",
                          "tables": "[if(contains(parameters('tableServices'), 'tables'), createObject('value', parameters('tableServices').tables), createObject('value', createArray()))]",
                          "diagnosticWorkspaceId": "[if(contains(parameters('tableServices'), 'diagnosticWorkspaceId'), createObject('value', parameters('tableServices').diagnosticWorkspaceId), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "4879914104814210714"
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              },
                              "maxLength": 24
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the table service."
                              }
                            },
                            "tables": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. tables to create."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "allowedValues": [
                                "StorageRead",
                                "StorageWrite",
                                "StorageDelete"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "Transaction"
                              ],
                              "allowedValues": [
                                "Transaction"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/tableServices",
                              "apiVersion": "2021-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {}
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "tableServices_tables",
                                "count": "[length(parameters('tables'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Table-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "tableServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('tables')[copyIndex()]]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "15504629824916397824"
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      },
                                      "maxLength": 24
                                    },
                                    "tableServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent table service. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the table."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
                                      "apiVersion": "2021-06-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('tableServicesName'), parameters('name'))]"
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed file share service."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices/tables', parameters('storageAccountName'), parameters('tableServicesName'), parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed file share service."
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed file share service."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the deployed table service."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the deployed table service."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group of the deployed table service."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the deployed storage account."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the deployed storage account."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group of the deployed storage account."
                      }
                    },
                    "primaryBlobEndpoint": {
                      "type": "string",
                      "value": "[if(and(not(empty(parameters('blobServices'))), contains(parameters('blobServices'), 'containers')), reference(format('Microsoft.Storage/storageAccounts/{0}', parameters('name')), '2019-04-01').primaryEndpoints.blob, '')]",
                      "metadata": {
                        "description": "The primary blob endpoint reference if blob services are deployed."
                      }
                    },
                    "systemAssignedPrincipalId": {
                      "type": "string",
                      "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2021-09-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2021-09-01', 'full').identity.principalId, '')]",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2021-09-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId(parameters('parOperationsSubscriptionId'), 'Microsoft.Resources/deployments', format('deploy-{0}-rg-{1}', variables('varOperationsShortName'), parameters('parDeploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-{0}-networkSecurityGroup-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "resourceGroup": "[variables('varOperationsResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varOperationsNetworkSecurityGroupName')]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "tags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
                  },
                  "securityRules": {
                    "value": "[parameters('parOperationsNetworkSecurityGroupRules')]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('parLogAnalyticsWorkspaceResourceId')]"
                  },
                  "diagnosticStorageAccountId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varOperationsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-{0}-logStorage-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
                  },
                  "diagnosticLogCategoriesToEnable": {
                    "value": "[parameters('parOperationsNetworkSecurityGroupDiagnosticsLogs')]"
                  },
                  "lock": "[if(parameters('parEnableResourceLocks'), createObject('value', 'CanNotDelete'), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "7363888954384305308"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Network Security Group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "securityRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the NSG resource."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "NetworkSecurityGroupEvent",
                        "NetworkSecurityGroupRuleCounter"
                      ],
                      "allowedValues": [
                        "NetworkSecurityGroupEvent",
                        "NetworkSecurityGroupRuleCounter"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2021-08-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "securityRules",
                            "count": "[length(parameters('securityRules'))]",
                            "input": {
                              "name": "[parameters('securityRules')[copyIndex('securityRules')].name]",
                              "properties": {
                                "protocol": "[parameters('securityRules')[copyIndex('securityRules')].properties.protocol]",
                                "access": "[parameters('securityRules')[copyIndex('securityRules')].properties.access]",
                                "priority": "[parameters('securityRules')[copyIndex('securityRules')].properties.priority]",
                                "direction": "[parameters('securityRules')[copyIndex('securityRules')].properties.direction]",
                                "description": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'description'), parameters('securityRules')[copyIndex('securityRules')].properties.description, '')]",
                                "sourcePortRange": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourcePortRange'), parameters('securityRules')[copyIndex('securityRules')].properties.sourcePortRange, '')]",
                                "sourcePortRanges": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourcePortRanges'), parameters('securityRules')[copyIndex('securityRules')].properties.sourcePortRanges, createArray())]",
                                "destinationPortRange": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationPortRange'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationPortRange, '')]",
                                "destinationPortRanges": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationPortRanges'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationPortRanges, createArray())]",
                                "sourceAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefix'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix, '')]",
                                "destinationAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefix'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix, '')]",
                                "sourceAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefixes'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceAddressPrefixes, createArray())]",
                                "destinationAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefixes'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes, createArray())]",
                                "sourceApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceApplicationSecurityGroups'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceApplicationSecurityGroups, createArray())]",
                                "destinationApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationApplicationSecurityGroups'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationApplicationSecurityGroups, createArray())]"
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "networkSecurityGroup_securityRules",
                        "count": "[length(parameters('securityRules'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-securityRule-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('securityRules')[copyIndex()].name]"
                          },
                          "networkSecurityGroupName": {
                            "value": "[parameters('name')]"
                          },
                          "protocol": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.protocol]"
                          },
                          "access": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.access]"
                          },
                          "priority": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.priority]"
                          },
                          "direction": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.direction]"
                          },
                          "description": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'description'), createObject('value', parameters('securityRules')[copyIndex()].properties.description), createObject('value', ''))]",
                          "sourcePortRange": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourcePortRange'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourcePortRange), createObject('value', ''))]",
                          "sourcePortRanges": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourcePortRanges'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourcePortRanges), createObject('value', createArray()))]",
                          "destinationPortRange": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationPortRange'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationPortRange), createObject('value', ''))]",
                          "destinationPortRanges": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationPortRanges'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationPortRanges), createObject('value', createArray()))]",
                          "sourceAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceAddressPrefix'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceAddressPrefix), createObject('value', ''))]",
                          "destinationAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationAddressPrefix'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationAddressPrefix), createObject('value', ''))]",
                          "sourceAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceAddressPrefixes'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceAddressPrefixes), createObject('value', createArray()))]",
                          "destinationAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationAddressPrefixes'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationAddressPrefixes), createObject('value', createArray()))]",
                          "sourceApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceApplicationSecurityGroups'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceApplicationSecurityGroups), createObject('value', createArray()))]",
                          "destinationApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationApplicationSecurityGroups'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationApplicationSecurityGroups), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "9882808433260651098"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the security rule."
                              }
                            },
                            "networkSecurityGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent network security group to deploy the security rule into. Required if the template is used in a standalone deployment."
                              }
                            },
                            "access": {
                              "type": "string",
                              "defaultValue": "Deny",
                              "allowedValues": [
                                "Allow",
                                "Deny"
                              ],
                              "metadata": {
                                "description": "Optional. Whether network traffic is allowed or denied."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "maxLength": 140,
                              "metadata": {
                                "description": "Optional. A description for this rule."
                              }
                            },
                            "destinationAddressPrefix": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The destination address prefix. CIDR or destination IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used."
                              }
                            },
                            "destinationAddressPrefixes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The destination address prefixes. CIDR or destination IP ranges."
                              }
                            },
                            "destinationApplicationSecurityGroups": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The application security group specified as destination."
                              }
                            },
                            "destinationPortRange": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The destination port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                              }
                            },
                            "destinationPortRanges": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The destination port ranges."
                              }
                            },
                            "direction": {
                              "type": "string",
                              "allowedValues": [
                                "Inbound",
                                "Outbound"
                              ],
                              "metadata": {
                                "description": "Required. The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic."
                              }
                            },
                            "priority": {
                              "type": "int",
                              "metadata": {
                                "description": "Required. The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule."
                              }
                            },
                            "protocol": {
                              "type": "string",
                              "allowedValues": [
                                "*",
                                "Ah",
                                "Esp",
                                "Icmp",
                                "Tcp",
                                "Udp"
                              ],
                              "metadata": {
                                "description": "Required. Network protocol this rule applies to."
                              }
                            },
                            "sourceAddressPrefix": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The CIDR or source IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used. If this is an ingress rule, specifies where network traffic originates from."
                              }
                            },
                            "sourceAddressPrefixes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The CIDR or source IP ranges."
                              }
                            },
                            "sourceApplicationSecurityGroups": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The application security group specified as source."
                              }
                            },
                            "sourcePortRange": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The source port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                              }
                            },
                            "sourcePortRanges": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The source port ranges."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                              "apiVersion": "2021-05-01",
                              "name": "[format('{0}/{1}', parameters('networkSecurityGroupName'), parameters('name'))]",
                              "properties": {
                                "access": "[parameters('access')]",
                                "description": "[parameters('description')]",
                                "destinationAddressPrefix": "[parameters('destinationAddressPrefix')]",
                                "destinationAddressPrefixes": "[parameters('destinationAddressPrefixes')]",
                                "destinationApplicationSecurityGroups": "[parameters('destinationApplicationSecurityGroups')]",
                                "destinationPortRange": "[parameters('destinationPortRange')]",
                                "destinationPortRanges": "[parameters('destinationPortRanges')]",
                                "direction": "[parameters('direction')]",
                                "priority": "[parameters('priority')]",
                                "protocol": "[parameters('protocol')]",
                                "sourceAddressPrefix": "[parameters('sourceAddressPrefix')]",
                                "sourceAddressPrefixes": "[parameters('sourceAddressPrefixes')]",
                                "sourceApplicationSecurityGroups": "[parameters('sourceApplicationSecurityGroups')]",
                                "sourcePortRange": "[parameters('sourcePortRange')]",
                                "sourcePortRanges": "[parameters('sourcePortRanges')]"
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the security rule was deployed into."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', parameters('networkSecurityGroupName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the security rule."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the security rule."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "networkSecurityGroup_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-NSG-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "6538834856152168835"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Network/networkSecurityGroups', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the network security group was deployed into."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the network security group."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the network security group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/networkSecurityGroups', parameters('name')), '2021-08-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varOperationsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-{0}-logStorage-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-{0}-routeTable-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "resourceGroup": "[variables('varOperationsResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "ops-routetable"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "tags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
                  },
                  "routes": {
                    "value": "[parameters('parRouteTableRoutes')]"
                  },
                  "disableBgpRoutePropagation": {
                    "value": "[parameters('parDisableBgpRoutePropagation')]"
                  },
                  "lock": "[if(parameters('parEnableResourceLocks'), createObject('value', 'CanNotDelete'), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "12951294337263059431"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name given for the hub route table."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "routes": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An Array of Routes to be established within the hub route table."
                      }
                    },
                    "disableBgpRoutePropagation": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Switch to disable BGP route propagation."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/routeTables",
                      "apiVersion": "2021-08-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "routes": "[parameters('routes')]",
                        "disableBgpRoutePropagation": "[parameters('disableBgpRoutePropagation')]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/routeTables/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "routeTable_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-RouteTable-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "4373655375548493381"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/routeTables/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Network/routeTables', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the route table was deployed into."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the route table."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/routeTables', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the route table."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/routeTables', parameters('name')), '2021-08-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId(parameters('parOperationsSubscriptionId'), 'Microsoft.Resources/deployments', format('deploy-{0}-rg-{1}', variables('varOperationsShortName'), parameters('parDeploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-{0}-virtualNetwork-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "resourceGroup": "[variables('varOperationsResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varOperationsVirtualNetworkName')]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "tags": {
                    "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
                  },
                  "addressPrefixes": {
                    "value": [
                      "[parameters('parOperationsVirtualNetworkAddressPrefix')]"
                    ]
                  },
                  "subnets": {
                    "value": [
                      {
                        "addressPrefix": "[parameters('parOperationsSubnetAddressPrefix')]",
                        "name": "[variables('varOperationsSubnetName')]",
                        "networkSecurityGroupId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varOperationsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-{0}-networkSecurityGroup-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]",
                        "routeTableId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varOperationsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-{0}-routeTable-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]",
                        "serviceEndpoints": "[parameters('parOperationsSubnetServiceEndpoints')]"
                      }
                    ]
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('parLogAnalyticsWorkspaceResourceId')]"
                  },
                  "diagnosticStorageAccountId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varOperationsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-{0}-logStorage-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
                  },
                  "diagnosticLogCategoriesToEnable": {
                    "value": "[parameters('parOperationsVirtualNetworkDiagnosticsLogs')]"
                  },
                  "diagnosticMetricsToEnable": {
                    "value": "[parameters('parOperationsVirtualNetworkDiagnosticsMetrics')]"
                  },
                  "ddosProtectionPlanEnabled": {
                    "value": "[parameters('parDeployddosProtectionPlan')]"
                  },
                  "ddosProtectionPlanId": {
                    "value": "[variables('opsddosName')]"
                  },
                  "lock": "[if(parameters('parEnableResourceLocks'), createObject('value', 'CanNotDelete'), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "16680740436443577959"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Virtual Network (vNet) Name."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "addressPrefixes": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. An Array of 1 or more IP Address Prefixes for the Virtual Network."
                      }
                    },
                    "subnets": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An Array of subnets to deploy to the Virtual Network."
                      }
                    },
                    "dnsServers": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. DNS Servers associated to the Virtual Network."
                      }
                    },
                    "ddosProtectionPlanEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Switch which allows DDOS deployment to be disabled. Default: false"
                      }
                    },
                    "ddosProtectionPlanId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the DDoS protection plan to assign the VNET to. If it's left blank, DDoS protection will not be configured. If it's provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription."
                      }
                    },
                    "virtualNetworkPeerings": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Virtual Network Peerings configurations."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "VMProtectionAlerts"
                      ],
                      "allowedValues": [
                        "VMProtectionAlerts"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      },
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ],
                    "dnsServersVar": {
                      "dnsServers": "[array(parameters('dnsServers'))]"
                    },
                    "ddosProtectionPlan": {
                      "id": "[parameters('ddosProtectionPlanId')]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2021-08-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "subnets",
                            "count": "[length(parameters('subnets'))]",
                            "input": {
                              "name": "[parameters('subnets')[copyIndex('subnets')].name]",
                              "properties": {
                                "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].addressPrefix]",
                                "addressPrefixes": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'addressPrefixes'), parameters('subnets')[copyIndex('subnets')].addressPrefixes, createArray())]",
                                "applicationGatewayIpConfigurations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'applicationGatewayIpConfigurations'), parameters('subnets')[copyIndex('subnets')].applicationGatewayIpConfigurations, createArray())]",
                                "delegations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'delegations'), parameters('subnets')[copyIndex('subnets')].delegations, createArray())]",
                                "ipAllocations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'ipAllocations'), parameters('subnets')[copyIndex('subnets')].ipAllocations, createArray())]",
                                "natGateway": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'natGatewayId'), createObject('id', parameters('subnets')[copyIndex('subnets')].natGatewayId), null())]",
                                "networkSecurityGroup": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'networkSecurityGroupId'), createObject('id', parameters('subnets')[copyIndex('subnets')].networkSecurityGroupId), null())]",
                                "privateEndpointNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'privateEndpointNetworkPolicies'), parameters('subnets')[copyIndex('subnets')].privateEndpointNetworkPolicies, null())]",
                                "privateLinkServiceNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'privateLinkServiceNetworkPolicies'), parameters('subnets')[copyIndex('subnets')].privateLinkServiceNetworkPolicies, null())]",
                                "routeTable": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'routeTableId'), createObject('id', parameters('subnets')[copyIndex('subnets')].routeTableId), null())]",
                                "serviceEndpoints": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'serviceEndpoints'), parameters('subnets')[copyIndex('subnets')].serviceEndpoints, createArray())]",
                                "serviceEndpointPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'serviceEndpointPolicies'), parameters('subnets')[copyIndex('subnets')].serviceEndpointPolicies, createArray())]"
                              }
                            }
                          }
                        ],
                        "addressSpace": {
                          "addressPrefixes": "[parameters('addressPrefixes')]"
                        },
                        "ddosProtectionPlan": "[if(parameters('ddosProtectionPlanEnabled'), variables('ddosProtectionPlan'), null())]",
                        "dhcpOptions": "[if(not(empty(parameters('dnsServers'))), variables('dnsServersVar'), null())]",
                        "enableDdosProtection": "[not(empty(parameters('ddosProtectionPlanId')))]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "virtualNetwork_subnets",
                        "count": "[length(parameters('subnets'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-subnet-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualNetworkName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('subnets')[copyIndex()].name]"
                          },
                          "addressPrefix": {
                            "value": "[parameters('subnets')[copyIndex()].addressPrefix]"
                          },
                          "addressPrefixes": "[if(contains(parameters('subnets')[copyIndex()], 'addressPrefixes'), createObject('value', parameters('subnets')[copyIndex()].addressPrefixes), createObject('value', createArray()))]",
                          "applicationGatewayIpConfigurations": "[if(contains(parameters('subnets')[copyIndex()], 'applicationGatewayIpConfigurations'), createObject('value', parameters('subnets')[copyIndex()].applicationGatewayIpConfigurations), createObject('value', createArray()))]",
                          "delegations": "[if(contains(parameters('subnets')[copyIndex()], 'delegations'), createObject('value', parameters('subnets')[copyIndex()].delegations), createObject('value', createArray()))]",
                          "ipAllocations": "[if(contains(parameters('subnets')[copyIndex()], 'ipAllocations'), createObject('value', parameters('subnets')[copyIndex()].ipAllocations), createObject('value', createArray()))]",
                          "natGatewayId": "[if(contains(parameters('subnets')[copyIndex()], 'natGatewayId'), createObject('value', parameters('subnets')[copyIndex()].natGatewayId), createObject('value', ''))]",
                          "networkSecurityGroupId": "[if(contains(parameters('subnets')[copyIndex()], 'networkSecurityGroupId'), createObject('value', parameters('subnets')[copyIndex()].networkSecurityGroupId), createObject('value', ''))]",
                          "privateEndpointNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex()], 'privateEndpointNetworkPolicies'), createObject('value', parameters('subnets')[copyIndex()].privateEndpointNetworkPolicies), createObject('value', ''))]",
                          "privateLinkServiceNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex()], 'privateLinkServiceNetworkPolicies'), createObject('value', parameters('subnets')[copyIndex()].privateLinkServiceNetworkPolicies), createObject('value', ''))]",
                          "roleAssignments": "[if(contains(parameters('subnets')[copyIndex()], 'roleAssignments'), createObject('value', parameters('subnets')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
                          "routeTableId": "[if(contains(parameters('subnets')[copyIndex()], 'routeTableId'), createObject('value', parameters('subnets')[copyIndex()].routeTableId), createObject('value', ''))]",
                          "serviceEndpointPolicies": "[if(contains(parameters('subnets')[copyIndex()], 'serviceEndpointPolicies'), createObject('value', parameters('subnets')[copyIndex()].serviceEndpointPolicies), createObject('value', createArray()))]",
                          "serviceEndpoints": "[if(contains(parameters('subnets')[copyIndex()], 'serviceEndpoints'), createObject('value', parameters('subnets')[copyIndex()].serviceEndpoints), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "516599437942070407"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Optional. The Name of the subnet resource."
                              }
                            },
                            "virtualNetworkName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent virtual network. Required if the template is used in a standalone deployment."
                              }
                            },
                            "addressPrefix": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The address prefix for the subnet."
                              }
                            },
                            "networkSecurityGroupId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource ID of the network security group to assign to the subnet."
                              }
                            },
                            "routeTableId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource ID of the route table to assign to the subnet."
                              }
                            },
                            "serviceEndpoints": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The service endpoints to enable on the subnet."
                              }
                            },
                            "delegations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The delegations to enable on the subnet."
                              }
                            },
                            "natGatewayId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource ID of the NAT Gateway to use for the subnet."
                              }
                            },
                            "privateEndpointNetworkPolicies": {
                              "type": "string",
                              "defaultValue": "Disabled",
                              "allowedValues": [
                                "Disabled",
                                "Enabled",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. enable or disable apply network policies on private endpoint in the subnet."
                              }
                            },
                            "privateLinkServiceNetworkPolicies": {
                              "type": "string",
                              "defaultValue": "Enabled",
                              "allowedValues": [
                                "Disabled",
                                "Enabled",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. enable or disable apply network policies on private link service in the subnet."
                              }
                            },
                            "addressPrefixes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of address prefixes for the subnet."
                              }
                            },
                            "applicationGatewayIpConfigurations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Application gateway IP configurations of virtual network resource."
                              }
                            },
                            "ipAllocations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of IpAllocation which reference this subnet."
                              }
                            },
                            "serviceEndpointPolicies": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. An array of service endpoint policies."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/subnets",
                              "apiVersion": "2021-05-01",
                              "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                              "properties": {
                                "addressPrefix": "[parameters('addressPrefix')]",
                                "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupId'))), createObject('id', parameters('networkSecurityGroupId')), null())]",
                                "routeTable": "[if(not(empty(parameters('routeTableId'))), createObject('id', parameters('routeTableId')), null())]",
                                "natGateway": "[if(not(empty(parameters('natGatewayId'))), createObject('id', parameters('natGatewayId')), null())]",
                                "serviceEndpoints": "[parameters('serviceEndpoints')]",
                                "delegations": "[parameters('delegations')]",
                                "privateEndpointNetworkPolicies": "[if(not(empty(parameters('privateEndpointNetworkPolicies'))), parameters('privateEndpointNetworkPolicies'), null())]",
                                "privateLinkServiceNetworkPolicies": "[if(not(empty(parameters('privateLinkServiceNetworkPolicies'))), parameters('privateLinkServiceNetworkPolicies'), null())]",
                                "addressPrefixes": "[parameters('addressPrefixes')]",
                                "applicationGatewayIpConfigurations": "[parameters('applicationGatewayIpConfigurations')]",
                                "ipAllocations": "[parameters('ipAllocations')]",
                                "serviceEndpointPolicies": "[parameters('serviceEndpointPolicies')]"
                              }
                            },
                            {
                              "copy": {
                                "name": "subnet_roleAssignments",
                                "count": "[length(parameters('roleAssignments'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-Subnet-Rbac-{1}', uniqueString(deployment().name, resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                  "principalIds": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                  },
                                  "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                  "roleDefinitionIdOrName": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                  },
                                  "resourceId": {
                                    "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "16413339242304344709"
                                    }
                                  },
                                  "parameters": {
                                    "principalIds": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. The IDs of the principals to assign the role to."
                                      }
                                    },
                                    "roleDefinitionIdOrName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource ID of the resource to apply the role assignment to."
                                      }
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "allowedValues": [
                                        "ServicePrincipal",
                                        "Group",
                                        "User",
                                        "ForeignGroup",
                                        "Device",
                                        ""
                                      ],
                                      "metadata": {
                                        "description": "Optional. The principal type of the assigned principal ID."
                                      }
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The description of the role assignment."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "roleAssignment",
                                        "count": "[length(parameters('principalIds'))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}/subnets/{1}', split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[0], split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[1])]",
                                      "name": "[guid(resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[0], split(format('{0}/{1}', split(parameters('resourceId'), '/')[8], split(parameters('resourceId'), '/')[10]), '/')[1]), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                      "properties": {
                                        "description": "[parameters('description')]",
                                        "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the virtual network peering was deployed into."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the virtual network peering."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the virtual network peering."
                              }
                            },
                            "subnetAddressPrefix": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name')), '2021-05-01').addressPrefix]",
                              "metadata": {
                                "description": "The address prefix for the subnet."
                              }
                            },
                            "subnetAddressPrefixes": {
                              "type": "array",
                              "value": "[if(not(empty(parameters('addressPrefixes'))), reference(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name')), '2021-05-01').addressPrefixes, createArray())]",
                              "metadata": {
                                "description": "List of address prefixes for the subnet."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "virtualNetwork_peering_local",
                        "count": "[length(parameters('virtualNetworkPeerings'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-virtualNetworkPeering-local-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "localVnetName": {
                            "value": "[parameters('name')]"
                          },
                          "remoteVirtualNetworkId": {
                            "value": "[parameters('virtualNetworkPeerings')[copyIndex()].remoteVirtualNetworkId]"
                          },
                          "name": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'name'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].name), createObject('value', format('{0}-{1}', parameters('name'), last(split(parameters('virtualNetworkPeerings')[copyIndex()].remoteVirtualNetworkId, '/')))))]",
                          "allowForwardedTraffic": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'allowForwardedTraffic'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].allowForwardedTraffic), createObject('value', true()))]",
                          "allowGatewayTransit": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'allowGatewayTransit'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].allowGatewayTransit), createObject('value', false()))]",
                          "allowVirtualNetworkAccess": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'allowVirtualNetworkAccess'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].allowVirtualNetworkAccess), createObject('value', true()))]",
                          "doNotVerifyRemoteGateways": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'doNotVerifyRemoteGateways'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].doNotVerifyRemoteGateways), createObject('value', true()))]",
                          "useRemoteGateways": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'useRemoteGateways'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].useRemoteGateways), createObject('value', false()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "1418107840489134803"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkId'), '/')))]",
                              "metadata": {
                                "description": "Optional. The Name of Vnet Peering resource. If not provided, default value will be localVnetName-remoteVnetName."
                              }
                            },
                            "localVnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Virtual Network to add the peering to. Required if the template is used in a standalone deployment."
                              }
                            },
                            "remoteVirtualNetworkId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                              }
                            },
                            "allowForwardedTraffic": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                              }
                            },
                            "allowGatewayTransit": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                              }
                            },
                            "allowVirtualNetworkAccess": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                              }
                            },
                            "doNotVerifyRemoteGateways": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true."
                              }
                            },
                            "useRemoteGateways": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2021-05-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                                "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                                "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                                "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                                "useRemoteGateways": "[parameters('useRemoteGateways')]",
                                "remoteVirtualNetwork": {
                                  "id": "[parameters('remoteVirtualNetworkId')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the virtual network peering was deployed into."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the virtual network peering."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', split(parameters('name'), '/')[0], split(parameters('name'), '/')[1])]",
                              "metadata": {
                                "description": "The resource ID of the virtual network peering."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringEnabled'), equals(parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringEnabled, true()), false())]",
                      "copy": {
                        "name": "virtualNetwork_peering_remote",
                        "count": "[length(parameters('virtualNetworkPeerings'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-virtualNetworkPeering-remote-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "subscriptionId": "[split(parameters('virtualNetworkPeerings')[copyIndex()].remoteVirtualNetworkId, '/')[2]]",
                      "resourceGroup": "[split(parameters('virtualNetworkPeerings')[copyIndex()].remoteVirtualNetworkId, '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "localVnetName": {
                            "value": "[last(split(parameters('virtualNetworkPeerings')[copyIndex()].remoteVirtualNetworkId, '/'))]"
                          },
                          "remoteVirtualNetworkId": {
                            "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                          },
                          "name": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringName'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringName), createObject('value', format('{0}-{1}', last(split(parameters('virtualNetworkPeerings')[copyIndex()].remoteVirtualNetworkId, '/')), parameters('name'))))]",
                          "allowForwardedTraffic": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringAllowForwardedTraffic'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringAllowForwardedTraffic), createObject('value', true()))]",
                          "allowGatewayTransit": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringAllowGatewayTransit'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringAllowGatewayTransit), createObject('value', false()))]",
                          "allowVirtualNetworkAccess": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringAllowVirtualNetworkAccess'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringAllowVirtualNetworkAccess), createObject('value', true()))]",
                          "doNotVerifyRemoteGateways": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringDoNotVerifyRemoteGateways'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringDoNotVerifyRemoteGateways), createObject('value', true()))]",
                          "useRemoteGateways": "[if(contains(parameters('virtualNetworkPeerings')[copyIndex()], 'remotePeeringUseRemoteGateways'), createObject('value', parameters('virtualNetworkPeerings')[copyIndex()].remotePeeringUseRemoteGateways), createObject('value', false()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "1418107840489134803"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkId'), '/')))]",
                              "metadata": {
                                "description": "Optional. The Name of Vnet Peering resource. If not provided, default value will be localVnetName-remoteVnetName."
                              }
                            },
                            "localVnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Virtual Network to add the peering to. Required if the template is used in a standalone deployment."
                              }
                            },
                            "remoteVirtualNetworkId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                              }
                            },
                            "allowForwardedTraffic": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                              }
                            },
                            "allowGatewayTransit": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                              }
                            },
                            "allowVirtualNetworkAccess": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                              }
                            },
                            "doNotVerifyRemoteGateways": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true."
                              }
                            },
                            "useRemoteGateways": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2021-05-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                                "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                                "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                                "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                                "useRemoteGateways": "[parameters('useRemoteGateways')]",
                                "remoteVirtualNetwork": {
                                  "id": "[parameters('remoteVirtualNetworkId')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the virtual network peering was deployed into."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the virtual network peering."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', split(parameters('name'), '/')[0], split(parameters('name'), '/')[1])]",
                              "metadata": {
                                "description": "The resource ID of the virtual network peering."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "virtualNetwork_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VNet-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "726979463184508627"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Id of the delegated managed identity resource."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Network/virtualNetworks', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the virtual network was deployed into."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the virtual network."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the virtual network."
                      }
                    },
                    "subnetNames": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('subnets'))]",
                        "input": "[parameters('subnets')[copyIndex()].name]"
                      },
                      "metadata": {
                        "description": "The names of the deployed subnets."
                      }
                    },
                    "subnetResourceIds": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('subnets'))]",
                        "input": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('name'), parameters('subnets')[copyIndex()].name)]"
                      },
                      "metadata": {
                        "description": "The resource IDs of the deployed subnets."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), '2021-08-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varOperationsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-{0}-networkSecurityGroup-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varOperationsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-{0}-routeTable-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varOperationsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-{0}-logStorage-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-{0}-tags-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[and(contains(parameters('parSupportedClouds'), environment().name), parameters('parEnablePrivateDnsZones'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-global-prvt-link-{0}', parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[parameters('parOperationsSubscriptionId')]",
              "resourceGroup": "[variables('varOperationsResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('plscope{0}{1}', parameters('parLogAnalyticsWorkspaceName'), substring(uniqueString(subscription().subscriptionId, deployment().name), 0, 8))]"
                  },
                  "location": {
                    "value": "global"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "4803811922681641156"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the private link service to create."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                      }
                    },
                    "extendedLocation": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The extended location of the load balancer."
                      }
                    },
                    "autoApproval": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The auto-approval list of the private link service."
                      }
                    },
                    "enableProxyProtocol": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Whether the private link service is enabled for proxy protocol or not."
                      }
                    },
                    "fqdns": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The list of Fqdn."
                      }
                    },
                    "ipConfigurations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An array of private link service IP configurations."
                      }
                    },
                    "loadBalancerFrontendIpConfigurations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An array of references to the load balancer IP configurations."
                      }
                    },
                    "visibility": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The visibility list of the private link service."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateLinkServices",
                      "apiVersion": "2022-01-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "extendedLocation": "[if(not(empty(parameters('extendedLocation'))), parameters('extendedLocation'), null())]",
                      "properties": {
                        "autoApproval": "[parameters('autoApproval')]",
                        "enableProxyProtocol": "[parameters('enableProxyProtocol')]",
                        "fqdns": "[parameters('fqdns')]",
                        "ipConfigurations": "[parameters('ipConfigurations')]",
                        "loadBalancerFrontendIpConfigurations": "[parameters('loadBalancerFrontendIpConfigurations')]",
                        "visibility": "[parameters('visibility')]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/privateLinkServices/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateLinkServices', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "privateLinkService_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-PrivateLinkService-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Network/privateLinkServices', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "16025497877993317712"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Id of the delegated managed identity resource."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Avere Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4f8fab4f-1852-4a58-a46a-8eaf358af14a')]",
                              "Avere Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c025889f-8102-4ebf-b32c-fc0c6f0c6bd9')]",
                              "Azure Kubernetes Service Policy Add-on Deployment": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18ed5180-3e48-46fd-8541-4ea054d57064')]",
                              "Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e467623-bb1f-42f4-a55d-6e525e11384b')]",
                              "Backup Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00c29273-979b-4161-815c-10b084fb9324')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Cosmos DB Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
                              "Desktop Virtualization Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a959dbd1-f747-45e3-8ba6-dd80f235f97c')]",
                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                              "DocumentDB Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5bd9cd88-fe45-4216-938b-f97437e15450')]",
                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
                              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
                              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "Site Recovery Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6670b86e-a3f7-4917-ac9b-5d6ab1be4567')]",
                              "Site Recovery Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '494ae006-db33-4328-bf46-533a6560a3ca')]",
                              "SQL Managed Instance Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4939a1f6-9ae0-4e48-a1e0-f2cbe897382d')]",
                              "SQL Security Manager": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '056cd41c-7e88-42e1-933e-88ba6a50c9c3')]",
                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                              "Traffic Manager Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4b10055-b0c7-44c2-b00f-c7b5b3550cf7')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                              "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]",
                              "Windows Admin Center Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a6333a3e-0164-44c3-b281-7a577aff287f')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateLinkServices/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Network/privateLinkServices', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateLinkServices', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the private link service was deployed into."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateLinkServices', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the private link service."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the private link service."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/privateLinkServices', parameters('name')), '2022-01-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              }
            },
            {
              "condition": "[and(contains(parameters('parSupportedClouds'), environment().name), parameters('parEnablePrivateDnsZones'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-laws-prvt-link-{0}', parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[parameters('parOperationsSubscriptionId')]",
              "resourceGroup": "[variables('varOperationsResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateLinkScopeName": {
                    "value": "[format('plscope{0}{1}', parameters('parLogAnalyticsWorkspaceName'), substring(uniqueString(subscription().subscriptionId, deployment().name), 0, 8))]"
                  },
                  "privateLinkScopeResourceName": {
                    "value": "[format('plscres{0}{1}', parameters('parLogAnalyticsWorkspaceName'), substring(uniqueString(subscription().subscriptionId, deployment().name), 0, 8))]"
                  },
                  "linkedResourceId": {
                    "value": "[parameters('parLogAnalyticsWorkspaceResourceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "11719485552437641479"
                    }
                  },
                  "parameters": {
                    "privateLinkScopeName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the private link service to create."
                      }
                    },
                    "privateLinkScopeResourceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the private link service resource to create."
                      }
                    },
                    "linkedResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the linked resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Insights/privateLinkScopes/scopedResources",
                      "apiVersion": "2021-07-01-preview",
                      "name": "[format('{0}/{1}', parameters('privateLinkScopeName'), parameters('privateLinkScopeResourceName'))]",
                      "properties": {
                        "linkedResourceId": "[parameters('linkedResourceId')]"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parOperationsSubscriptionId'), variables('varOperationsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-global-prvt-link-{0}', parameters('parDeploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-subnet-prvt-link-{0}', parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[parameters('parOperationsSubscriptionId')]",
              "resourceGroup": "[variables('varOperationsResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('pl{0}{1}', parameters('parLogAnalyticsWorkspaceName'), substring(uniqueString(subscription().subscriptionId, deployment().name), 0, 8))]"
                  },
                  "groupIds": {
                    "value": [
                      "azuremonitor"
                    ]
                  },
                  "serviceResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parOperationsSubscriptionId'), variables('varOperationsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-global-prvt-link-{0}', parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
                  },
                  "subnetResourceId": {
                    "value": "[resourceId(parameters('parOperationsSubscriptionId'), variables('varOperationsResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varOperationsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-{0}-virtualNetwork-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.name.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varOperationsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-{0}-virtualNetwork-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.subnetNames.value[0])]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "4644865239500382922"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the private endpoint resource to create."
                      }
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                      }
                    },
                    "serviceResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the resource that needs to be connected to the network."
                      }
                    },
                    "groupIds": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. Subtype(s) of the connection to be created. The allowed values depend on the type serviceResourceId refers to."
                      }
                    },
                    "privateDnsZoneGroup": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The private DNS zone group configuration used to associate the private endpoint with one or multiple private DNS zones. A DNS zone group can support up to 5 DNS zones."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                      }
                    },
                    "customDnsConfigs": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Custom DNS configurations."
                      }
                    },
                    "manualPrivateLinkServiceConnections": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Manual PrivateLink Service Connections."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2022-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "privateLinkServiceConnections": [
                          {
                            "name": "[parameters('name')]",
                            "properties": {
                              "privateLinkServiceId": "[parameters('serviceResourceId')]",
                              "groupIds": "[parameters('groupIds')]"
                            }
                          }
                        ],
                        "manualPrivateLinkServiceConnections": "[parameters('manualPrivateLinkServiceConnections')]",
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        },
                        "customDnsConfigs": "[parameters('customDnsConfigs')]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateDNSResourceIds": {
                            "value": "[parameters('privateDnsZoneGroup').privateDNSResourceIds]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('name')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "15676669430944305970"
                            }
                          },
                          "parameters": {
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                              }
                            },
                            "privateDNSResourceIds": {
                              "type": "array",
                              "maxLength": 5,
                              "minLength": 1,
                              "metadata": {
                                "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateDnsZoneConfigs",
                                "count": "[length(parameters('privateDNSResourceIds'))]",
                                "input": {
                                  "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                  "properties": {
                                    "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2022-05-01",
                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                              "properties": {
                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the private endpoint DNS zone group."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the private endpoint DNS zone group."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "privateEndpoint_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-PrivateEndpoint-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "7834245939786083135"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Network/privateEndpoints', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the private endpoint was deployed into."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the private endpoint."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the private endpoint."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), '2022-05-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parOperationsSubscriptionId'), variables('varOperationsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-global-prvt-link-{0}', parameters('parDeploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varOperationsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-{0}-virtualNetwork-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-dnsZone-prvtlinkEp-{0}', parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[parameters('parOperationsSubscriptionId')]",
              "resourceGroup": "[variables('varOperationsResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDNSResourceIds": {
                    "value": "[parameters('parOperationsPrivateDNSResourceIds')]"
                  },
                  "privateEndpointName": {
                    "value": "[format('pl{0}{1}', parameters('parLogAnalyticsWorkspaceName'), substring(uniqueString(subscription().subscriptionId, deployment().name), 0, 8))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "15676669430944305970"
                    }
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                      }
                    },
                    "privateDNSResourceIds": {
                      "type": "array",
                      "maxLength": 5,
                      "minLength": 1,
                      "metadata": {
                        "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. The name of the private DNS zone group."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "privateDnsZoneConfigs",
                        "count": "[length(parameters('privateDNSResourceIds'))]",
                        "input": {
                          "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                          "properties": {
                            "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2022-05-01",
                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                      "properties": {
                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the private endpoint DNS zone group."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the private endpoint DNS zone group."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                      }
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('enableActivityLogging')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-activity-logs-{0}-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('log-operations-sub-activity-to-{0}', parameters('parLogAnalyticsWorkspaceName'))]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('parLogAnalyticsWorkspaceResourceId')]"
                  },
                  "diagnosticLogCategoriesToEnable": {
                    "value": [
                      "Administrative",
                      "Security",
                      "ServiceHealth",
                      "Alert",
                      "Recommendation",
                      "Policy",
                      "Autoscale",
                      "ResourceHealth",
                      "Audit"
                    ]
                  },
                  "diagnosticMetricCategoriesToEnable": {
                    "value": [
                      "AllMetrics"
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "2841833840091048198"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "[format('{0}-ActivityLog', uniqueString(subscription().id))]",
                      "maxLength": 260,
                      "minLength": 1,
                      "metadata": {
                        "description": "Optional. Name of the ActivityLog diagnostic settings."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [],
                      "allowedValues": [
                        "Administrative",
                        "Security",
                        "ServiceHealth",
                        "Alert",
                        "Recommendation",
                        "Policy",
                        "Autoscale",
                        "ResourceHealth",
                        "Audit",
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "diagnosticMetricCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      },
                      {
                        "name": "diagnosticsMetricLogs",
                        "count": "[length(parameters('diagnosticMetricCategoriesToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricCategoriesToEnable')[copyIndex('diagnosticsMetricLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "name": "[parameters('name')]",
                      "properties": {
                        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), null(), parameters('diagnosticStorageAccountId'))]",
                        "workspaceId": "[if(empty(parameters('diagnosticWorkspaceId')), null(), parameters('diagnosticWorkspaceId'))]",
                        "eventHubAuthorizationRuleId": "[if(empty(parameters('diagnosticEventHubAuthorizationRuleId')), null(), parameters('diagnosticEventHubAuthorizationRuleId'))]",
                        "eventHubName": "[if(empty(parameters('diagnosticEventHubName')), null(), parameters('diagnosticEventHubName'))]",
                        "logs": "[if(and(and(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('diagnosticWorkspaceId'))), empty(parameters('diagnosticEventHubAuthorizationRuleId'))), empty(parameters('diagnosticEventHubName'))), null(), variables('diagnosticsLogs'))]",
                        "metrics": "[if(and(and(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('diagnosticWorkspaceId'))), empty(parameters('diagnosticEventHubAuthorizationRuleId'))), empty(parameters('diagnosticEventHubName'))), null(), variables('diagnosticsMetricLogs'))]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the diagnostic settings."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[subscriptionResourceId('Microsoft.Insights/diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the diagnostic settings."
                      }
                    },
                    "subscriptionName": {
                      "type": "string",
                      "value": "[subscription().displayName]",
                      "metadata": {
                        "description": "The name of the subscription to deploy into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varOperationsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-{0}-virtualNetwork-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varOperationsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-{0}-logStorage-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            }
          ],
          "outputs": {
            "virtualNetworkName": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varOperationsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-{0}-virtualNetwork-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.name.value]"
            },
            "virtualNetworkResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varOperationsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-{0}-virtualNetwork-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
            },
            "subnetNames": {
              "type": "array",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varOperationsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-{0}-virtualNetwork-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.subnetNames.value]"
            },
            "subnetResourceIds": {
              "type": "array",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varOperationsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-{0}-virtualNetwork-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.subnetResourceIds.value]"
            },
            "networkSecurityGroupName": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varOperationsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-{0}-networkSecurityGroup-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.name.value]"
            },
            "networkSecurityGroupResourceId": {
              "type": "string",
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('varOperationsResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-{0}-networkSecurityGroup-{1}-{2}', variables('varOperationsShortName'), parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
            },
            "operationsResourceGroupName": {
              "type": "string",
              "value": "[variables('varOperationsResourceGroupName')]"
            },
            "operationsLogStorageAccountName": {
              "type": "string",
              "value": "[variables('varOperationsLogStorageAccountName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('parOperationsSpoke').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-laws-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hubspoke-tags--{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('parHub').peerToSpokeVirtualNetwork]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('deploy-vnet-peerings-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
      "subscriptionId": "[parameters('parHub').subscriptionId]",
      "resourceGroup": "[variables('varHubResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "parHubVirtualNetworkName": {
            "value": "[reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.virtualNetworkName.value]"
          },
          "parSpokes": {
            "value": [
              {
                "name": "operations",
                "virtualNetworkName": "[reference(subscriptionResourceId(parameters('parOperationsSpoke').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-vnet-spoke-ops-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.virtualNetworkName.value]",
                "virtualNetworkResourceId": "[reference(subscriptionResourceId(parameters('parOperationsSpoke').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-vnet-spoke-ops-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.virtualNetworkResourceId.value]"
              }
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.13.1.58284",
              "templateHash": "15622769815714146653"
            }
          },
          "parameters": {
            "parHubVirtualNetworkName": {
              "type": "string",
              "metadata": {
                "description": "The Virtual Network Name for the Hub Network."
              }
            },
            "parSpokes": {
              "type": "array",
              "defaultValue": [
                {
                  "name": "operations",
                  "virtualNetworkResourceId": "",
                  "virtualNetworkName": ""
                },
                {
                  "name": "identity",
                  "virtualNetworkResourceId": "",
                  "virtualNetworkName": ""
                },
                {
                  "name": "sharedServices",
                  "virtualNetworkResourceId": "",
                  "virtualNetworkName": ""
                }
              ],
              "metadata": {
                "description": "The Virtual Network ResourceIds and Names for all spokes"
              }
            }
          },
          "resources": [
            {
              "copy": {
                "name": "hubToSpokePeering",
                "count": "[length(parameters('parSpokes'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('hub-to-{0}-vnet-peering', parameters('parSpokes')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('{0}/to-{1}', parameters('parHubVirtualNetworkName'), parameters('parSpokes')[copyIndex()].virtualNetworkName)]"
                  },
                  "remoteVirtualNetworkId": {
                    "value": "[parameters('parSpokes')[copyIndex()].virtualNetworkResourceId]"
                  },
                  "localVnetName": {
                    "value": "[parameters('parHubVirtualNetworkName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "1418107840489134803"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "[format('{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkId'), '/')))]",
                      "metadata": {
                        "description": "Optional. The Name of Vnet Peering resource. If not provided, default value will be localVnetName-remoteVnetName."
                      }
                    },
                    "localVnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Virtual Network to add the peering to. Required if the template is used in a standalone deployment."
                      }
                    },
                    "remoteVirtualNetworkId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                      }
                    },
                    "allowForwardedTraffic": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                      }
                    },
                    "allowGatewayTransit": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                      }
                    },
                    "allowVirtualNetworkAccess": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                      }
                    },
                    "doNotVerifyRemoteGateways": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true."
                      }
                    },
                    "useRemoteGateways": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2021-05-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                        "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                        "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                        "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                        "useRemoteGateways": "[parameters('useRemoteGateways')]",
                        "remoteVirtualNetwork": {
                          "id": "[parameters('remoteVirtualNetworkId')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the virtual network peering was deployed into."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the virtual network peering."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', split(parameters('name'), '/')[0], split(parameters('name'), '/')[1])]",
                      "metadata": {
                        "description": "The resource ID of the virtual network peering."
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('parOperationsSpoke').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-vnet-spoke-ops-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('parOperationsSpoke').peerToHubVirtualNetwork]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('deploy-vnet-spoke-peerings-ops-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
      "subscriptionId": "[parameters('parOperationsSpoke').subscriptionId]",
      "resourceGroup": "[variables('varOperationsResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "parSpokeName": {
            "value": "operations"
          },
          "parSpokeResourceGroupName": {
            "value": "[variables('varOperationsResourceGroupName')]"
          },
          "parSpokeVirtualNetworkName": {
            "value": "[reference(subscriptionResourceId(parameters('parOperationsSpoke').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-vnet-spoke-ops-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.virtualNetworkName.value]"
          },
          "parHubVirtualNetworkName": {
            "value": "[reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.virtualNetworkName.value]"
          },
          "parHubVirtualNetworkResourceId": {
            "value": "[reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.virtualNetworkResourceId.value]"
          },
          "parAllowVirtualNetworkAccess": {
            "value": "[parameters('parOperationsSpoke').allowVirtualNetworkAccess]"
          },
          "parUseRemoteGateways": {
            "value": "[parameters('parOperationsSpoke').useRemoteGateways]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.13.1.58284",
              "templateHash": "4223621311509759204"
            }
          },
          "parameters": {
            "parSpokeName": {
              "type": "string"
            },
            "parSpokeResourceGroupName": {
              "type": "string"
            },
            "parSpokeVirtualNetworkName": {
              "type": "string"
            },
            "parUseRemoteGateways": {
              "type": "bool"
            },
            "parAllowVirtualNetworkAccess": {
              "type": "bool"
            },
            "parHubVirtualNetworkName": {
              "type": "string"
            },
            "parHubVirtualNetworkResourceId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('{0}-to-hub-vnet-peering', parameters('parSpokeName'))]",
              "resourceGroup": "[parameters('parSpokeResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('{0}/to-{1}', parameters('parSpokeVirtualNetworkName'), parameters('parHubVirtualNetworkName'))]"
                  },
                  "remoteVirtualNetworkId": {
                    "value": "[parameters('parHubVirtualNetworkResourceId')]"
                  },
                  "localVnetName": {
                    "value": "[parameters('parSpokeVirtualNetworkName')]"
                  },
                  "useRemoteGateways": {
                    "value": "[parameters('parUseRemoteGateways')]"
                  },
                  "allowVirtualNetworkAccess": {
                    "value": "[parameters('parAllowVirtualNetworkAccess')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "1418107840489134803"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "[format('{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkId'), '/')))]",
                      "metadata": {
                        "description": "Optional. The Name of Vnet Peering resource. If not provided, default value will be localVnetName-remoteVnetName."
                      }
                    },
                    "localVnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Virtual Network to add the peering to. Required if the template is used in a standalone deployment."
                      }
                    },
                    "remoteVirtualNetworkId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                      }
                    },
                    "allowForwardedTraffic": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                      }
                    },
                    "allowGatewayTransit": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                      }
                    },
                    "allowVirtualNetworkAccess": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                      }
                    },
                    "doNotVerifyRemoteGateways": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true."
                      }
                    },
                    "useRemoteGateways": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2021-05-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                        "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                        "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                        "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                        "useRemoteGateways": "[parameters('useRemoteGateways')]",
                        "remoteVirtualNetwork": {
                          "id": "[parameters('remoteVirtualNetworkId')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the virtual network peering was deployed into."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the virtual network peering."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', split(parameters('name'), '/')[0], split(parameters('name'), '/')[1])]",
                      "metadata": {
                        "description": "The resource ID of the virtual network peering."
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('parOperationsSpoke').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-vnet-spoke-ops-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('parRemoteAccess').enable]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('deploy-remote-access-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
      "subscriptionId": "[parameters('parHub').subscriptionId]",
      "resourceGroup": "[variables('varHubResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "parRequired": {
            "value": "[parameters('parRequired')]"
          },
          "parLocation": {
            "value": "[parameters('parLocation')]"
          },
          "parTags": {
            "value": "[reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hubspoke-tags--{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.tags.value]"
          },
          "parHubVirtualNetworkName": {
            "value": "[reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.virtualNetworkName.value]"
          },
          "parHubSubnetResourceId": {
            "value": "[reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.subnetResourceId.value]"
          },
          "parHubNetworkSecurityGroupResourceId": {
            "value": "[reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.networkSecurityGroupResourceId.value]"
          },
          "parRemoteAccess": {
            "value": "[parameters('parRemoteAccess')]"
          },
          "parLogAnalyticsWorkspaceId": {
            "value": "[reference(subscriptionResourceId(parameters('parOperationsSpoke').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-laws-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.outLogAnalyticsWorkspaceResourceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.13.1.58284",
              "templateHash": "10804727301765727045"
            }
          },
          "parameters": {
            "parRequired": {
              "type": "object",
              "metadata": {
                "description": "Required values used with all resources."
              }
            },
            "parTags": {
              "type": "object",
              "metadata": {
                "description": "Required tags values used with all resources."
              }
            },
            "parLocation": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The region to deploy resources into. It defaults to the deployment location."
              }
            },
            "parRemoteAccess": {
              "type": "object",
              "metadata": {
                "description": "When set to \"true\", provisions Azure Bastion Host. It defaults to \"false\"."
              }
            },
            "parHubSubnetResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The name of the The Hub Subnet Resource Id"
              }
            },
            "parHubVirtualNetworkName": {
              "type": "string",
              "metadata": {
                "description": "The Hub Virtual Network Name for the Hub Network."
              }
            },
            "parHubNetworkSecurityGroupResourceId": {
              "type": "string",
              "metadata": {
                "description": "The Hub Network Security Group Resource Id"
              }
            },
            "parLogAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics Workspace Id Needed for NSG, VNet and Activity Logging"
              }
            },
            "parDeploymentNameSuffix": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "A suffix to use for naming deployments uniquely. It defaults to the Bicep resolution of the \"utcNow()\" function."
              }
            },
            "dateUtcNow": {
              "type": "string",
              "defaultValue": "[utcNow('yyyy-MM-dd HH:mm:ss')]",
              "metadata": {
                "description": "The current date - do not override the default value"
              }
            }
          },
          "variables": {
            "varResourceToken": "resource_token",
            "varNameToken": "name_token",
            "varNamingConvention": "[format('{0}-{1}-{2}-{3}-{4}', toLower(parameters('parRequired').orgPrefix), toLower(parameters('parLocation')), toLower(parameters('parRequired').deployEnvironment), variables('varNameToken'), toLower(variables('varResourceToken')))]",
            "varBastionHostNamingConvention": "[replace(variables('varNamingConvention'), variables('varResourceToken'), 'bas')]",
            "varPublicIpAddressNamingConvention": "[replace(variables('varNamingConvention'), variables('varResourceToken'), 'pip')]",
            "varIpConfigurationNamingConvention": "[replace(variables('varNamingConvention'), variables('varResourceToken'), 'ipconf')]",
            "varNetworkInterfaceNamingConvention": "[replace(variables('varNamingConvention'), variables('varResourceToken'), 'nic')]",
            "varNetworkSecurityGroupNamingConvention": "[replace(variables('varNamingConvention'), variables('varResourceToken'), 'nsg')]",
            "varBastionHostName": "[replace(variables('varBastionHostNamingConvention'), variables('varNameToken'), 'hub')]",
            "varBastionHostPublicIPAddressName": "[replace(variables('varPublicIpAddressNamingConvention'), variables('varNameToken'), 'bas')]",
            "varLinuxNetworkInterfaceName": "[replace(variables('varNetworkInterfaceNamingConvention'), variables('varNameToken'), 'bas-linux')]",
            "varLinuxNetworkInterfaceIpConfigurationName": "[replace(variables('varIpConfigurationNamingConvention'), variables('varNameToken'), 'bas-linux')]",
            "varWindowsNetworkInterfaceName": "[replace(variables('varNetworkInterfaceNamingConvention'), variables('varNameToken'), 'bas-windows')]",
            "varWindowsNetworkInterfaceIpConfigurationName": "[replace(variables('varIpConfigurationNamingConvention'), variables('varNameToken'), 'bas-windows')]",
            "varBastionHostNetworkSecurityGroupName": "[replace(variables('varNetworkSecurityGroupNamingConvention'), variables('varNameToken'), 'bas')]",
            "varBastionHostPublicIPAddressSkuName": "Standard",
            "varBastionHostPublicIPAddressAllocationMethod": "Static",
            "referential": {
              "region": "[parameters('parLocation')]",
              "deploymentDate": "[parameters('dateUtcNow')]"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks/subnets",
              "apiVersion": "2021-02-01",
              "name": "[format('{0}/AzureBastionSubnet', parameters('parHubVirtualNetworkName'))]",
              "properties": {
                "addressPrefix": "[parameters('parRemoteAccess').bastion.subnetAddressPrefix]"
              }
            },
            {
              "condition": "[empty(parameters('parTags'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-ra-tags--{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "subscriptionId": "[subscription().subscriptionId]",
              "location": "[resourceGroup().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "tags": {
                    "value": "[union(parameters('parTags'), variables('referential'))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "216182755991536021"
                    }
                  },
                  "parameters": {
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags for the resource group. If not provided, removes existing tags."
                      }
                    },
                    "onlyUpdate": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Instead of overwriting the existing tags, combine them with the new tags."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the Resource Group to assign the tags to. If no Resource Group name is provided, and Subscription ID is provided, the module deploys at subscription level, therefore assigns the provided tags to the subscription."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().id]",
                      "metadata": {
                        "description": "Optional. Subscription ID of the subscription to assign the tags to. If no Resource Group name is provided, the module deploys at subscription level, therefore assigns the provided tags to the subscription."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Tags-Sub', deployment().name)]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "onlyUpdate": {
                            "value": "[parameters('onlyUpdate')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "1405711280777017718"
                            }
                          },
                          "parameters": {
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags for the resource group. If not provided, removes existing tags."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the tags resource."
                              }
                            },
                            "onlyUpdate": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Instead of overwriting the existing tags, combine them with the new tags."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/tags",
                              "apiVersion": "2019-10-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "tags": "[if(parameters('onlyUpdate'), union(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2020-10-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]"
                              },
                              "dependsOn": [
                                "[subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name))]"
                              ]
                            },
                            {
                              "condition": "[parameters('onlyUpdate')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-ReadTags', deployment().name)]",
                              "location": "[deployment().location]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "12771816053208228273"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the tags resource."
                                      }
                                    }
                                  },
                                  "resources": [],
                                  "outputs": {
                                    "existingTags": {
                                      "type": "object",
                                      "value": "[if(contains(reference(subscriptionResourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01'), 'tags'), reference(subscriptionResourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01').tags, createObject())]",
                                      "metadata": {
                                        "description": "Tags currently applied to the subscription level"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the tags resource."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "value": "[if(parameters('onlyUpdate'), union(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2020-10-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]",
                              "metadata": {
                                "description": "The applied tags."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[subscriptionResourceId('Microsoft.Resources/tags', parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the applied tags."
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId'))))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Tags-RG', deployment().name)]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "onlyUpdate": {
                            "value": "[parameters('onlyUpdate')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "3625051557808284647"
                            }
                          },
                          "parameters": {
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags for the resource group. If not provided, removes existing tags."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the tags resource."
                              }
                            },
                            "onlyUpdate": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Instead of overwriting the existing tags, combine them with the new tags."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/tags",
                              "apiVersion": "2019-10-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "tags": "[if(parameters('onlyUpdate'), union(reference(resourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2020-10-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name))]"
                              ]
                            },
                            {
                              "condition": "[parameters('onlyUpdate')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-ReadTags', deployment().name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "10085828695555767678"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the tags resource."
                                      }
                                    }
                                  },
                                  "resources": [],
                                  "outputs": {
                                    "existingTags": {
                                      "type": "object",
                                      "value": "[if(contains(reference(resourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01'), 'tags'), reference(resourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01').tags, createObject())]",
                                      "metadata": {
                                        "description": "Tags currently applied to the subscription level"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the tags resource."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Resources/tags', parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the applied tags."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the resource group the tags were applied to."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "value": "[if(parameters('onlyUpdate'), union(reference(resourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2020-10-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]",
                              "metadata": {
                                "description": "The applied tags."
                              }
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[if(and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-Tags-RG', deployment().name)), '2020-10-01').outputs.name.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-Tags-Sub', deployment().name)), '2020-10-01').outputs.name.value)]",
                      "metadata": {
                        "description": "The name of the tags resource."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "value": "[if(and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-Tags-RG', deployment().name)), '2020-10-01').outputs.tags.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-Tags-Sub', deployment().name)), '2020-10-01').outputs.tags.value)]",
                      "metadata": {
                        "description": "The applied tags."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[if(and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-Tags-RG', deployment().name)), '2020-10-01').outputs.resourceId.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-Tags-Sub', deployment().name)), '2020-10-01').outputs.resourceId.value)]",
                      "metadata": {
                        "description": "The resource ID of the applied tags."
                      }
                    }
                  }
                }
              },
              "metadata": {
                "description": "Resource group tags"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-ra-bastionHost-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varBastionHostName')]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "tags": "[if(empty(parameters('parTags')), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-ra-tags--{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs), createObject('value', parameters('parTags')))]",
                  "vNetId": {
                    "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('parHubVirtualNetworkName'))]"
                  },
                  "isCreateDefaultPublicIP": {
                    "value": true
                  },
                  "publicIPAddressObject": {
                    "value": {
                      "diagnosticLogCategoriesToEnable": [
                        "DDoSMitigationFlowLogs",
                        "DDoSMitigationReports",
                        "DDoSProtectionNotifications"
                      ],
                      "diagnosticMetricsToEnable": [
                        "AllMetrics"
                      ],
                      "name": "[variables('varBastionHostPublicIPAddressName')]",
                      "publicIPAllocationMethod": "[variables('varBastionHostPublicIPAddressAllocationMethod')]",
                      "skuName": "[variables('varBastionHostPublicIPAddressSkuName')]",
                      "skuTier": "Regional"
                    }
                  },
                  "skuType": {
                    "value": "[parameters('parRemoteAccess').bastion.sku]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "4347851662977789004"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Azure Bastion resource."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "vNetId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Shared services Virtual Network resource identifier."
                      }
                    },
                    "azureBastionSubnetPublicIpId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The public ip resource ID to associate to the azureBastionSubnet. If empty, then the public ip that is created as part of this module will be applied to the azureBastionSubnet."
                      }
                    },
                    "isCreateDefaultPublicIP": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies if a public ip should be created by default if one is not provided."
                      }
                    },
                    "publicIPAddressObject": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Specifies the properties of the public IP to create and be used by Azure Bastion. If it's not provided and publicIPAddressResourceId is empty, a '-pip' suffix will be appended to the Bastion's name."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "skuType": {
                      "type": "string",
                      "defaultValue": "Basic",
                      "metadata": {
                        "description": "Optional. The SKU of this Bastion Host."
                      },
                      "allowedValues": [
                        "Basic",
                        "Standard"
                      ]
                    },
                    "disableCopyPaste": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Choose to disable or enable Copy Paste."
                      }
                    },
                    "enableFileCopy": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Choose to disable or enable File Copy."
                      }
                    },
                    "enableIpConnect": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Choose to disable or enable IP Connect."
                      }
                    },
                    "enableShareableLink": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Choose to disable or enable Shareable Link."
                      }
                    },
                    "scaleUnits": {
                      "type": "int",
                      "defaultValue": 2,
                      "metadata": {
                        "description": "Optional. The scale units for the Bastion Host resource."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "BastionAuditLogs"
                      ],
                      "allowedValues": [
                        "BastionAuditLogs"
                      ],
                      "metadata": {
                        "description": "Optional. Optional. The name of bastion logs that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ],
                    "enableTunneling": "[if(equals(parameters('skuType'), 'Standard'), true(), null())]",
                    "scaleUnitsVar": "[if(equals(parameters('skuType'), 'Basic'), 2, parameters('scaleUnits'))]",
                    "subnetVar": {
                      "subnet": {
                        "id": "[format('{0}/subnets/AzureBastionSubnet', parameters('vNetId'))]"
                      }
                    },
                    "existingPip": {
                      "publicIPAddress": {
                        "id": "[parameters('azureBastionSubnetPublicIpId')]"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/bastionHosts",
                      "apiVersion": "2022-01-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('skuType')]"
                      },
                      "properties": "[if(equals(parameters('skuType'), 'Standard'), createObject('scaleUnits', variables('scaleUnitsVar'), 'ipConfigurations', createArray(createObject('name', 'IpConfAzureBastionSubnet', 'properties', union(variables('subnetVar'), if(not(empty(parameters('azureBastionSubnetPublicIpId'))), variables('existingPip'), createObject()), if(parameters('isCreateDefaultPublicIP'), createObject('publicIPAddress', if(and(empty(parameters('azureBastionSubnetPublicIpId')), parameters('isCreateDefaultPublicIP')), createObject('id', reference(resourceId('Microsoft.Resources/deployments', format('{0}-Bastion-PIP', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.resourceId.value), null())), createObject())))), 'enableTunneling', variables('enableTunneling'), 'disableCopyPaste', parameters('disableCopyPaste'), 'enableFileCopy', parameters('enableFileCopy'), 'enableIpConnect', parameters('enableIpConnect'), 'enableShareableLink', parameters('enableShareableLink')), createObject('scaleUnits', variables('scaleUnitsVar'), 'ipConfigurations', createArray(createObject('name', 'IpConfAzureBastionSubnet', 'properties', union(variables('subnetVar'), if(not(empty(parameters('azureBastionSubnetPublicIpId'))), variables('existingPip'), createObject()), if(parameters('isCreateDefaultPublicIP'), createObject('publicIPAddress', if(and(empty(parameters('azureBastionSubnetPublicIpId')), parameters('isCreateDefaultPublicIP')), createObject('id', reference(resourceId('Microsoft.Resources/deployments', format('{0}-Bastion-PIP', uniqueString(deployment().name, parameters('location')))), '2020-10-01').outputs.resourceId.value), null())), createObject()))))))]",
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-Bastion-PIP', uniqueString(deployment().name, parameters('location'))))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/bastionHosts/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/bastionHosts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/bastionHosts/{0}', parameters('name'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/bastionHosts', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[and(empty(parameters('azureBastionSubnetPublicIpId')), parameters('isCreateDefaultPublicIP'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Bastion-PIP', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": "[if(contains(parameters('publicIPAddressObject'), 'name'), createObject('value', parameters('publicIPAddressObject').name), createObject('value', format('{0}-pip', parameters('name'))))]",
                          "diagnosticLogCategoriesToEnable": "[if(contains(parameters('publicIPAddressObject'), 'diagnosticLogCategoriesToEnable'), createObject('value', parameters('publicIPAddressObject').diagnosticLogCategoriesToEnable), createObject('value', createArray('DDoSProtectionNotifications', 'DDoSMitigationFlowLogs', 'DDoSMitigationReports')))]",
                          "diagnosticMetricsToEnable": "[if(contains(parameters('publicIPAddressObject'), 'diagnosticMetricsToEnable'), createObject('value', parameters('publicIPAddressObject').diagnosticMetricsToEnable), createObject('value', createArray('AllMetrics')))]",
                          "diagnosticStorageAccountId": {
                            "value": "[parameters('diagnosticStorageAccountId')]"
                          },
                          "diagnosticLogsRetentionInDays": {
                            "value": "[parameters('diagnosticLogsRetentionInDays')]"
                          },
                          "diagnosticWorkspaceId": {
                            "value": "[parameters('diagnosticWorkspaceId')]"
                          },
                          "diagnosticEventHubAuthorizationRuleId": {
                            "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                          },
                          "diagnosticEventHubName": {
                            "value": "[parameters('diagnosticEventHubName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "lock": {
                            "value": "[parameters('lock')]"
                          },
                          "publicIPAddressVersion": "[if(contains(parameters('publicIPAddressObject'), 'publicIPAddressVersion'), createObject('value', parameters('publicIPAddressObject').publicIPAddressVersion), createObject('value', 'IPv4'))]",
                          "publicIPAllocationMethod": "[if(contains(parameters('publicIPAddressObject'), 'publicIPAllocationMethod'), createObject('value', parameters('publicIPAddressObject').publicIPAllocationMethod), createObject('value', 'Static'))]",
                          "publicIPPrefixResourceId": "[if(contains(parameters('publicIPAddressObject'), 'publicIPPrefixResourceId'), createObject('value', parameters('publicIPAddressObject').publicIPPrefixResourceId), createObject('value', ''))]",
                          "roleAssignments": "[if(contains(parameters('publicIPAddressObject'), 'roleAssignments'), createObject('value', parameters('publicIPAddressObject').roleAssignments), createObject('value', createArray()))]",
                          "skuName": "[if(contains(parameters('publicIPAddressObject'), 'skuName'), createObject('value', parameters('publicIPAddressObject').skuName), createObject('value', 'Standard'))]",
                          "skuTier": "[if(contains(parameters('publicIPAddressObject'), 'skuTier'), createObject('value', parameters('publicIPAddressObject').skuTier), createObject('value', 'Regional'))]",
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "zones": "[if(contains(parameters('publicIPAddressObject'), 'zones'), createObject('value', parameters('publicIPAddressObject').zones), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "13449739070789540681"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the Public IP Address."
                              }
                            },
                            "publicIPPrefixResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                              }
                            },
                            "publicIPAllocationMethod": {
                              "type": "string",
                              "defaultValue": "Dynamic",
                              "allowedValues": [
                                "Dynamic",
                                "Static"
                              ],
                              "metadata": {
                                "description": "Optional. The public IP address allocation method."
                              }
                            },
                            "skuName": {
                              "type": "string",
                              "defaultValue": "Basic",
                              "allowedValues": [
                                "Basic",
                                "Standard"
                              ],
                              "metadata": {
                                "description": "Optional. Name of a public IP address SKU."
                              }
                            },
                            "skuTier": {
                              "type": "string",
                              "defaultValue": "Regional",
                              "allowedValues": [
                                "Global",
                                "Regional"
                              ],
                              "metadata": {
                                "description": "Optional. Tier of a public IP address SKU."
                              }
                            },
                            "zones": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                              }
                            },
                            "publicIPAddressVersion": {
                              "type": "string",
                              "defaultValue": "IPv4",
                              "allowedValues": [
                                "IPv4",
                                "IPv6"
                              ],
                              "metadata": {
                                "description": "Optional. IP address version."
                              }
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int",
                              "defaultValue": 365,
                              "maxValue": 365,
                              "minValue": 0,
                              "metadata": {
                                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                              }
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic storage account."
                              }
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                              }
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                              }
                            },
                            "diagnosticEventHubName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                              }
                            },
                            "lock": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specify the type of lock."
                              },
                              "allowedValues": [
                                "",
                                "CanNotDelete",
                                "ReadOnly"
                              ]
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "diagnosticLogCategoriesToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "DDoSProtectionNotifications",
                                "DDoSMitigationFlowLogs",
                                "DDoSMitigationReports"
                              ],
                              "allowedValues": [
                                "DDoSProtectionNotifications",
                                "DDoSMitigationFlowLogs",
                                "DDoSMitigationReports"
                              ],
                              "metadata": {
                                "description": "Optional. The name of logs that will be streamed."
                              }
                            },
                            "diagnosticMetricsToEnable": {
                              "type": "array",
                              "defaultValue": [
                                "AllMetrics"
                              ],
                              "allowedValues": [
                                "AllMetrics"
                              ],
                              "metadata": {
                                "description": "Optional. The name of metrics that will be streamed."
                              }
                            },
                            "diagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                              "metadata": {
                                "description": "Optional. The name of the diagnostic setting, if deployed."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "diagnosticsLogs",
                                "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              },
                              {
                                "name": "diagnosticsMetrics",
                                "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                "input": {
                                  "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                  "timeGrain": null,
                                  "enabled": true,
                                  "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/publicIPAddresses",
                              "apiVersion": "2021-08-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "sku": {
                                "name": "[parameters('skuName')]",
                                "tier": "[parameters('skuTier')]"
                              },
                              "zones": "[parameters('zones')]",
                              "properties": {
                                "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                                "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                                "publicIPPrefix": "[if(not(empty(parameters('publicIPPrefixResourceId'))), createObject('id', parameters('publicIPPrefixResourceId')), null())]",
                                "idleTimeoutInMinutes": 4,
                                "ipTags": []
                              }
                            },
                            {
                              "condition": "[not(empty(parameters('lock')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                              "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                              "properties": {
                                "level": "[parameters('lock')]",
                                "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                              ]
                            },
                            {
                              "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                              "name": "[parameters('diagnosticSettingsName')]",
                              "properties": {
                                "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                "metrics": "[variables('diagnosticsMetrics')]",
                                "logs": "[variables('diagnosticsLogs')]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                              ]
                            },
                            {
                              "copy": {
                                "name": "publicIpAddress_roleAssignments",
                                "count": "[length(parameters('roleAssignments'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-PIPAddress-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                  "principalIds": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                  },
                                  "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                  "roleDefinitionIdOrName": {
                                    "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                  },
                                  "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                                  "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                                  "resourceId": {
                                    "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "7287021548899153761"
                                    }
                                  },
                                  "parameters": {
                                    "principalIds": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. The IDs of the principals to assign the role to."
                                      }
                                    },
                                    "roleDefinitionIdOrName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource ID of the resource to apply the role assignment to."
                                      }
                                    },
                                    "principalType": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "allowedValues": [
                                        "ServicePrincipal",
                                        "Group",
                                        "User",
                                        "ForeignGroup",
                                        "Device",
                                        ""
                                      ],
                                      "metadata": {
                                        "description": "Optional. The principal type of the assigned principal ID."
                                      }
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The description of the role assignment."
                                      }
                                    },
                                    "condition": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                                      }
                                    },
                                    "conditionVersion": {
                                      "type": "string",
                                      "defaultValue": "2.0",
                                      "allowedValues": [
                                        "2.0"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Version of the condition."
                                      }
                                    },
                                    "delegatedManagedIdentityResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Id of the delegated managed identity resource."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]"
                                    }
                                  },
                                  "resources": [
                                    {
                                      "copy": {
                                        "name": "roleAssignment",
                                        "count": "[length(parameters('principalIds'))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', last(split(parameters('resourceId'), '/')))]",
                                      "name": "[guid(resourceId('Microsoft.Network/publicIPAddresses', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                      "properties": {
                                        "description": "[parameters('description')]",
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                        "principalId": "[parameters('principalIds')[copyIndex()]]",
                                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                        "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                        "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                        "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                                      }
                                    }
                                  ]
                                }
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                              ]
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the public IP address was deployed into."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the public IP address."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the public IP address."
                              }
                            },
                            "ipAddress": {
                              "type": "string",
                              "value": "[if(contains(reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-08-01'), 'ipAddress'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-08-01').ipAddress, '')]",
                              "metadata": {
                                "description": "The public IP address of the public IP address resource."
                              }
                            },
                            "location": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-08-01', 'full').location]",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              }
                            }
                          }
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "azureBastion_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-Bastion-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Network/bastionHosts', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "3587676987040668348"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Id of the delegated managed identity resource."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]"
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/bastionHosts/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Network/bastionHosts', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/bastionHosts', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the Azure Bastion was deployed into."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name the Azure Bastion."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/bastionHosts', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID the Azure Bastion."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/bastionHosts', parameters('name')), '2022-01-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    },
                    "ipConfAzureBastionSubnet": {
                      "type": "object",
                      "value": "[reference(resourceId('Microsoft.Network/bastionHosts', parameters('name')), '2022-01-01').ipConfigurations[0]]",
                      "metadata": {
                        "description": "The public ipconfiguration object for the AzureBastionSubnet."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-ra-tags--{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/AzureBastionSubnet', parameters('parHubVirtualNetworkName')), '/')[0], split(format('{0}/AzureBastionSubnet', parameters('parHubVirtualNetworkName')), '/')[1])]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-nsg-bastion-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varBastionHostNetworkSecurityGroupName')]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "tags": "[if(empty(parameters('parTags')), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-ra-tags--{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs), createObject('value', parameters('parTags')))]",
                  "securityRules": {
                    "value": [
                      {
                        "name": "AllowHttpsInbound",
                        "properties": {
                          "priority": 120,
                          "direction": "Inbound",
                          "access": "Allow",
                          "protocol": "Tcp",
                          "sourceAddressPrefix": "Internet",
                          "sourcePortRange": "*",
                          "destinationAddressPrefix": "*",
                          "destinationPortRange": "443"
                        }
                      },
                      {
                        "name": "AllowGatewayManagerInbound",
                        "properties": {
                          "priority": 130,
                          "direction": "Inbound",
                          "access": "Allow",
                          "protocol": "Tcp",
                          "sourceAddressPrefix": "GatewayManager",
                          "sourcePortRange": "*",
                          "destinationAddressPrefix": "*",
                          "destinationPortRange": "443"
                        }
                      },
                      {
                        "name": "AllowSshRdpOutbound",
                        "properties": {
                          "priority": 100,
                          "direction": "Outbound",
                          "access": "Allow",
                          "protocol": "*",
                          "sourceAddressPrefix": "*",
                          "sourcePortRange": "*",
                          "destinationAddressPrefix": "VirtualNetwork",
                          "destinationPortRanges": [
                            "22",
                            "3389"
                          ]
                        }
                      },
                      {
                        "name": "AllowAzureCloudOutbound",
                        "properties": {
                          "priority": 110,
                          "direction": "Outbound",
                          "access": "Allow",
                          "protocol": "Tcp",
                          "sourceAddressPrefix": "*",
                          "sourcePortRange": "*",
                          "destinationAddressPrefix": "AzureCloud",
                          "destinationPortRange": "443"
                        }
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "7363888954384305308"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Network Security Group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "securityRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the NSG resource."
                      }
                    },
                    "diagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "NetworkSecurityGroupEvent",
                        "NetworkSecurityGroupRuleCounter"
                      ],
                      "allowedValues": [
                        "NetworkSecurityGroupEvent",
                        "NetworkSecurityGroupRuleCounter"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsLogs",
                        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2021-08-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "securityRules",
                            "count": "[length(parameters('securityRules'))]",
                            "input": {
                              "name": "[parameters('securityRules')[copyIndex('securityRules')].name]",
                              "properties": {
                                "protocol": "[parameters('securityRules')[copyIndex('securityRules')].properties.protocol]",
                                "access": "[parameters('securityRules')[copyIndex('securityRules')].properties.access]",
                                "priority": "[parameters('securityRules')[copyIndex('securityRules')].properties.priority]",
                                "direction": "[parameters('securityRules')[copyIndex('securityRules')].properties.direction]",
                                "description": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'description'), parameters('securityRules')[copyIndex('securityRules')].properties.description, '')]",
                                "sourcePortRange": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourcePortRange'), parameters('securityRules')[copyIndex('securityRules')].properties.sourcePortRange, '')]",
                                "sourcePortRanges": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourcePortRanges'), parameters('securityRules')[copyIndex('securityRules')].properties.sourcePortRanges, createArray())]",
                                "destinationPortRange": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationPortRange'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationPortRange, '')]",
                                "destinationPortRanges": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationPortRanges'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationPortRanges, createArray())]",
                                "sourceAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefix'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix, '')]",
                                "destinationAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefix'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix, '')]",
                                "sourceAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefixes'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceAddressPrefixes, createArray())]",
                                "destinationAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefixes'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes, createArray())]",
                                "sourceApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceApplicationSecurityGroups'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceApplicationSecurityGroups, createArray())]",
                                "destinationApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationApplicationSecurityGroups'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationApplicationSecurityGroups, createArray())]"
                              }
                            }
                          }
                        ]
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "logs": "[variables('diagnosticsLogs')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "networkSecurityGroup_securityRules",
                        "count": "[length(parameters('securityRules'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-securityRule-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('securityRules')[copyIndex()].name]"
                          },
                          "networkSecurityGroupName": {
                            "value": "[parameters('name')]"
                          },
                          "protocol": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.protocol]"
                          },
                          "access": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.access]"
                          },
                          "priority": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.priority]"
                          },
                          "direction": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.direction]"
                          },
                          "description": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'description'), createObject('value', parameters('securityRules')[copyIndex()].properties.description), createObject('value', ''))]",
                          "sourcePortRange": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourcePortRange'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourcePortRange), createObject('value', ''))]",
                          "sourcePortRanges": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourcePortRanges'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourcePortRanges), createObject('value', createArray()))]",
                          "destinationPortRange": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationPortRange'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationPortRange), createObject('value', ''))]",
                          "destinationPortRanges": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationPortRanges'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationPortRanges), createObject('value', createArray()))]",
                          "sourceAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceAddressPrefix'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceAddressPrefix), createObject('value', ''))]",
                          "destinationAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationAddressPrefix'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationAddressPrefix), createObject('value', ''))]",
                          "sourceAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceAddressPrefixes'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceAddressPrefixes), createObject('value', createArray()))]",
                          "destinationAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationAddressPrefixes'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationAddressPrefixes), createObject('value', createArray()))]",
                          "sourceApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceApplicationSecurityGroups'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceApplicationSecurityGroups), createObject('value', createArray()))]",
                          "destinationApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationApplicationSecurityGroups'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationApplicationSecurityGroups), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "9882808433260651098"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the security rule."
                              }
                            },
                            "networkSecurityGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent network security group to deploy the security rule into. Required if the template is used in a standalone deployment."
                              }
                            },
                            "access": {
                              "type": "string",
                              "defaultValue": "Deny",
                              "allowedValues": [
                                "Allow",
                                "Deny"
                              ],
                              "metadata": {
                                "description": "Optional. Whether network traffic is allowed or denied."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "maxLength": 140,
                              "metadata": {
                                "description": "Optional. A description for this rule."
                              }
                            },
                            "destinationAddressPrefix": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The destination address prefix. CIDR or destination IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used."
                              }
                            },
                            "destinationAddressPrefixes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The destination address prefixes. CIDR or destination IP ranges."
                              }
                            },
                            "destinationApplicationSecurityGroups": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The application security group specified as destination."
                              }
                            },
                            "destinationPortRange": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The destination port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                              }
                            },
                            "destinationPortRanges": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The destination port ranges."
                              }
                            },
                            "direction": {
                              "type": "string",
                              "allowedValues": [
                                "Inbound",
                                "Outbound"
                              ],
                              "metadata": {
                                "description": "Required. The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic."
                              }
                            },
                            "priority": {
                              "type": "int",
                              "metadata": {
                                "description": "Required. The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule."
                              }
                            },
                            "protocol": {
                              "type": "string",
                              "allowedValues": [
                                "*",
                                "Ah",
                                "Esp",
                                "Icmp",
                                "Tcp",
                                "Udp"
                              ],
                              "metadata": {
                                "description": "Required. Network protocol this rule applies to."
                              }
                            },
                            "sourceAddressPrefix": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The CIDR or source IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used. If this is an ingress rule, specifies where network traffic originates from."
                              }
                            },
                            "sourceAddressPrefixes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The CIDR or source IP ranges."
                              }
                            },
                            "sourceApplicationSecurityGroups": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The application security group specified as source."
                              }
                            },
                            "sourcePortRange": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The source port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                              }
                            },
                            "sourcePortRanges": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The source port ranges."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                              "apiVersion": "2021-05-01",
                              "name": "[format('{0}/{1}', parameters('networkSecurityGroupName'), parameters('name'))]",
                              "properties": {
                                "access": "[parameters('access')]",
                                "description": "[parameters('description')]",
                                "destinationAddressPrefix": "[parameters('destinationAddressPrefix')]",
                                "destinationAddressPrefixes": "[parameters('destinationAddressPrefixes')]",
                                "destinationApplicationSecurityGroups": "[parameters('destinationApplicationSecurityGroups')]",
                                "destinationPortRange": "[parameters('destinationPortRange')]",
                                "destinationPortRanges": "[parameters('destinationPortRanges')]",
                                "direction": "[parameters('direction')]",
                                "priority": "[parameters('priority')]",
                                "protocol": "[parameters('protocol')]",
                                "sourceAddressPrefix": "[parameters('sourceAddressPrefix')]",
                                "sourceAddressPrefixes": "[parameters('sourceAddressPrefixes')]",
                                "sourceApplicationSecurityGroups": "[parameters('sourceApplicationSecurityGroups')]",
                                "sourcePortRange": "[parameters('sourcePortRange')]",
                                "sourcePortRanges": "[parameters('sourcePortRanges')]"
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The resource group the security rule was deployed into."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', parameters('networkSecurityGroupName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the security rule."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the security rule."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "networkSecurityGroup_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-NSG-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "6538834856152168835"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Network/networkSecurityGroups', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the network security group was deployed into."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the network security group."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the network security group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/networkSecurityGroups', parameters('name')), '2021-08-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-ra-tags--{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[parameters('parRemoteAccess').bastion.linux.enable]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-ra-linux-net-interface-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varLinuxNetworkInterfaceName')]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "tags": "[if(empty(parameters('parTags')), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-ra-tags--{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs), createObject('value', parameters('parTags')))]",
                  "networkSecurityGroupResourceId": {
                    "value": "[parameters('parHubNetworkSecurityGroupResourceId')]"
                  },
                  "ipConfigurations": {
                    "value": [
                      {
                        "name": "[variables('varLinuxNetworkInterfaceIpConfigurationName')]",
                        "subnetResourceId": "[parameters('parHubSubnetResourceId')]",
                        "privateIPAllocationMethod": "[parameters('parRemoteAccess').bastion.linux.networkInterfacePrivateIPAddressAllocationMethod]"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "3250127774715033009"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the network interface."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableIPForwarding": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether IP forwarding is enabled on this network interface."
                      }
                    },
                    "enableAcceleratedNetworking": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If the network interface is accelerated networking enabled."
                      }
                    },
                    "dnsServers": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection."
                      }
                    },
                    "networkSecurityGroupResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The network security group (NSG) to attach to the network interface."
                      }
                    },
                    "ipConfigurations": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. A list of IPConfigurations of the network interface."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource identifier of log analytics."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2021-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "ipConfigurations",
                            "count": "[length(parameters('ipConfigurations'))]",
                            "input": {
                              "name": "[if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].name)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].name, null())]",
                              "properties": {
                                "primary": "[if(equals(copyIndex('ipConfigurations'), 0), true(), false())]",
                                "privateIPAllocationMethod": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod, null()), null())]",
                                "privateIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddress'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress, null()), null())]",
                                "publicIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'publicIPAddressResourceId'), if(not(equals(parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId, null())), createObject('id', parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId), null()), null())]",
                                "subnet": {
                                  "id": "[parameters('ipConfigurations')[copyIndex('ipConfigurations')].subnetResourceId]"
                                },
                                "loadBalancerBackendAddressPools": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerBackendAddressPools'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].loadBalancerBackendAddressPools, null())]",
                                "applicationSecurityGroups": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationSecurityGroups'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].applicationSecurityGroups, null())]",
                                "applicationGatewayBackendAddressPools": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationGatewayBackendAddressPools'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].applicationGatewayBackendAddressPools, null())]",
                                "gatewayLoadBalancer": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'gatewayLoadBalancer'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].gatewayLoadBalancer, null())]",
                                "loadBalancerInboundNatRules": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerInboundNatRules'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].loadBalancerInboundNatRules, null())]",
                                "privateIPAddressVersion": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddressVersion'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddressVersion, null())]",
                                "virtualNetworkTaps": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'virtualNetworkTaps'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].virtualNetworkTaps, null())]"
                              }
                            }
                          }
                        ],
                        "enableIPForwarding": "[parameters('enableIPForwarding')]",
                        "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                        "dnsSettings": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', parameters('dnsServers')), null())]",
                        "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]"
                      }
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "networkInterface_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-NIC-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "18384779621422977360"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Network/networkInterfaces', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the deployed resource."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the deployed resource."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group of the deployed resource."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('name')), '2021-05-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-ra-tags--{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-ra-lx-avset-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('{0}-linux-avset', take(toLower(uniqueString(resourceGroup().name)), 10))]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "availabilitySetSku": {
                    "value": "Aligned"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "2239883326543378266"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the availability set that is being created."
                      }
                    },
                    "availabilitySetFaultDomain": {
                      "type": "int",
                      "defaultValue": 2,
                      "metadata": {
                        "description": "Optional. The number of fault domains to use."
                      }
                    },
                    "availabilitySetUpdateDomain": {
                      "type": "int",
                      "defaultValue": 5,
                      "metadata": {
                        "description": "Optional. The number of update domains to use."
                      }
                    },
                    "availabilitySetSku": {
                      "type": "string",
                      "defaultValue": "Aligned",
                      "metadata": {
                        "description": "Optional. SKU of the availability set.\r\n- Use \\'Aligned\\' for virtual machines with managed disks.\r\n- Use \\'Classic\\' for virtual machines with unmanaged disks.\r\n"
                      }
                    },
                    "proximityPlacementGroupId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of a proximity placement group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Resource location."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the availability set resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/availabilitySets",
                      "apiVersion": "2021-07-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "platformFaultDomainCount": "[parameters('availabilitySetFaultDomain')]",
                        "platformUpdateDomainCount": "[parameters('availabilitySetUpdateDomain')]",
                        "proximityPlacementGroup": "[if(not(empty(parameters('proximityPlacementGroupId'))), createObject('id', parameters('proximityPlacementGroupId')), null())]"
                      },
                      "sku": {
                        "name": "[parameters('availabilitySetSku')]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Compute/availabilitySets/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/availabilitySets', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "availabilitySet_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-AvSet-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Compute/availabilitySets', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "227634743979240944"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Compute/availabilitySets/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Compute/availabilitySets', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/availabilitySets', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the availability set."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Compute/availabilitySets', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the availability set."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the availability set was deployed into."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Compute/availabilitySets', parameters('name')), '2021-07-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('parRemoteAccess').bastion.linux.enable]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-ra-linux-vm-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('parRemoteAccess').bastion.linux.vmName]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "tags": "[if(empty(parameters('parTags')), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-ra-tags--{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs), createObject('value', parameters('parTags')))]",
                  "disablePasswordAuthentication": {
                    "value": "[parameters('parRemoteAccess').bastion.linux.disablePasswordAuthentication]"
                  },
                  "adminUsername": {
                    "value": "[parameters('parRemoteAccess').bastion.linux.vmAdminUsername]"
                  },
                  "adminPassword": {
                    "value": "[parameters('parRemoteAccess').bastion.linux.vmAdminPasswordOrKey]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('parLogAnalyticsWorkspaceId')]"
                  },
                  "availabilitySetResourceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('deploy-ra-lx-avset-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
                  },
                  "encryptionAtHost": {
                    "value": "[parameters('parRemoteAccess').bastion.encryptionAtHost]"
                  },
                  "imageReference": {
                    "value": {
                      "offer": "[parameters('parRemoteAccess').bastion.linux.vmImageOffer]",
                      "publisher": "[parameters('parRemoteAccess').bastion.linux.vmImagePublisher]",
                      "sku": "[parameters('parRemoteAccess').bastion.linux.vmImageSku]",
                      "version": "[parameters('parRemoteAccess').bastion.linux.vmImageVersion]"
                    }
                  },
                  "nicConfigurations": {
                    "value": [
                      {
                        "ipConfigurations": [
                          {
                            "name": "linux-ipconfig01",
                            "subnetResourceId": "[parameters('parHubSubnetResourceId')]"
                          }
                        ],
                        "nicSuffix": "-nic-01",
                        "enableAcceleratedNetworking": false
                      }
                    ]
                  },
                  "osDisk": {
                    "value": {
                      "diskSizeGB": "128",
                      "createOption": "[parameters('parRemoteAccess').bastion.linux.vmOsDiskCreateOption]",
                      "managedDisk": {
                        "storageAccountType": "[parameters('parRemoteAccess').bastion.linux.vmOsDiskType]"
                      }
                    }
                  },
                  "osType": {
                    "value": "Linux"
                  },
                  "vmSize": {
                    "value": "[parameters('parRemoteAccess').bastion.linux.vmSize]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "9440584436086809660"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the virtual machine to be created. You should use a unique prefix to reduce name collisions in Active Directory. If no value is provided, a 10 character long unique string will be generated based on the Resource Group's name."
                      }
                    },
                    "vmName": {
                      "type": "string",
                      "defaultValue": "[take(toLower(uniqueString(parameters('name'), resourceGroup().name)), 10)]"
                    },
                    "vmComputerNamesTransformation": {
                      "type": "string",
                      "defaultValue": "none",
                      "allowedValues": [
                        "none",
                        "uppercase",
                        "lowercase"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies whether the computer names should be transformed. The transformation is performed on all computer names. Available transformations are 'none' (Default), 'uppercase' and 'lowercase'."
                      }
                    },
                    "vmSize": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the size for the VMs."
                      }
                    },
                    "encryptionAtHost": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine. This will enable the encryption for all the disks including Resource/Temp disk at host itself. For security reasons, it is recommended to set encryptionAtHost to True. Restrictions: Cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                      }
                    },
                    "securityType": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specifies the SecurityType of the virtual machine. It is set as TrustedLaunch to enable UefiSettings."
                      }
                    },
                    "secureBootEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Specifies whether secure boot should be enabled on the virtual machine. This parameter is part of the UefiSettings. SecurityType should be set to TrustedLaunch to enable UefiSettings."
                      }
                    },
                    "vTpmEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Specifies whether vTPM should be enabled on the virtual machine. This parameter is part of the UefiSettings.  SecurityType should be set to TrustedLaunch to enable UefiSettings."
                      }
                    },
                    "imageReference": {
                      "type": "object",
                      "metadata": {
                        "description": "Required. OS image reference. In case of marketplace images, it's the combination of the publisher, offer, sku, version attributes. In case of custom images it's the resource ID of the custom image."
                      }
                    },
                    "plan": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use."
                      }
                    },
                    "osDisk": {
                      "type": "object",
                      "metadata": {
                        "description": "Required. Specifies the OS disk. For security reasons, it is recommended to specify DiskEncryptionSet into the osDisk object.  Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                      }
                    },
                    "dataDisks": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Specifies the data disks. For security reasons, it is recommended to specify DiskEncryptionSet into the dataDisk object. Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                      }
                    },
                    "ultraSSDEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled."
                      }
                    },
                    "adminUsername": {
                      "type": "secureString",
                      "metadata": {
                        "description": "Required. Administrator username."
                      }
                    },
                    "adminPassword": {
                      "type": "secureString",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. When specifying a Windows Virtual Machine, this value should be passed."
                      }
                    },
                    "customData": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Custom data associated to the VM, this value will be automatically converted into base64 to account for the expected VM format."
                      }
                    },
                    "certificatesToBeInstalled": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Specifies set of certificates that should be installed onto the virtual machine."
                      }
                    },
                    "vmPriority": {
                      "type": "string",
                      "defaultValue": "Regular",
                      "allowedValues": [
                        "Regular",
                        "Low",
                        "Spot"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies the priority for the virtual machine."
                      }
                    },
                    "enableEvictionPolicy": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Specifies the eviction policy for the low priority virtual machine. Will result in 'Deallocate' eviction policy."
                      }
                    },
                    "maxPriceForLowPriorityVm": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specifies the maximum price you are willing to pay for a low priority VM/VMSS. This price is in US Dollars."
                      }
                    },
                    "dedicatedHostId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specifies resource ID about the dedicated host that the virtual machine resides in."
                      }
                    },
                    "licenseType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "Windows_Client",
                        "Windows_Server",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system."
                      }
                    },
                    "publicKeys": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The list of SSH public keys used to authenticate with linux based VMs."
                      }
                    },
                    "systemAssignedIdentity": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enables system assigned managed identity on the resource."
                      }
                    },
                    "userAssignedIdentities": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The ID(s) to assign to the resource."
                      }
                    },
                    "bootDiagnostics": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Whether boot diagnostics should be enabled on the Virtual Machine. Boot diagnostics will be enabled with a managed storage account if no bootDiagnosticsStorageAccountName value is provided. If bootDiagnostics and bootDiagnosticsStorageAccountName values are not provided, boot diagnostics will be disabled."
                      }
                    },
                    "bootDiagnosticStorageAccountName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Custom storage account used to store boot diagnostic information. Boot diagnostics will be enabled with a custom storage account if a value is provided."
                      }
                    },
                    "bootDiagnosticStorageAccountUri": {
                      "type": "string",
                      "defaultValue": "[format('.blob.{0}/', environment().suffixes.storage)]",
                      "metadata": {
                        "description": "Optional. Storage account boot diagnostic base URI."
                      }
                    },
                    "proximityPlacementGroupResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of a proximity placement group."
                      }
                    },
                    "availabilitySetResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of an availability set. Cannot be used in combination with availability zone nor scale set."
                      }
                    },
                    "availabilityZone": {
                      "type": "int",
                      "defaultValue": 0,
                      "allowedValues": [
                        0,
                        1,
                        2,
                        3
                      ],
                      "metadata": {
                        "description": "Optional. If set to 1, 2 or 3, the availability zone for all VMs is hardcoded to that value. If zero, then availability zones is not used. Cannot be used in combination with availability set nor scale set."
                      }
                    },
                    "nicConfigurations": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. Configures NICs and PIPs."
                      }
                    },
                    "pipDiagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the PIP diagnostic setting, if deployed."
                      }
                    },
                    "pipdiagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "DDoSProtectionNotifications",
                        "DDoSMitigationFlowLogs",
                        "DDoSMitigationReports"
                      ],
                      "allowedValues": [
                        "DDoSProtectionNotifications",
                        "DDoSMitigationFlowLogs",
                        "DDoSMitigationReports"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "pipdiagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "nicDiagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the NIC diagnostic setting, if deployed."
                      }
                    },
                    "nicdiagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "backupVaultName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Recovery service vault name to add VMs to backup."
                      }
                    },
                    "backupVaultResourceGroup": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]",
                      "metadata": {
                        "description": "Optional. Resource group of the backup recovery service vault. If not provided the current resource group name is considered by default."
                      }
                    },
                    "backupPolicyName": {
                      "type": "string",
                      "defaultValue": "DefaultPolicy",
                      "metadata": {
                        "description": "Optional. Backup policy the VMs should be using for backup. If not provided, it will use the DefaultPolicy from the backup recovery service vault."
                      }
                    },
                    "enableServerSideEncryption": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Specifies if Windows VM disks should be encrypted with Server-side encryption + Customer managed Key."
                      }
                    },
                    "allowExtensionOperations": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine."
                      }
                    },
                    "extensionDomainJoinPassword": {
                      "type": "secureString",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Required if name is specified. Password of the user specified in user parameter."
                      }
                    },
                    "extensionDomainJoinConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Domain Join] extension. Must at least contain the [\"enabled\": true] property to be executed."
                      }
                    },
                    "extensionAntiMalwareConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Anti Malware] extension. Must at least contain the [\"enabled\": true] property to be executed."
                      }
                    },
                    "extensionMonitoringAgentConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Monitoring Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
                      }
                    },
                    "monitoringWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the monitoring log analytics workspace. Must be set when extensionMonitoringAgentConfig is set to true."
                      }
                    },
                    "extensionDependencyAgentConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Dependency Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
                      }
                    },
                    "extensionNetworkWatcherAgentConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Network Watcher Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
                      }
                    },
                    "extensionDiskEncryptionConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Disk Encryption] extension. Must at least contain the [\"enabled\": true] property to be executed."
                      }
                    },
                    "extensionDSCConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Desired State Configuration] extension. Must at least contain the [\"enabled\": true] property to be executed."
                      }
                    },
                    "extensionCustomScriptConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false,
                        "fileData": []
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Custom Script] extension. Must at least contain the [\"enabled\": true] property to be executed."
                      }
                    },
                    "extensionCustomScriptProtectedSetting": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "baseTime": {
                      "type": "string",
                      "defaultValue": "[utcNow('u')]",
                      "metadata": {
                        "description": "Generated. Do not provide a value! This date value is used to generate a registration token."
                      }
                    },
                    "sasTokenValidityLength": {
                      "type": "string",
                      "defaultValue": "PT8H",
                      "metadata": {
                        "description": "Optional. SAS token validity length to use to download files from storage accounts. Usage: 'PT8H' - valid for 8 hours; 'P5D' - valid for 5 days; 'P1Y' - valid for 1 year. When not provided, the SAS token will be valid for 8 hours."
                      }
                    },
                    "osType": {
                      "type": "string",
                      "allowedValues": [
                        "Windows",
                        "Linux"
                      ],
                      "metadata": {
                        "description": "Required. The chosen OS type."
                      }
                    },
                    "disablePasswordAuthentication": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Specifies whether password authentication should be disabled."
                      }
                    },
                    "provisionVMAgent": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later."
                      }
                    },
                    "enableAutomaticUpdates": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning."
                      }
                    },
                    "timeZone": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specifies the time zone of the virtual machine. e.g. 'Pacific Standard Time'. Possible values can be `TimeZoneInfo.id` value from time zones returned by `TimeZoneInfo.GetSystemTimeZones`."
                      }
                    },
                    "additionalUnattendContent": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. - AdditionalUnattendContent object."
                      }
                    },
                    "winRM": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell. - WinRMConfiguration object."
                      }
                    },
                    "configurationProfile": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesProduction",
                        "/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesDevTest",
                        ""
                      ],
                      "metadata": {
                        "description": "Required. The configuration profile of automanage."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "publicKeysFormatted",
                        "count": "[length(parameters('publicKeys'))]",
                        "input": {
                          "path": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].path]",
                          "keyData": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].keyData]"
                        }
                      }
                    ],
                    "vmComputerNameTransformed": "[if(equals(parameters('vmComputerNamesTransformation'), 'uppercase'), toUpper(parameters('name')), if(equals(parameters('vmComputerNamesTransformation'), 'lowercase'), toLower(parameters('name')), parameters('name')))]",
                    "linuxConfiguration": {
                      "disablePasswordAuthentication": "[parameters('disablePasswordAuthentication')]",
                      "ssh": {
                        "publicKeys": "[variables('publicKeysFormatted')]"
                      },
                      "provisionVMAgent": "[parameters('provisionVMAgent')]"
                    },
                    "windowsConfiguration": {
                      "provisionVMAgent": "[parameters('provisionVMAgent')]",
                      "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
                      "timeZone": "[if(empty(parameters('timeZone')), null(), parameters('timeZone'))]",
                      "additionalUnattendContent": "[if(empty(parameters('additionalUnattendContent')), null(), parameters('additionalUnattendContent'))]",
                      "winRM": "[if(not(empty(parameters('winRM'))), createObject('listeners', parameters('winRM')), null())]"
                    },
                    "accountSasProperties": {
                      "signedServices": "b",
                      "signedPermission": "r",
                      "signedExpiry": "[dateTimeAdd(parameters('baseTime'), parameters('sasTokenValidityLength'))]",
                      "signedResourceTypes": "o",
                      "signedProtocol": "https"
                    },
                    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
                    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), createObject())), createObject())]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-07-01",
                      "name": "[parameters('vmName')]",
                      "location": "[parameters('location')]",
                      "identity": "[variables('identity')]",
                      "tags": "[parameters('tags')]",
                      "zones": "[if(not(equals(parameters('availabilityZone'), 0)), array(parameters('availabilityZone')), null())]",
                      "plan": "[if(not(empty(parameters('plan'))), parameters('plan'), null())]",
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "[parameters('vmSize')]"
                        },
                        "securityProfile": {
                          "encryptionAtHost": "[if(parameters('encryptionAtHost'), parameters('encryptionAtHost'), null())]",
                          "securityType": "[parameters('securityType')]",
                          "uefiSettings": "[if(equals(parameters('securityType'), 'TrustedLaunch'), createObject('secureBootEnabled', parameters('secureBootEnabled'), 'vTpmEnabled', parameters('vTpmEnabled')), null())]"
                        },
                        "storageProfile": {
                          "copy": [
                            {
                              "name": "dataDisks",
                              "count": "[length(parameters('dataDisks'))]",
                              "input": {
                                "lun": "[copyIndex('dataDisks')]",
                                "name": "[format('{0}-disk-data-{1}', parameters('vmName'), padLeft(add(copyIndex('dataDisks'), 1), 2, '0'))]",
                                "diskSizeGB": "[parameters('dataDisks')[copyIndex('dataDisks')].diskSizeGB]",
                                "createOption": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')], 'createOption'), parameters('dataDisks')[copyIndex('dataDisks')].createOption, 'Empty')]",
                                "deleteOption": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')], 'deleteOption'), parameters('dataDisks')[copyIndex('dataDisks')].deleteOption, 'Delete')]",
                                "caching": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')], 'caching'), parameters('dataDisks')[copyIndex('dataDisks')].caching, 'ReadOnly')]",
                                "managedDisk": {
                                  "storageAccountType": "[parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.storageAccountType]",
                                  "diskEncryptionSet": {
                                    "id": "[if(parameters('enableServerSideEncryption'), parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.diskEncryptionSet.id, null())]"
                                  }
                                }
                              }
                            }
                          ],
                          "imageReference": "[parameters('imageReference')]",
                          "osDisk": {
                            "name": "[format('{0}-disk-os-01', parameters('vmName'))]",
                            "createOption": "[if(contains(parameters('osDisk'), 'createOption'), parameters('osDisk').createOption, 'FromImage')]",
                            "deleteOption": "[if(contains(parameters('osDisk'), 'deleteOption'), parameters('osDisk').deleteOption, 'Delete')]",
                            "diskSizeGB": "[parameters('osDisk').diskSizeGB]",
                            "caching": "[if(contains(parameters('osDisk'), 'caching'), parameters('osDisk').caching, 'ReadOnly')]",
                            "managedDisk": {
                              "storageAccountType": "[parameters('osDisk').managedDisk.storageAccountType]",
                              "diskEncryptionSet": "[if(contains(parameters('osDisk').managedDisk, 'diskEncryptionSet'), parameters('osDisk').managedDisk.diskEncryptionSet, null())]"
                            }
                          }
                        },
                        "additionalCapabilities": {
                          "ultraSSDEnabled": "[parameters('ultraSSDEnabled')]"
                        },
                        "osProfile": {
                          "computerName": "[variables('vmComputerNameTransformed')]",
                          "adminUsername": "[parameters('adminUsername')]",
                          "adminPassword": "[parameters('adminPassword')]",
                          "customData": "[if(not(empty(parameters('customData'))), base64(parameters('customData')), null())]",
                          "windowsConfiguration": "[if(equals(parameters('osType'), 'Windows'), variables('windowsConfiguration'), null())]",
                          "linuxConfiguration": "[if(equals(parameters('osType'), 'Linux'), variables('linuxConfiguration'), null())]",
                          "secrets": "[parameters('certificatesToBeInstalled')]",
                          "allowExtensionOperations": "[parameters('allowExtensionOperations')]"
                        },
                        "networkProfile": {
                          "copy": [
                            {
                              "name": "networkInterfaces",
                              "count": "[length(parameters('nicConfigurations'))]",
                              "input": {
                                "properties": {
                                  "deleteOption": "[if(contains(parameters('nicConfigurations')[copyIndex('networkInterfaces')], 'deleteOption'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].deleteOption, 'Delete')]",
                                  "primary": "[if(equals(copyIndex('networkInterfaces'), 0), true(), false())]"
                                },
                                "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', parameters('name'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].nicSuffix))]"
                              }
                            }
                          ]
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), true(), parameters('bootDiagnostics'))]",
                            "storageUri": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), format('https://{0}{1}', parameters('bootDiagnosticStorageAccountName'), parameters('bootDiagnosticStorageAccountUri')), null())]"
                          }
                        },
                        "availabilitySet": "[if(not(empty(parameters('availabilitySetResourceId'))), createObject('id', parameters('availabilitySetResourceId')), null())]",
                        "proximityPlacementGroup": "[if(not(empty(parameters('proximityPlacementGroupResourceId'))), createObject('id', parameters('proximityPlacementGroupResourceId')), null())]",
                        "priority": "[parameters('vmPriority')]",
                        "evictionPolicy": "[if(parameters('enableEvictionPolicy'), 'Deallocate', null())]",
                        "billingProfile": "[if(and(not(empty(parameters('vmPriority'))), not(empty(parameters('maxPriceForLowPriorityVm')))), createObject('maxPrice', parameters('maxPriceForLowPriorityVm')), null())]",
                        "host": "[if(not(empty(parameters('dedicatedHostId'))), createObject('id', parameters('dedicatedHostId')), null())]",
                        "licenseType": "[if(not(empty(parameters('licenseType'))), parameters('licenseType'), null())]"
                      },
                      "dependsOn": [
                        "vm_nic"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('configurationProfile')))]",
                      "type": "Microsoft.Automanage/configurationProfileAssignments",
                      "apiVersion": "2021-04-30-preview",
                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('vmName'))]",
                      "name": "default",
                      "properties": {
                        "configurationProfile": "[parameters('configurationProfile')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('vmName'))]",
                      "name": "[format('{0}-{1}-lock', parameters('vmName'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "vm_nic",
                        "count": "[length(parameters('nicConfigurations'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-Nic-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "networkInterfaceName": {
                            "value": "[format('{0}{1}', parameters('name'), parameters('nicConfigurations')[copyIndex()].nicSuffix)]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "enableIPForwarding": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableIPForwarding'), createObject('value', if(not(empty(parameters('nicConfigurations')[copyIndex()].enableIPForwarding)), parameters('nicConfigurations')[copyIndex()].enableIPForwarding, false())), createObject('value', false()))]",
                          "enableAcceleratedNetworking": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableAcceleratedNetworking'), createObject('value', parameters('nicConfigurations')[copyIndex()].enableAcceleratedNetworking), createObject('value', true()))]",
                          "dnsServers": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'dnsServers'), createObject('value', if(not(empty(parameters('nicConfigurations')[copyIndex()].dnsServers)), parameters('nicConfigurations')[copyIndex()].dnsServers, createArray())), createObject('value', createArray()))]",
                          "networkSecurityGroupResourceId": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'networkSecurityGroupResourceId'), createObject('value', parameters('nicConfigurations')[copyIndex()].networkSecurityGroupResourceId), createObject('value', ''))]",
                          "ipConfigurations": {
                            "value": "[parameters('nicConfigurations')[copyIndex()].ipConfigurations]"
                          },
                          "lock": {
                            "value": "[parameters('lock')]"
                          },
                          "diagnosticStorageAccountId": {
                            "value": "[parameters('diagnosticStorageAccountId')]"
                          },
                          "diagnosticLogsRetentionInDays": {
                            "value": "[parameters('diagnosticLogsRetentionInDays')]"
                          },
                          "diagnosticWorkspaceId": {
                            "value": "[parameters('diagnosticWorkspaceId')]"
                          },
                          "diagnosticEventHubAuthorizationRuleId": {
                            "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                          },
                          "diagnosticEventHubName": {
                            "value": "[parameters('diagnosticEventHubName')]"
                          },
                          "pipDiagnosticSettingsName": {
                            "value": "[parameters('pipDiagnosticSettingsName')]"
                          },
                          "nicDiagnosticSettingsName": {
                            "value": "[parameters('nicDiagnosticSettingsName')]"
                          },
                          "pipdiagnosticMetricsToEnable": {
                            "value": "[parameters('pipdiagnosticMetricsToEnable')]"
                          },
                          "pipdiagnosticLogCategoriesToEnable": {
                            "value": "[parameters('pipdiagnosticLogCategoriesToEnable')]"
                          },
                          "nicDiagnosticMetricsToEnable": {
                            "value": "[parameters('nicdiagnosticMetricsToEnable')]"
                          },
                          "roleAssignments": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'roleAssignments'), createObject('value', if(not(empty(parameters('nicConfigurations')[copyIndex()].roleAssignments)), parameters('nicConfigurations')[copyIndex()].roleAssignments, createArray())), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "16456921303261913725"
                            }
                          },
                          "parameters": {
                            "networkInterfaceName": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "enableIPForwarding": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "enableAcceleratedNetworking": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "dnsServers": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "networkSecurityGroupResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The network security group (NSG) to attach to the network interface."
                              }
                            },
                            "ipConfigurations": {
                              "type": "array"
                            },
                            "lock": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string"
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int"
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string"
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string"
                            },
                            "diagnosticEventHubName": {
                              "type": "string"
                            },
                            "pipdiagnosticMetricsToEnable": {
                              "type": "array"
                            },
                            "pipdiagnosticLogCategoriesToEnable": {
                              "type": "array"
                            },
                            "nicDiagnosticMetricsToEnable": {
                              "type": "array"
                            },
                            "roleAssignments": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            },
                            "pipDiagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('virtualMachineName'))]",
                              "metadata": {
                                "description": "Optional. The name of the PIP diagnostic setting, if deployed."
                              }
                            },
                            "nicDiagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('virtualMachineName'))]",
                              "metadata": {
                                "description": "Optional. The name of the NIC diagnostic setting, if deployed."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[contains(parameters('ipConfigurations')[copyIndex()], 'pipconfiguration')]",
                              "copy": {
                                "name": "networkInterface_publicIPAddresses",
                                "count": "[length(parameters('ipConfigurations'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-publicIP-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurations')[copyIndex()].pipconfiguration.publicIpNameSuffix)]"
                                  },
                                  "diagnosticEventHubAuthorizationRuleId": {
                                    "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                                  },
                                  "diagnosticEventHubName": {
                                    "value": "[parameters('diagnosticEventHubName')]"
                                  },
                                  "diagnosticLogCategoriesToEnable": {
                                    "value": "[parameters('pipdiagnosticLogCategoriesToEnable')]"
                                  },
                                  "diagnosticLogsRetentionInDays": {
                                    "value": "[parameters('diagnosticLogsRetentionInDays')]"
                                  },
                                  "diagnosticMetricsToEnable": {
                                    "value": "[parameters('pipdiagnosticMetricsToEnable')]"
                                  },
                                  "diagnosticSettingsName": {
                                    "value": "[parameters('pipDiagnosticSettingsName')]"
                                  },
                                  "diagnosticStorageAccountId": {
                                    "value": "[parameters('diagnosticStorageAccountId')]"
                                  },
                                  "diagnosticWorkspaceId": {
                                    "value": "[parameters('diagnosticWorkspaceId')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "lock": {
                                    "value": "[parameters('lock')]"
                                  },
                                  "publicIPAddressVersion": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'publicIPAddressVersion'), createObject('value', parameters('ipConfigurations')[copyIndex()].publicIPAddressVersion), createObject('value', 'IPv4'))]",
                                  "publicIPAllocationMethod": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'publicIPAllocationMethod'), createObject('value', parameters('ipConfigurations')[copyIndex()].publicIPAllocationMethod), createObject('value', 'Static'))]",
                                  "publicIPPrefixResourceId": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'publicIPPrefixResourceId'), createObject('value', parameters('ipConfigurations')[copyIndex()].publicIPPrefixResourceId), createObject('value', ''))]",
                                  "roleAssignments": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'roleAssignments'), createObject('value', parameters('ipConfigurations')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
                                  "skuName": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'skuName'), createObject('value', parameters('ipConfigurations')[copyIndex()].skuName), createObject('value', 'Standard'))]",
                                  "skuTier": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'skuTier'), createObject('value', parameters('ipConfigurations')[copyIndex()].skuTier), createObject('value', 'Regional'))]",
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "zones": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'zones'), createObject('value', parameters('ipConfigurations')[copyIndex()].zones), createObject('value', createArray()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "13449739070789540681"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the Public IP Address."
                                      }
                                    },
                                    "publicIPPrefixResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                                      }
                                    },
                                    "publicIPAllocationMethod": {
                                      "type": "string",
                                      "defaultValue": "Dynamic",
                                      "allowedValues": [
                                        "Dynamic",
                                        "Static"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The public IP address allocation method."
                                      }
                                    },
                                    "skuName": {
                                      "type": "string",
                                      "defaultValue": "Basic",
                                      "allowedValues": [
                                        "Basic",
                                        "Standard"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Name of a public IP address SKU."
                                      }
                                    },
                                    "skuTier": {
                                      "type": "string",
                                      "defaultValue": "Regional",
                                      "allowedValues": [
                                        "Global",
                                        "Regional"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Tier of a public IP address SKU."
                                      }
                                    },
                                    "zones": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                                      }
                                    },
                                    "publicIPAddressVersion": {
                                      "type": "string",
                                      "defaultValue": "IPv4",
                                      "allowedValues": [
                                        "IPv4",
                                        "IPv6"
                                      ],
                                      "metadata": {
                                        "description": "Optional. IP address version."
                                      }
                                    },
                                    "diagnosticLogsRetentionInDays": {
                                      "type": "int",
                                      "defaultValue": 365,
                                      "maxValue": 365,
                                      "minValue": 0,
                                      "metadata": {
                                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                                      }
                                    },
                                    "diagnosticStorageAccountId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the diagnostic storage account."
                                      }
                                    },
                                    "diagnosticWorkspaceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                                      }
                                    },
                                    "diagnosticEventHubAuthorizationRuleId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                      }
                                    },
                                    "diagnosticEventHubName": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                                      }
                                    },
                                    "lock": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Specify the type of lock."
                                      },
                                      "allowedValues": [
                                        "",
                                        "CanNotDelete",
                                        "ReadOnly"
                                      ]
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "diagnosticLogCategoriesToEnable": {
                                      "type": "array",
                                      "defaultValue": [
                                        "DDoSProtectionNotifications",
                                        "DDoSMitigationFlowLogs",
                                        "DDoSMitigationReports"
                                      ],
                                      "allowedValues": [
                                        "DDoSProtectionNotifications",
                                        "DDoSMitigationFlowLogs",
                                        "DDoSMitigationReports"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The name of logs that will be streamed."
                                      }
                                    },
                                    "diagnosticMetricsToEnable": {
                                      "type": "array",
                                      "defaultValue": [
                                        "AllMetrics"
                                      ],
                                      "allowedValues": [
                                        "AllMetrics"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The name of metrics that will be streamed."
                                      }
                                    },
                                    "diagnosticSettingsName": {
                                      "type": "string",
                                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                                      "metadata": {
                                        "description": "Optional. The name of the diagnostic setting, if deployed."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "diagnosticsLogs",
                                        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                        "input": {
                                          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                          "enabled": true,
                                          "retentionPolicy": {
                                            "enabled": true,
                                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                          }
                                        }
                                      },
                                      {
                                        "name": "diagnosticsMetrics",
                                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                        "input": {
                                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                          "timeGrain": null,
                                          "enabled": true,
                                          "retentionPolicy": {
                                            "enabled": true,
                                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/publicIPAddresses",
                                      "apiVersion": "2021-08-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "sku": {
                                        "name": "[parameters('skuName')]",
                                        "tier": "[parameters('skuTier')]"
                                      },
                                      "zones": "[parameters('zones')]",
                                      "properties": {
                                        "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                                        "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                                        "publicIPPrefix": "[if(not(empty(parameters('publicIPPrefixResourceId'))), createObject('id', parameters('publicIPPrefixResourceId')), null())]",
                                        "idleTimeoutInMinutes": 4,
                                        "ipTags": []
                                      }
                                    },
                                    {
                                      "condition": "[not(empty(parameters('lock')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                                      "properties": {
                                        "level": "[parameters('lock')]",
                                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                      "name": "[parameters('diagnosticSettingsName')]",
                                      "properties": {
                                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                        "metrics": "[variables('diagnosticsMetrics')]",
                                        "logs": "[variables('diagnosticsLogs')]"
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "copy": {
                                        "name": "publicIpAddress_roleAssignments",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-PIPAddress-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.13.1.58284",
                                              "templateHash": "7287021548899153761"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the principals to assign the role to."
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The description of the role assignment."
                                              }
                                            },
                                            "condition": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                                              }
                                            },
                                            "conditionVersion": {
                                              "type": "string",
                                              "defaultValue": "2.0",
                                              "allowedValues": [
                                                "2.0"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Version of the condition."
                                              }
                                            },
                                            "delegatedManagedIdentityResourceId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Id of the delegated managed identity resource."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', last(split(parameters('resourceId'), '/')))]",
                                              "name": "[guid(resourceId('Microsoft.Network/publicIPAddresses', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group the public IP address was deployed into."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the public IP address."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the public IP address."
                                      }
                                    },
                                    "ipAddress": {
                                      "type": "string",
                                      "value": "[if(contains(reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-08-01'), 'ipAddress'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-08-01').ipAddress, '')]",
                                      "metadata": {
                                        "description": "The public IP address of the public IP address resource."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-08-01', 'full').location]",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-NetworkInterface', deployment().name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('networkInterfaceName')]"
                                  },
                                  "ipConfigurations": {
                                    "copy": [
                                      {
                                        "name": "value",
                                        "count": "[length(parameters('ipConfigurations'))]",
                                        "input": "[createObject('name', if(not(empty(parameters('ipConfigurations')[copyIndex('value')].name)), parameters('ipConfigurations')[copyIndex('value')].name, null()), 'primary', equals(copyIndex('value'), 0), 'privateIPAllocationMethod', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurations')[copyIndex('value')].privateIPAllocationMethod)), parameters('ipConfigurations')[copyIndex('value')].privateIPAllocationMethod, null()), null()), 'privateIPAddress', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddress'), if(not(empty(parameters('ipConfigurations')[copyIndex('value')].privateIPAddress)), parameters('ipConfigurations')[copyIndex('value')].privateIPAddress, null()), null()), 'publicIPAddressResourceId', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'pipconfiguration'), resourceId('Microsoft.Network/publicIPAddresses', format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurations')[copyIndex('value')].pipconfiguration.publicIpNameSuffix)), null()), 'subnetResourceId', parameters('ipConfigurations')[copyIndex('value')].subnetResourceId, 'loadBalancerBackendAddressPools', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerBackendAddressPools'), parameters('ipConfigurations')[copyIndex('value')].loadBalancerBackendAddressPools, null()), 'applicationSecurityGroups', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'applicationSecurityGroups'), parameters('ipConfigurations')[copyIndex('value')].applicationSecurityGroups, null()), 'applicationGatewayBackendAddressPools', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'applicationGatewayBackendAddressPools'), parameters('ipConfigurations')[copyIndex('value')].applicationGatewayBackendAddressPools, null()), 'gatewayLoadBalancer', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'gatewayLoadBalancer'), parameters('ipConfigurations')[copyIndex('value')].gatewayLoadBalancer, null()), 'loadBalancerInboundNatRules', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerInboundNatRules'), parameters('ipConfigurations')[copyIndex('value')].loadBalancerInboundNatRules, null()), 'privateIPAddressVersion', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddressVersion'), parameters('ipConfigurations')[copyIndex('value')].privateIPAddressVersion, null()), 'virtualNetworkTaps', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'virtualNetworkTaps'), parameters('ipConfigurations')[copyIndex('value')].virtualNetworkTaps, null()))]"
                                      }
                                    ]
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "diagnosticEventHubAuthorizationRuleId": {
                                    "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                                  },
                                  "diagnosticEventHubName": {
                                    "value": "[parameters('diagnosticEventHubName')]"
                                  },
                                  "diagnosticLogsRetentionInDays": {
                                    "value": "[parameters('diagnosticLogsRetentionInDays')]"
                                  },
                                  "diagnosticStorageAccountId": {
                                    "value": "[parameters('diagnosticStorageAccountId')]"
                                  },
                                  "diagnosticMetricsToEnable": {
                                    "value": "[parameters('nicDiagnosticMetricsToEnable')]"
                                  },
                                  "diagnosticSettingsName": {
                                    "value": "[parameters('nicDiagnosticSettingsName')]"
                                  },
                                  "diagnosticWorkspaceId": {
                                    "value": "[parameters('diagnosticWorkspaceId')]"
                                  },
                                  "dnsServers": "[if(not(empty(parameters('dnsServers'))), createObject('value', parameters('dnsServers')), createObject('value', createArray()))]",
                                  "enableAcceleratedNetworking": {
                                    "value": "[parameters('enableAcceleratedNetworking')]"
                                  },
                                  "enableIPForwarding": {
                                    "value": "[parameters('enableIPForwarding')]"
                                  },
                                  "lock": {
                                    "value": "[parameters('lock')]"
                                  },
                                  "networkSecurityGroupResourceId": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('value', parameters('networkSecurityGroupResourceId')), createObject('value', ''))]",
                                  "roleAssignments": "[if(not(empty(parameters('roleAssignments'))), createObject('value', parameters('roleAssignments')), createObject('value', createArray()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "3250127774715033009"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the network interface."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "enableIPForwarding": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether IP forwarding is enabled on this network interface."
                                      }
                                    },
                                    "enableAcceleratedNetworking": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. If the network interface is accelerated networking enabled."
                                      }
                                    },
                                    "dnsServers": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection."
                                      }
                                    },
                                    "networkSecurityGroupResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The network security group (NSG) to attach to the network interface."
                                      }
                                    },
                                    "ipConfigurations": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. A list of IPConfigurations of the network interface."
                                      }
                                    },
                                    "lock": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Specify the type of lock."
                                      },
                                      "allowedValues": [
                                        "",
                                        "CanNotDelete",
                                        "ReadOnly"
                                      ]
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                      }
                                    },
                                    "diagnosticLogsRetentionInDays": {
                                      "type": "int",
                                      "defaultValue": 365,
                                      "maxValue": 365,
                                      "minValue": 0,
                                      "metadata": {
                                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                                      }
                                    },
                                    "diagnosticStorageAccountId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the diagnostic storage account."
                                      }
                                    },
                                    "diagnosticWorkspaceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource identifier of log analytics."
                                      }
                                    },
                                    "diagnosticEventHubAuthorizationRuleId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                      }
                                    },
                                    "diagnosticEventHubName": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                                      }
                                    },
                                    "diagnosticMetricsToEnable": {
                                      "type": "array",
                                      "defaultValue": [
                                        "AllMetrics"
                                      ],
                                      "allowedValues": [
                                        "AllMetrics"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The name of metrics that will be streamed."
                                      }
                                    },
                                    "diagnosticSettingsName": {
                                      "type": "string",
                                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                                      "metadata": {
                                        "description": "Optional. The name of the diagnostic setting, if deployed."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "diagnosticsMetrics",
                                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                        "input": {
                                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                          "timeGrain": null,
                                          "enabled": true,
                                          "retentionPolicy": {
                                            "enabled": true,
                                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-05-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "ipConfigurations",
                                            "count": "[length(parameters('ipConfigurations'))]",
                                            "input": {
                                              "name": "[if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].name)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].name, null())]",
                                              "properties": {
                                                "primary": "[if(equals(copyIndex('ipConfigurations'), 0), true(), false())]",
                                                "privateIPAllocationMethod": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod, null()), null())]",
                                                "privateIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddress'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress, null()), null())]",
                                                "publicIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'publicIPAddressResourceId'), if(not(equals(parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId, null())), createObject('id', parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId), null()), null())]",
                                                "subnet": {
                                                  "id": "[parameters('ipConfigurations')[copyIndex('ipConfigurations')].subnetResourceId]"
                                                },
                                                "loadBalancerBackendAddressPools": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerBackendAddressPools'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].loadBalancerBackendAddressPools, null())]",
                                                "applicationSecurityGroups": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationSecurityGroups'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].applicationSecurityGroups, null())]",
                                                "applicationGatewayBackendAddressPools": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationGatewayBackendAddressPools'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].applicationGatewayBackendAddressPools, null())]",
                                                "gatewayLoadBalancer": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'gatewayLoadBalancer'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].gatewayLoadBalancer, null())]",
                                                "loadBalancerInboundNatRules": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerInboundNatRules'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].loadBalancerInboundNatRules, null())]",
                                                "privateIPAddressVersion": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddressVersion'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddressVersion, null())]",
                                                "virtualNetworkTaps": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'virtualNetworkTaps'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].virtualNetworkTaps, null())]"
                                              }
                                            }
                                          }
                                        ],
                                        "enableIPForwarding": "[parameters('enableIPForwarding')]",
                                        "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                                        "dnsSettings": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', parameters('dnsServers')), null())]",
                                        "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]"
                                      }
                                    },
                                    {
                                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                                      "name": "[parameters('diagnosticSettingsName')]",
                                      "properties": {
                                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                        "metrics": "[variables('diagnosticsMetrics')]"
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "condition": "[not(empty(parameters('lock')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                                      "properties": {
                                        "level": "[parameters('lock')]",
                                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "copy": {
                                        "name": "networkInterface_roleAssignments",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-NIC-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.13.1.58284",
                                              "templateHash": "18384779621422977360"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the principals to assign the role to."
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The description of the role assignment."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', last(split(parameters('resourceId'), '/')))]",
                                              "name": "[guid(resourceId('Microsoft.Network/networkInterfaces', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed resource."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed resource."
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed resource."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('name')), '2021-05-01', 'full').location]",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "networkInterface_publicIPAddresses"
                              ]
                            }
                          ]
                        }
                      }
                    },
                    {
                      "condition": "[parameters('extensionDomainJoinConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('vmName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "DomainJoin"
                          },
                          "publisher": {
                            "value": "Microsoft.Compute"
                          },
                          "type": {
                            "value": "JsonADDomainExtension"
                          },
                          "typeHandlerVersion": "[if(contains(parameters('extensionDomainJoinConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDomainJoinConfig').typeHandlerVersion), createObject('value', '1.3'))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDomainJoinConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDomainJoinConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionDomainJoinConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDomainJoinConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "settings": {
                            "value": "[parameters('extensionDomainJoinConfig').settings]"
                          },
                          "protectedSettings": {
                            "value": {
                              "Password": "[parameters('extensionDomainJoinPassword')]"
                            }
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "3291483009942188370"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to."
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher."
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler."
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings."
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings."
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            },
                            "location": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2021-07-01', 'full').location]",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionAntiMalwareConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('vmName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "MicrosoftAntiMalware"
                          },
                          "publisher": {
                            "value": "Microsoft.Azure.Security"
                          },
                          "type": {
                            "value": "IaaSAntimalware"
                          },
                          "typeHandlerVersion": "[if(contains(parameters('extensionAntiMalwareConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAntiMalwareConfig').typeHandlerVersion), createObject('value', '1.3'))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAntiMalwareConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAntiMalwareConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionAntiMalwareConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAntiMalwareConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "settings": {
                            "value": "[parameters('extensionAntiMalwareConfig').settings]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "3291483009942188370"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to."
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher."
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler."
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings."
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings."
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            },
                            "location": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2021-07-01', 'full').location]",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionMonitoringAgentConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('vmName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "MicrosoftMonitoringAgent"
                          },
                          "publisher": {
                            "value": "Microsoft.EnterpriseCloud.Monitoring"
                          },
                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'MicrosoftMonitoringAgent'), createObject('value', 'OmsAgentForLinux'))]",
                          "typeHandlerVersion": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionMonitoringAgentConfig').typeHandlerVersion), createObject('value', if(equals(parameters('osType'), 'Windows'), '1.0', '1.7')))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionMonitoringAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionMonitoringAgentConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "settings": {
                            "value": {
                              "workspaceId": "[if(not(empty(parameters('monitoringWorkspaceId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').customerId, '')]"
                            }
                          },
                          "protectedSettings": {
                            "value": {
                              "workspaceKey": "[if(not(empty(parameters('monitoringWorkspaceId'))), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').primarySharedKey, '')]"
                            }
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "3291483009942188370"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to."
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher."
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler."
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings."
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings."
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            },
                            "location": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2021-07-01', 'full').location]",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionDependencyAgentConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('vmName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "DependencyAgent"
                          },
                          "publisher": {
                            "value": "Microsoft.Azure.Monitoring.DependencyAgent"
                          },
                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'DependencyAgentWindows'), createObject('value', 'DependencyAgentLinux'))]",
                          "typeHandlerVersion": "[if(contains(parameters('extensionDependencyAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDependencyAgentConfig').typeHandlerVersion), createObject('value', '9.5'))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDependencyAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDependencyAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionDependencyAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDependencyAgentConfig').enableAutomaticUpgrade), createObject('value', true()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "3291483009942188370"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to."
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher."
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler."
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings."
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings."
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            },
                            "location": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2021-07-01', 'full').location]",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionNetworkWatcherAgentConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('vmName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "NetworkWatcherAgent"
                          },
                          "publisher": {
                            "value": "Microsoft.Azure.NetworkWatcher"
                          },
                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'NetworkWatcherAgentWindows'), createObject('value', 'NetworkWatcherAgentLinux'))]",
                          "typeHandlerVersion": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').typeHandlerVersion), createObject('value', '1.4'))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').enableAutomaticUpgrade), createObject('value', false()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "3291483009942188370"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to."
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher."
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler."
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings."
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings."
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            },
                            "location": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2021-07-01', 'full').location]",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionDSCConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('vmName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "DesiredStateConfiguration"
                          },
                          "publisher": {
                            "value": "Microsoft.Powershell"
                          },
                          "type": {
                            "value": "DSC"
                          },
                          "typeHandlerVersion": "[if(contains(parameters('extensionDSCConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDSCConfig').typeHandlerVersion), createObject('value', '2.77'))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDSCConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDSCConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionDSCConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDSCConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "settings": "[if(contains(parameters('extensionDSCConfig'), 'settings'), createObject('value', parameters('extensionDSCConfig').settings), createObject('value', createObject()))]",
                          "protectedSettings": "[if(contains(parameters('extensionDSCConfig'), 'protectedSettings'), createObject('value', parameters('extensionDSCConfig').protectedSettings), createObject('value', createObject()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "3291483009942188370"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to."
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher."
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler."
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings."
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings."
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            },
                            "location": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2021-07-01', 'full').location]",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionCustomScriptConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('vmName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "CustomScriptExtension"
                          },
                          "publisher": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'Microsoft.Compute'), createObject('value', 'Microsoft.Azure.Extensions'))]",
                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'CustomScriptExtension'), createObject('value', 'CustomScript'))]",
                          "typeHandlerVersion": "[if(contains(parameters('extensionCustomScriptConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionCustomScriptConfig').typeHandlerVersion), createObject('value', if(equals(parameters('osType'), 'Windows'), '1.10', '2.1')))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionCustomScriptConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionCustomScriptConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionCustomScriptConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionCustomScriptConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "settings": {
                            "value": {
                              "copy": [
                                {
                                  "name": "fileUris",
                                  "count": "[length(parameters('extensionCustomScriptConfig').fileData)]",
                                  "input": "[if(contains(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')], 'storageAccountId'), format('{0}?{1}', parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri, listAccountSas(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].storageAccountId, '2019-04-01', variables('accountSasProperties')).accountSasToken), parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri)]"
                                }
                              ]
                            }
                          },
                          "protectedSettings": {
                            "value": "[parameters('extensionCustomScriptProtectedSetting')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "3291483009942188370"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to."
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher."
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler."
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings."
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings."
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            },
                            "location": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2021-07-01', 'full').location]",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location'))))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionDiskEncryptionConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-DiskEncryption', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('vmName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "DiskEncryption"
                          },
                          "publisher": {
                            "value": "Microsoft.Azure.Security"
                          },
                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzureDiskEncryption'), createObject('value', 'AzureDiskEncryptionForLinux'))]",
                          "typeHandlerVersion": "[if(contains(parameters('extensionDiskEncryptionConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDiskEncryptionConfig').typeHandlerVersion), createObject('value', if(equals(parameters('osType'), 'Windows'), '2.2', '1.1')))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDiskEncryptionConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDiskEncryptionConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionDiskEncryptionConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDiskEncryptionConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "forceUpdateTag": "[if(contains(parameters('extensionDiskEncryptionConfig'), 'forceUpdateTag'), createObject('value', parameters('extensionDiskEncryptionConfig').forceUpdateTag), createObject('value', '1.0'))]",
                          "settings": {
                            "value": "[parameters('extensionDiskEncryptionConfig').settings]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "3291483009942188370"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to."
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher."
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler."
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings."
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings."
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            },
                            "location": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2021-07-01', 'full').location]",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location'))))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('backupVaultName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-Backup', uniqueString(deployment().name, parameters('location')))]",
                      "resourceGroup": "[parameters('backupVaultResourceGroup')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('vm;iaasvmcontainerv2;{0};{1}', resourceGroup().name, parameters('vmName'))]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "policyId": {
                            "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('backupVaultName'), parameters('backupPolicyName'))]"
                          },
                          "protectedItemType": {
                            "value": "Microsoft.Compute/virtualMachines"
                          },
                          "protectionContainerName": {
                            "value": "[format('iaasvmcontainer;iaasvmcontainerv2;{0};{1}', resourceGroup().name, parameters('vmName'))]"
                          },
                          "recoveryVaultName": {
                            "value": "[parameters('backupVaultName')]"
                          },
                          "sourceResourceId": {
                            "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "9168999162537973050"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the resource."
                              }
                            },
                            "protectionContainerName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. Name of the Azure Recovery Service Vault Protection Container. Required if the template is used in a standalone deployment."
                              }
                            },
                            "recoveryVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "protectedItemType": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The backup item type."
                              },
                              "allowedValues": [
                                "AzureFileShareProtectedItem",
                                "AzureVmWorkloadSAPAseDatabase",
                                "AzureVmWorkloadSAPHanaDatabase",
                                "AzureVmWorkloadSQLDatabase",
                                "DPMProtectedItem",
                                "GenericProtectedItem",
                                "MabFileFolderProtectedItem",
                                "Microsoft.ClassicCompute/virtualMachines",
                                "Microsoft.Compute/virtualMachines",
                                "Microsoft.Sql/servers/databases"
                              ]
                            },
                            "policyId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. ID of the backup policy with which this item is backed up."
                              }
                            },
                            "sourceResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the resource to back up."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                              "apiVersion": "2022-02-01",
                              "name": "[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "protectedItemType": "[parameters('protectedItemType')]",
                                "policyId": "[parameters('policyId')]",
                                "sourceResourceId": "[parameters('sourceResourceId')]"
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the protected item was created in."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems', split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[0], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[1], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[2], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[3])]",
                              "metadata": {
                                "description": "The resource ID of the protected item."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]",
                              "metadata": {
                                "description": "The Name of the protected item."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location'))))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "vm_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "12812045459671488488"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Id of the delegated managed identity resource."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Compute/virtualMachines', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('vmName')]",
                      "metadata": {
                        "description": "The name of the VM."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
                      "metadata": {
                        "description": "The resource ID of the VM."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the VM was created in."
                      }
                    },
                    "systemAssignedPrincipalId": {
                      "type": "string",
                      "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2021-07-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2021-07-01', 'full').identity.principalId, '')]",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2021-07-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('deploy-ra-lx-avset-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-ra-tags--{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            },
            {
              "condition": "[parameters('parRemoteAccess').bastion.windows.enable]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-ra-win-net-interface-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('varWindowsNetworkInterfaceName')]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "tags": "[if(empty(parameters('parTags')), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-ra-tags--{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs), createObject('value', parameters('parTags')))]",
                  "networkSecurityGroupResourceId": {
                    "value": "[parameters('parHubNetworkSecurityGroupResourceId')]"
                  },
                  "ipConfigurations": {
                    "value": [
                      {
                        "name": "[variables('varWindowsNetworkInterfaceIpConfigurationName')]",
                        "subnetResourceId": "[parameters('parHubSubnetResourceId')]",
                        "privateIPAllocationMethod": "[parameters('parRemoteAccess').bastion.windows.networkInterfacePrivateIPAddressAllocationMethod]"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "3250127774715033009"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the network interface."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableIPForwarding": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether IP forwarding is enabled on this network interface."
                      }
                    },
                    "enableAcceleratedNetworking": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If the network interface is accelerated networking enabled."
                      }
                    },
                    "dnsServers": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection."
                      }
                    },
                    "networkSecurityGroupResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The network security group (NSG) to attach to the network interface."
                      }
                    },
                    "ipConfigurations": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. A list of IPConfigurations of the network interface."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource identifier of log analytics."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "diagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "diagnosticsMetrics",
                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                        "input": {
                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                          "timeGrain": null,
                          "enabled": true,
                          "retentionPolicy": {
                            "enabled": true,
                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/networkInterfaces",
                      "apiVersion": "2021-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "ipConfigurations",
                            "count": "[length(parameters('ipConfigurations'))]",
                            "input": {
                              "name": "[if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].name)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].name, null())]",
                              "properties": {
                                "primary": "[if(equals(copyIndex('ipConfigurations'), 0), true(), false())]",
                                "privateIPAllocationMethod": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod, null()), null())]",
                                "privateIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddress'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress, null()), null())]",
                                "publicIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'publicIPAddressResourceId'), if(not(equals(parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId, null())), createObject('id', parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId), null()), null())]",
                                "subnet": {
                                  "id": "[parameters('ipConfigurations')[copyIndex('ipConfigurations')].subnetResourceId]"
                                },
                                "loadBalancerBackendAddressPools": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerBackendAddressPools'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].loadBalancerBackendAddressPools, null())]",
                                "applicationSecurityGroups": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationSecurityGroups'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].applicationSecurityGroups, null())]",
                                "applicationGatewayBackendAddressPools": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationGatewayBackendAddressPools'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].applicationGatewayBackendAddressPools, null())]",
                                "gatewayLoadBalancer": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'gatewayLoadBalancer'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].gatewayLoadBalancer, null())]",
                                "loadBalancerInboundNatRules": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerInboundNatRules'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].loadBalancerInboundNatRules, null())]",
                                "privateIPAddressVersion": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddressVersion'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddressVersion, null())]",
                                "virtualNetworkTaps": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'virtualNetworkTaps'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].virtualNetworkTaps, null())]"
                              }
                            }
                          }
                        ],
                        "enableIPForwarding": "[parameters('enableIPForwarding')]",
                        "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                        "dnsSettings": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', parameters('dnsServers')), null())]",
                        "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]"
                      }
                    },
                    {
                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                      "name": "[parameters('diagnosticSettingsName')]",
                      "properties": {
                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                        "metrics": "[variables('diagnosticsMetrics')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "networkInterface_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-NIC-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "18384779621422977360"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Network/networkInterfaces', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the deployed resource."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the deployed resource."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group of the deployed resource."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('name')), '2021-05-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-ra-tags--{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-ra-win-avset-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('{0}-windows-avset', take(toLower(uniqueString(resourceGroup().name)), 10))]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "availabilitySetSku": {
                    "value": "Aligned"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "2239883326543378266"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the availability set that is being created."
                      }
                    },
                    "availabilitySetFaultDomain": {
                      "type": "int",
                      "defaultValue": 2,
                      "metadata": {
                        "description": "Optional. The number of fault domains to use."
                      }
                    },
                    "availabilitySetUpdateDomain": {
                      "type": "int",
                      "defaultValue": 5,
                      "metadata": {
                        "description": "Optional. The number of update domains to use."
                      }
                    },
                    "availabilitySetSku": {
                      "type": "string",
                      "defaultValue": "Aligned",
                      "metadata": {
                        "description": "Optional. SKU of the availability set.\r\n- Use \\'Aligned\\' for virtual machines with managed disks.\r\n- Use \\'Classic\\' for virtual machines with unmanaged disks.\r\n"
                      }
                    },
                    "proximityPlacementGroupId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of a proximity placement group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Resource location."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the availability set resource."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/availabilitySets",
                      "apiVersion": "2021-07-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "platformFaultDomainCount": "[parameters('availabilitySetFaultDomain')]",
                        "platformUpdateDomainCount": "[parameters('availabilitySetUpdateDomain')]",
                        "proximityPlacementGroup": "[if(not(empty(parameters('proximityPlacementGroupId'))), createObject('id', parameters('proximityPlacementGroupId')), null())]"
                      },
                      "sku": {
                        "name": "[parameters('availabilitySetSku')]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Compute/availabilitySets/{0}', parameters('name'))]",
                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/availabilitySets', parameters('name'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "availabilitySet_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-AvSet-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Compute/availabilitySets', parameters('name'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "227634743979240944"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Compute/availabilitySets/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Compute/availabilitySets', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/availabilitySets', parameters('name'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('name')]",
                      "metadata": {
                        "description": "The name of the availability set."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Compute/availabilitySets', parameters('name'))]",
                      "metadata": {
                        "description": "The resource ID of the availability set."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The resource group the availability set was deployed into."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Compute/availabilitySets', parameters('name')), '2021-07-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('parRemoteAccess').bastion.windows.enable]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('deploy-ra-windows-vm-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('parRemoteAccess').bastion.windows.vmName]"
                  },
                  "location": {
                    "value": "[parameters('parLocation')]"
                  },
                  "tags": "[if(empty(parameters('parTags')), createObject('value', reference(subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-ra-tags--{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs), createObject('value', parameters('parTags')))]",
                  "adminUsername": {
                    "value": "[parameters('parRemoteAccess').bastion.windows.vmAdminUsername]"
                  },
                  "adminPassword": {
                    "value": "[parameters('parRemoteAccess').bastion.windows.vmAdminPassword]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('parLogAnalyticsWorkspaceId')]"
                  },
                  "availabilitySetResourceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', format('deploy-ra-win-avset-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceId.value]"
                  },
                  "encryptionAtHost": {
                    "value": "[parameters('parRemoteAccess').bastion.encryptionAtHost]"
                  },
                  "imageReference": {
                    "value": {
                      "offer": "[parameters('parRemoteAccess').bastion.windows.vmImageOffer]",
                      "publisher": "[parameters('parRemoteAccess').bastion.windows.vmImagePublisher]",
                      "sku": "[parameters('parRemoteAccess').bastion.windows.vmImageSku]",
                      "version": "[parameters('parRemoteAccess').bastion.windows.vmImageVersion]"
                    }
                  },
                  "nicConfigurations": {
                    "value": [
                      {
                        "ipConfigurations": [
                          {
                            "name": "win-ipconfig01",
                            "subnetResourceId": "[parameters('parHubSubnetResourceId')]"
                          }
                        ],
                        "nicSuffix": "-nic-01"
                      }
                    ]
                  },
                  "osDisk": {
                    "value": {
                      "diskSizeGB": "128",
                      "createOption": "[parameters('parRemoteAccess').bastion.windows.vmOsDiskCreateOption]",
                      "managedDisk": {
                        "storageAccountType": "[parameters('parRemoteAccess').bastion.windows.vmStorageAccountType]"
                      }
                    }
                  },
                  "osType": {
                    "value": "Windows"
                  },
                  "vmSize": {
                    "value": "[parameters('parRemoteAccess').bastion.windows.vmSize]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "9440584436086809660"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The name of the virtual machine to be created. You should use a unique prefix to reduce name collisions in Active Directory. If no value is provided, a 10 character long unique string will be generated based on the Resource Group's name."
                      }
                    },
                    "vmName": {
                      "type": "string",
                      "defaultValue": "[take(toLower(uniqueString(parameters('name'), resourceGroup().name)), 10)]"
                    },
                    "vmComputerNamesTransformation": {
                      "type": "string",
                      "defaultValue": "none",
                      "allowedValues": [
                        "none",
                        "uppercase",
                        "lowercase"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies whether the computer names should be transformed. The transformation is performed on all computer names. Available transformations are 'none' (Default), 'uppercase' and 'lowercase'."
                      }
                    },
                    "vmSize": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the size for the VMs."
                      }
                    },
                    "encryptionAtHost": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine. This will enable the encryption for all the disks including Resource/Temp disk at host itself. For security reasons, it is recommended to set encryptionAtHost to True. Restrictions: Cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                      }
                    },
                    "securityType": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specifies the SecurityType of the virtual machine. It is set as TrustedLaunch to enable UefiSettings."
                      }
                    },
                    "secureBootEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Specifies whether secure boot should be enabled on the virtual machine. This parameter is part of the UefiSettings. SecurityType should be set to TrustedLaunch to enable UefiSettings."
                      }
                    },
                    "vTpmEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Specifies whether vTPM should be enabled on the virtual machine. This parameter is part of the UefiSettings.  SecurityType should be set to TrustedLaunch to enable UefiSettings."
                      }
                    },
                    "imageReference": {
                      "type": "object",
                      "metadata": {
                        "description": "Required. OS image reference. In case of marketplace images, it's the combination of the publisher, offer, sku, version attributes. In case of custom images it's the resource ID of the custom image."
                      }
                    },
                    "plan": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use."
                      }
                    },
                    "osDisk": {
                      "type": "object",
                      "metadata": {
                        "description": "Required. Specifies the OS disk. For security reasons, it is recommended to specify DiskEncryptionSet into the osDisk object.  Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                      }
                    },
                    "dataDisks": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Specifies the data disks. For security reasons, it is recommended to specify DiskEncryptionSet into the dataDisk object. Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                      }
                    },
                    "ultraSSDEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled."
                      }
                    },
                    "adminUsername": {
                      "type": "secureString",
                      "metadata": {
                        "description": "Required. Administrator username."
                      }
                    },
                    "adminPassword": {
                      "type": "secureString",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. When specifying a Windows Virtual Machine, this value should be passed."
                      }
                    },
                    "customData": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Custom data associated to the VM, this value will be automatically converted into base64 to account for the expected VM format."
                      }
                    },
                    "certificatesToBeInstalled": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Specifies set of certificates that should be installed onto the virtual machine."
                      }
                    },
                    "vmPriority": {
                      "type": "string",
                      "defaultValue": "Regular",
                      "allowedValues": [
                        "Regular",
                        "Low",
                        "Spot"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies the priority for the virtual machine."
                      }
                    },
                    "enableEvictionPolicy": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Specifies the eviction policy for the low priority virtual machine. Will result in 'Deallocate' eviction policy."
                      }
                    },
                    "maxPriceForLowPriorityVm": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specifies the maximum price you are willing to pay for a low priority VM/VMSS. This price is in US Dollars."
                      }
                    },
                    "dedicatedHostId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specifies resource ID about the dedicated host that the virtual machine resides in."
                      }
                    },
                    "licenseType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "Windows_Client",
                        "Windows_Server",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system."
                      }
                    },
                    "publicKeys": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The list of SSH public keys used to authenticate with linux based VMs."
                      }
                    },
                    "systemAssignedIdentity": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enables system assigned managed identity on the resource."
                      }
                    },
                    "userAssignedIdentities": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The ID(s) to assign to the resource."
                      }
                    },
                    "bootDiagnostics": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Whether boot diagnostics should be enabled on the Virtual Machine. Boot diagnostics will be enabled with a managed storage account if no bootDiagnosticsStorageAccountName value is provided. If bootDiagnostics and bootDiagnosticsStorageAccountName values are not provided, boot diagnostics will be disabled."
                      }
                    },
                    "bootDiagnosticStorageAccountName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Custom storage account used to store boot diagnostic information. Boot diagnostics will be enabled with a custom storage account if a value is provided."
                      }
                    },
                    "bootDiagnosticStorageAccountUri": {
                      "type": "string",
                      "defaultValue": "[format('.blob.{0}/', environment().suffixes.storage)]",
                      "metadata": {
                        "description": "Optional. Storage account boot diagnostic base URI."
                      }
                    },
                    "proximityPlacementGroupResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of a proximity placement group."
                      }
                    },
                    "availabilitySetResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of an availability set. Cannot be used in combination with availability zone nor scale set."
                      }
                    },
                    "availabilityZone": {
                      "type": "int",
                      "defaultValue": 0,
                      "allowedValues": [
                        0,
                        1,
                        2,
                        3
                      ],
                      "metadata": {
                        "description": "Optional. If set to 1, 2 or 3, the availability zone for all VMs is hardcoded to that value. If zero, then availability zones is not used. Cannot be used in combination with availability set nor scale set."
                      }
                    },
                    "nicConfigurations": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. Configures NICs and PIPs."
                      }
                    },
                    "pipDiagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the PIP diagnostic setting, if deployed."
                      }
                    },
                    "pipdiagnosticLogCategoriesToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "DDoSProtectionNotifications",
                        "DDoSMitigationFlowLogs",
                        "DDoSMitigationReports"
                      ],
                      "allowedValues": [
                        "DDoSProtectionNotifications",
                        "DDoSMitigationFlowLogs",
                        "DDoSMitigationReports"
                      ],
                      "metadata": {
                        "description": "Optional. The name of logs that will be streamed."
                      }
                    },
                    "pipdiagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "nicDiagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                      "metadata": {
                        "description": "Optional. The name of the NIC diagnostic setting, if deployed."
                      }
                    },
                    "nicdiagnosticMetricsToEnable": {
                      "type": "array",
                      "defaultValue": [
                        "AllMetrics"
                      ],
                      "allowedValues": [
                        "AllMetrics"
                      ],
                      "metadata": {
                        "description": "Optional. The name of metrics that will be streamed."
                      }
                    },
                    "backupVaultName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Recovery service vault name to add VMs to backup."
                      }
                    },
                    "backupVaultResourceGroup": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]",
                      "metadata": {
                        "description": "Optional. Resource group of the backup recovery service vault. If not provided the current resource group name is considered by default."
                      }
                    },
                    "backupPolicyName": {
                      "type": "string",
                      "defaultValue": "DefaultPolicy",
                      "metadata": {
                        "description": "Optional. Backup policy the VMs should be using for backup. If not provided, it will use the DefaultPolicy from the backup recovery service vault."
                      }
                    },
                    "enableServerSideEncryption": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Specifies if Windows VM disks should be encrypted with Server-side encryption + Customer managed Key."
                      }
                    },
                    "allowExtensionOperations": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine."
                      }
                    },
                    "extensionDomainJoinPassword": {
                      "type": "secureString",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Required if name is specified. Password of the user specified in user parameter."
                      }
                    },
                    "extensionDomainJoinConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Domain Join] extension. Must at least contain the [\"enabled\": true] property to be executed."
                      }
                    },
                    "extensionAntiMalwareConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Anti Malware] extension. Must at least contain the [\"enabled\": true] property to be executed."
                      }
                    },
                    "extensionMonitoringAgentConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Monitoring Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
                      }
                    },
                    "monitoringWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the monitoring log analytics workspace. Must be set when extensionMonitoringAgentConfig is set to true."
                      }
                    },
                    "extensionDependencyAgentConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Dependency Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
                      }
                    },
                    "extensionNetworkWatcherAgentConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Network Watcher Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
                      }
                    },
                    "extensionDiskEncryptionConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Disk Encryption] extension. Must at least contain the [\"enabled\": true] property to be executed."
                      }
                    },
                    "extensionDSCConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Desired State Configuration] extension. Must at least contain the [\"enabled\": true] property to be executed."
                      }
                    },
                    "extensionCustomScriptConfig": {
                      "type": "object",
                      "defaultValue": {
                        "enabled": false,
                        "fileData": []
                      },
                      "metadata": {
                        "description": "Optional. The configuration for the [Custom Script] extension. Must at least contain the [\"enabled\": true] property to be executed."
                      }
                    },
                    "extensionCustomScriptProtectedSetting": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Any object that contains the extension specific protected settings."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "diagnosticLogsRetentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "maxValue": 365,
                      "minValue": 0,
                      "metadata": {
                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                      }
                    },
                    "diagnosticStorageAccountId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic storage account."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "diagnosticEventHubAuthorizationRuleId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                      }
                    },
                    "diagnosticEventHubName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                      }
                    },
                    "lock": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specify the type of lock."
                      },
                      "allowedValues": [
                        "",
                        "CanNotDelete",
                        "ReadOnly"
                      ]
                    },
                    "roleAssignments": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "baseTime": {
                      "type": "string",
                      "defaultValue": "[utcNow('u')]",
                      "metadata": {
                        "description": "Generated. Do not provide a value! This date value is used to generate a registration token."
                      }
                    },
                    "sasTokenValidityLength": {
                      "type": "string",
                      "defaultValue": "PT8H",
                      "metadata": {
                        "description": "Optional. SAS token validity length to use to download files from storage accounts. Usage: 'PT8H' - valid for 8 hours; 'P5D' - valid for 5 days; 'P1Y' - valid for 1 year. When not provided, the SAS token will be valid for 8 hours."
                      }
                    },
                    "osType": {
                      "type": "string",
                      "allowedValues": [
                        "Windows",
                        "Linux"
                      ],
                      "metadata": {
                        "description": "Required. The chosen OS type."
                      }
                    },
                    "disablePasswordAuthentication": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Specifies whether password authentication should be disabled."
                      }
                    },
                    "provisionVMAgent": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later."
                      }
                    },
                    "enableAutomaticUpdates": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning."
                      }
                    },
                    "timeZone": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Specifies the time zone of the virtual machine. e.g. 'Pacific Standard Time'. Possible values can be `TimeZoneInfo.id` value from time zones returned by `TimeZoneInfo.GetSystemTimeZones`."
                      }
                    },
                    "additionalUnattendContent": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. - AdditionalUnattendContent object."
                      }
                    },
                    "winRM": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell. - WinRMConfiguration object."
                      }
                    },
                    "configurationProfile": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesProduction",
                        "/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesDevTest",
                        ""
                      ],
                      "metadata": {
                        "description": "Required. The configuration profile of automanage."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "publicKeysFormatted",
                        "count": "[length(parameters('publicKeys'))]",
                        "input": {
                          "path": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].path]",
                          "keyData": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].keyData]"
                        }
                      }
                    ],
                    "vmComputerNameTransformed": "[if(equals(parameters('vmComputerNamesTransformation'), 'uppercase'), toUpper(parameters('name')), if(equals(parameters('vmComputerNamesTransformation'), 'lowercase'), toLower(parameters('name')), parameters('name')))]",
                    "linuxConfiguration": {
                      "disablePasswordAuthentication": "[parameters('disablePasswordAuthentication')]",
                      "ssh": {
                        "publicKeys": "[variables('publicKeysFormatted')]"
                      },
                      "provisionVMAgent": "[parameters('provisionVMAgent')]"
                    },
                    "windowsConfiguration": {
                      "provisionVMAgent": "[parameters('provisionVMAgent')]",
                      "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
                      "timeZone": "[if(empty(parameters('timeZone')), null(), parameters('timeZone'))]",
                      "additionalUnattendContent": "[if(empty(parameters('additionalUnattendContent')), null(), parameters('additionalUnattendContent'))]",
                      "winRM": "[if(not(empty(parameters('winRM'))), createObject('listeners', parameters('winRM')), null())]"
                    },
                    "accountSasProperties": {
                      "signedServices": "b",
                      "signedPermission": "r",
                      "signedExpiry": "[dateTimeAdd(parameters('baseTime'), parameters('sasTokenValidityLength'))]",
                      "signedResourceTypes": "o",
                      "signedProtocol": "https"
                    },
                    "identityType": "[if(parameters('systemAssignedIdentity'), if(not(empty(parameters('userAssignedIdentities'))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(parameters('userAssignedIdentities'))), 'UserAssigned', 'None'))]",
                    "identity": "[if(not(equals(variables('identityType'), 'None')), createObject('type', variables('identityType'), 'userAssignedIdentities', if(not(empty(parameters('userAssignedIdentities'))), parameters('userAssignedIdentities'), createObject())), createObject())]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Compute/virtualMachines",
                      "apiVersion": "2021-07-01",
                      "name": "[parameters('vmName')]",
                      "location": "[parameters('location')]",
                      "identity": "[variables('identity')]",
                      "tags": "[parameters('tags')]",
                      "zones": "[if(not(equals(parameters('availabilityZone'), 0)), array(parameters('availabilityZone')), null())]",
                      "plan": "[if(not(empty(parameters('plan'))), parameters('plan'), null())]",
                      "properties": {
                        "hardwareProfile": {
                          "vmSize": "[parameters('vmSize')]"
                        },
                        "securityProfile": {
                          "encryptionAtHost": "[if(parameters('encryptionAtHost'), parameters('encryptionAtHost'), null())]",
                          "securityType": "[parameters('securityType')]",
                          "uefiSettings": "[if(equals(parameters('securityType'), 'TrustedLaunch'), createObject('secureBootEnabled', parameters('secureBootEnabled'), 'vTpmEnabled', parameters('vTpmEnabled')), null())]"
                        },
                        "storageProfile": {
                          "copy": [
                            {
                              "name": "dataDisks",
                              "count": "[length(parameters('dataDisks'))]",
                              "input": {
                                "lun": "[copyIndex('dataDisks')]",
                                "name": "[format('{0}-disk-data-{1}', parameters('vmName'), padLeft(add(copyIndex('dataDisks'), 1), 2, '0'))]",
                                "diskSizeGB": "[parameters('dataDisks')[copyIndex('dataDisks')].diskSizeGB]",
                                "createOption": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')], 'createOption'), parameters('dataDisks')[copyIndex('dataDisks')].createOption, 'Empty')]",
                                "deleteOption": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')], 'deleteOption'), parameters('dataDisks')[copyIndex('dataDisks')].deleteOption, 'Delete')]",
                                "caching": "[if(contains(parameters('dataDisks')[copyIndex('dataDisks')], 'caching'), parameters('dataDisks')[copyIndex('dataDisks')].caching, 'ReadOnly')]",
                                "managedDisk": {
                                  "storageAccountType": "[parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.storageAccountType]",
                                  "diskEncryptionSet": {
                                    "id": "[if(parameters('enableServerSideEncryption'), parameters('dataDisks')[copyIndex('dataDisks')].managedDisk.diskEncryptionSet.id, null())]"
                                  }
                                }
                              }
                            }
                          ],
                          "imageReference": "[parameters('imageReference')]",
                          "osDisk": {
                            "name": "[format('{0}-disk-os-01', parameters('vmName'))]",
                            "createOption": "[if(contains(parameters('osDisk'), 'createOption'), parameters('osDisk').createOption, 'FromImage')]",
                            "deleteOption": "[if(contains(parameters('osDisk'), 'deleteOption'), parameters('osDisk').deleteOption, 'Delete')]",
                            "diskSizeGB": "[parameters('osDisk').diskSizeGB]",
                            "caching": "[if(contains(parameters('osDisk'), 'caching'), parameters('osDisk').caching, 'ReadOnly')]",
                            "managedDisk": {
                              "storageAccountType": "[parameters('osDisk').managedDisk.storageAccountType]",
                              "diskEncryptionSet": "[if(contains(parameters('osDisk').managedDisk, 'diskEncryptionSet'), parameters('osDisk').managedDisk.diskEncryptionSet, null())]"
                            }
                          }
                        },
                        "additionalCapabilities": {
                          "ultraSSDEnabled": "[parameters('ultraSSDEnabled')]"
                        },
                        "osProfile": {
                          "computerName": "[variables('vmComputerNameTransformed')]",
                          "adminUsername": "[parameters('adminUsername')]",
                          "adminPassword": "[parameters('adminPassword')]",
                          "customData": "[if(not(empty(parameters('customData'))), base64(parameters('customData')), null())]",
                          "windowsConfiguration": "[if(equals(parameters('osType'), 'Windows'), variables('windowsConfiguration'), null())]",
                          "linuxConfiguration": "[if(equals(parameters('osType'), 'Linux'), variables('linuxConfiguration'), null())]",
                          "secrets": "[parameters('certificatesToBeInstalled')]",
                          "allowExtensionOperations": "[parameters('allowExtensionOperations')]"
                        },
                        "networkProfile": {
                          "copy": [
                            {
                              "name": "networkInterfaces",
                              "count": "[length(parameters('nicConfigurations'))]",
                              "input": {
                                "properties": {
                                  "deleteOption": "[if(contains(parameters('nicConfigurations')[copyIndex('networkInterfaces')], 'deleteOption'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].deleteOption, 'Delete')]",
                                  "primary": "[if(equals(copyIndex('networkInterfaces'), 0), true(), false())]"
                                },
                                "id": "[resourceId('Microsoft.Network/networkInterfaces', format('{0}{1}', parameters('name'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].nicSuffix))]"
                              }
                            }
                          ]
                        },
                        "diagnosticsProfile": {
                          "bootDiagnostics": {
                            "enabled": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), true(), parameters('bootDiagnostics'))]",
                            "storageUri": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), format('https://{0}{1}', parameters('bootDiagnosticStorageAccountName'), parameters('bootDiagnosticStorageAccountUri')), null())]"
                          }
                        },
                        "availabilitySet": "[if(not(empty(parameters('availabilitySetResourceId'))), createObject('id', parameters('availabilitySetResourceId')), null())]",
                        "proximityPlacementGroup": "[if(not(empty(parameters('proximityPlacementGroupResourceId'))), createObject('id', parameters('proximityPlacementGroupResourceId')), null())]",
                        "priority": "[parameters('vmPriority')]",
                        "evictionPolicy": "[if(parameters('enableEvictionPolicy'), 'Deallocate', null())]",
                        "billingProfile": "[if(and(not(empty(parameters('vmPriority'))), not(empty(parameters('maxPriceForLowPriorityVm')))), createObject('maxPrice', parameters('maxPriceForLowPriorityVm')), null())]",
                        "host": "[if(not(empty(parameters('dedicatedHostId'))), createObject('id', parameters('dedicatedHostId')), null())]",
                        "licenseType": "[if(not(empty(parameters('licenseType'))), parameters('licenseType'), null())]"
                      },
                      "dependsOn": [
                        "vm_nic"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('configurationProfile')))]",
                      "type": "Microsoft.Automanage/configurationProfileAssignments",
                      "apiVersion": "2021-04-30-preview",
                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('vmName'))]",
                      "name": "default",
                      "properties": {
                        "configurationProfile": "[parameters('configurationProfile')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('lock')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('vmName'))]",
                      "name": "[format('{0}-{1}-lock', parameters('vmName'), parameters('lock'))]",
                      "properties": {
                        "level": "[parameters('lock')]",
                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "vm_nic",
                        "count": "[length(parameters('nicConfigurations'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-Nic-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "networkInterfaceName": {
                            "value": "[format('{0}{1}', parameters('name'), parameters('nicConfigurations')[copyIndex()].nicSuffix)]"
                          },
                          "virtualMachineName": {
                            "value": "[parameters('name')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "enableIPForwarding": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableIPForwarding'), createObject('value', if(not(empty(parameters('nicConfigurations')[copyIndex()].enableIPForwarding)), parameters('nicConfigurations')[copyIndex()].enableIPForwarding, false())), createObject('value', false()))]",
                          "enableAcceleratedNetworking": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableAcceleratedNetworking'), createObject('value', parameters('nicConfigurations')[copyIndex()].enableAcceleratedNetworking), createObject('value', true()))]",
                          "dnsServers": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'dnsServers'), createObject('value', if(not(empty(parameters('nicConfigurations')[copyIndex()].dnsServers)), parameters('nicConfigurations')[copyIndex()].dnsServers, createArray())), createObject('value', createArray()))]",
                          "networkSecurityGroupResourceId": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'networkSecurityGroupResourceId'), createObject('value', parameters('nicConfigurations')[copyIndex()].networkSecurityGroupResourceId), createObject('value', ''))]",
                          "ipConfigurations": {
                            "value": "[parameters('nicConfigurations')[copyIndex()].ipConfigurations]"
                          },
                          "lock": {
                            "value": "[parameters('lock')]"
                          },
                          "diagnosticStorageAccountId": {
                            "value": "[parameters('diagnosticStorageAccountId')]"
                          },
                          "diagnosticLogsRetentionInDays": {
                            "value": "[parameters('diagnosticLogsRetentionInDays')]"
                          },
                          "diagnosticWorkspaceId": {
                            "value": "[parameters('diagnosticWorkspaceId')]"
                          },
                          "diagnosticEventHubAuthorizationRuleId": {
                            "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                          },
                          "diagnosticEventHubName": {
                            "value": "[parameters('diagnosticEventHubName')]"
                          },
                          "pipDiagnosticSettingsName": {
                            "value": "[parameters('pipDiagnosticSettingsName')]"
                          },
                          "nicDiagnosticSettingsName": {
                            "value": "[parameters('nicDiagnosticSettingsName')]"
                          },
                          "pipdiagnosticMetricsToEnable": {
                            "value": "[parameters('pipdiagnosticMetricsToEnable')]"
                          },
                          "pipdiagnosticLogCategoriesToEnable": {
                            "value": "[parameters('pipdiagnosticLogCategoriesToEnable')]"
                          },
                          "nicDiagnosticMetricsToEnable": {
                            "value": "[parameters('nicdiagnosticMetricsToEnable')]"
                          },
                          "roleAssignments": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'roleAssignments'), createObject('value', if(not(empty(parameters('nicConfigurations')[copyIndex()].roleAssignments)), parameters('nicConfigurations')[copyIndex()].roleAssignments, createArray())), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "16456921303261913725"
                            }
                          },
                          "parameters": {
                            "networkInterfaceName": {
                              "type": "string"
                            },
                            "virtualMachineName": {
                              "type": "string"
                            },
                            "location": {
                              "type": "string"
                            },
                            "tags": {
                              "type": "object"
                            },
                            "enableIPForwarding": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "enableAcceleratedNetworking": {
                              "type": "bool",
                              "defaultValue": false
                            },
                            "dnsServers": {
                              "type": "array",
                              "defaultValue": []
                            },
                            "networkSecurityGroupResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The network security group (NSG) to attach to the network interface."
                              }
                            },
                            "ipConfigurations": {
                              "type": "array"
                            },
                            "lock": {
                              "type": "string",
                              "defaultValue": ""
                            },
                            "diagnosticStorageAccountId": {
                              "type": "string"
                            },
                            "diagnosticLogsRetentionInDays": {
                              "type": "int"
                            },
                            "diagnosticWorkspaceId": {
                              "type": "string"
                            },
                            "diagnosticEventHubAuthorizationRuleId": {
                              "type": "string"
                            },
                            "diagnosticEventHubName": {
                              "type": "string"
                            },
                            "pipdiagnosticMetricsToEnable": {
                              "type": "array"
                            },
                            "pipdiagnosticLogCategoriesToEnable": {
                              "type": "array"
                            },
                            "nicDiagnosticMetricsToEnable": {
                              "type": "array"
                            },
                            "roleAssignments": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            },
                            "pipDiagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('virtualMachineName'))]",
                              "metadata": {
                                "description": "Optional. The name of the PIP diagnostic setting, if deployed."
                              }
                            },
                            "nicDiagnosticSettingsName": {
                              "type": "string",
                              "defaultValue": "[format('{0}-diagnosticSettings', parameters('virtualMachineName'))]",
                              "metadata": {
                                "description": "Optional. The name of the NIC diagnostic setting, if deployed."
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[contains(parameters('ipConfigurations')[copyIndex()], 'pipconfiguration')]",
                              "copy": {
                                "name": "networkInterface_publicIPAddresses",
                                "count": "[length(parameters('ipConfigurations'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-publicIP-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurations')[copyIndex()].pipconfiguration.publicIpNameSuffix)]"
                                  },
                                  "diagnosticEventHubAuthorizationRuleId": {
                                    "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                                  },
                                  "diagnosticEventHubName": {
                                    "value": "[parameters('diagnosticEventHubName')]"
                                  },
                                  "diagnosticLogCategoriesToEnable": {
                                    "value": "[parameters('pipdiagnosticLogCategoriesToEnable')]"
                                  },
                                  "diagnosticLogsRetentionInDays": {
                                    "value": "[parameters('diagnosticLogsRetentionInDays')]"
                                  },
                                  "diagnosticMetricsToEnable": {
                                    "value": "[parameters('pipdiagnosticMetricsToEnable')]"
                                  },
                                  "diagnosticSettingsName": {
                                    "value": "[parameters('pipDiagnosticSettingsName')]"
                                  },
                                  "diagnosticStorageAccountId": {
                                    "value": "[parameters('diagnosticStorageAccountId')]"
                                  },
                                  "diagnosticWorkspaceId": {
                                    "value": "[parameters('diagnosticWorkspaceId')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "lock": {
                                    "value": "[parameters('lock')]"
                                  },
                                  "publicIPAddressVersion": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'publicIPAddressVersion'), createObject('value', parameters('ipConfigurations')[copyIndex()].publicIPAddressVersion), createObject('value', 'IPv4'))]",
                                  "publicIPAllocationMethod": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'publicIPAllocationMethod'), createObject('value', parameters('ipConfigurations')[copyIndex()].publicIPAllocationMethod), createObject('value', 'Static'))]",
                                  "publicIPPrefixResourceId": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'publicIPPrefixResourceId'), createObject('value', parameters('ipConfigurations')[copyIndex()].publicIPPrefixResourceId), createObject('value', ''))]",
                                  "roleAssignments": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'roleAssignments'), createObject('value', parameters('ipConfigurations')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
                                  "skuName": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'skuName'), createObject('value', parameters('ipConfigurations')[copyIndex()].skuName), createObject('value', 'Standard'))]",
                                  "skuTier": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'skuTier'), createObject('value', parameters('ipConfigurations')[copyIndex()].skuTier), createObject('value', 'Regional'))]",
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "zones": "[if(contains(parameters('ipConfigurations')[copyIndex()], 'zones'), createObject('value', parameters('ipConfigurations')[copyIndex()].zones), createObject('value', createArray()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "13449739070789540681"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the Public IP Address."
                                      }
                                    },
                                    "publicIPPrefixResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                                      }
                                    },
                                    "publicIPAllocationMethod": {
                                      "type": "string",
                                      "defaultValue": "Dynamic",
                                      "allowedValues": [
                                        "Dynamic",
                                        "Static"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The public IP address allocation method."
                                      }
                                    },
                                    "skuName": {
                                      "type": "string",
                                      "defaultValue": "Basic",
                                      "allowedValues": [
                                        "Basic",
                                        "Standard"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Name of a public IP address SKU."
                                      }
                                    },
                                    "skuTier": {
                                      "type": "string",
                                      "defaultValue": "Regional",
                                      "allowedValues": [
                                        "Global",
                                        "Regional"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Tier of a public IP address SKU."
                                      }
                                    },
                                    "zones": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                                      }
                                    },
                                    "publicIPAddressVersion": {
                                      "type": "string",
                                      "defaultValue": "IPv4",
                                      "allowedValues": [
                                        "IPv4",
                                        "IPv6"
                                      ],
                                      "metadata": {
                                        "description": "Optional. IP address version."
                                      }
                                    },
                                    "diagnosticLogsRetentionInDays": {
                                      "type": "int",
                                      "defaultValue": 365,
                                      "maxValue": 365,
                                      "minValue": 0,
                                      "metadata": {
                                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                                      }
                                    },
                                    "diagnosticStorageAccountId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the diagnostic storage account."
                                      }
                                    },
                                    "diagnosticWorkspaceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the diagnostic log analytics workspace."
                                      }
                                    },
                                    "diagnosticEventHubAuthorizationRuleId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                      }
                                    },
                                    "diagnosticEventHubName": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                                      }
                                    },
                                    "lock": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Specify the type of lock."
                                      },
                                      "allowedValues": [
                                        "",
                                        "CanNotDelete",
                                        "ReadOnly"
                                      ]
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "diagnosticLogCategoriesToEnable": {
                                      "type": "array",
                                      "defaultValue": [
                                        "DDoSProtectionNotifications",
                                        "DDoSMitigationFlowLogs",
                                        "DDoSMitigationReports"
                                      ],
                                      "allowedValues": [
                                        "DDoSProtectionNotifications",
                                        "DDoSMitigationFlowLogs",
                                        "DDoSMitigationReports"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The name of logs that will be streamed."
                                      }
                                    },
                                    "diagnosticMetricsToEnable": {
                                      "type": "array",
                                      "defaultValue": [
                                        "AllMetrics"
                                      ],
                                      "allowedValues": [
                                        "AllMetrics"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The name of metrics that will be streamed."
                                      }
                                    },
                                    "diagnosticSettingsName": {
                                      "type": "string",
                                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                                      "metadata": {
                                        "description": "Optional. The name of the diagnostic setting, if deployed."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "diagnosticsLogs",
                                        "count": "[length(parameters('diagnosticLogCategoriesToEnable'))]",
                                        "input": {
                                          "category": "[parameters('diagnosticLogCategoriesToEnable')[copyIndex('diagnosticsLogs')]]",
                                          "enabled": true,
                                          "retentionPolicy": {
                                            "enabled": true,
                                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                          }
                                        }
                                      },
                                      {
                                        "name": "diagnosticsMetrics",
                                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                        "input": {
                                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                          "timeGrain": null,
                                          "enabled": true,
                                          "retentionPolicy": {
                                            "enabled": true,
                                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/publicIPAddresses",
                                      "apiVersion": "2021-08-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "sku": {
                                        "name": "[parameters('skuName')]",
                                        "tier": "[parameters('skuTier')]"
                                      },
                                      "zones": "[parameters('zones')]",
                                      "properties": {
                                        "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                                        "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                                        "publicIPPrefix": "[if(not(empty(parameters('publicIPPrefixResourceId'))), createObject('id', parameters('publicIPPrefixResourceId')), null())]",
                                        "idleTimeoutInMinutes": 4,
                                        "ipTags": []
                                      }
                                    },
                                    {
                                      "condition": "[not(empty(parameters('lock')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                                      "properties": {
                                        "level": "[parameters('lock')]",
                                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                      "name": "[parameters('diagnosticSettingsName')]",
                                      "properties": {
                                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                        "metrics": "[variables('diagnosticsMetrics')]",
                                        "logs": "[variables('diagnosticsLogs')]"
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "copy": {
                                        "name": "publicIpAddress_roleAssignments",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-PIPAddress-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.13.1.58284",
                                              "templateHash": "7287021548899153761"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the principals to assign the role to."
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The description of the role assignment."
                                              }
                                            },
                                            "condition": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                                              }
                                            },
                                            "conditionVersion": {
                                              "type": "string",
                                              "defaultValue": "2.0",
                                              "allowedValues": [
                                                "2.0"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Version of the condition."
                                              }
                                            },
                                            "delegatedManagedIdentityResourceId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Id of the delegated managed identity resource."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', last(split(parameters('resourceId'), '/')))]",
                                              "name": "[guid(resourceId('Microsoft.Network/publicIPAddresses', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group the public IP address was deployed into."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the public IP address."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the public IP address."
                                      }
                                    },
                                    "ipAddress": {
                                      "type": "string",
                                      "value": "[if(contains(reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-08-01'), 'ipAddress'), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-08-01').ipAddress, '')]",
                                      "metadata": {
                                        "description": "The public IP address of the public IP address resource."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-08-01', 'full').location]",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2020-10-01",
                              "name": "[format('{0}-NetworkInterface', deployment().name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('networkInterfaceName')]"
                                  },
                                  "ipConfigurations": {
                                    "copy": [
                                      {
                                        "name": "value",
                                        "count": "[length(parameters('ipConfigurations'))]",
                                        "input": "[createObject('name', if(not(empty(parameters('ipConfigurations')[copyIndex('value')].name)), parameters('ipConfigurations')[copyIndex('value')].name, null()), 'primary', equals(copyIndex('value'), 0), 'privateIPAllocationMethod', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurations')[copyIndex('value')].privateIPAllocationMethod)), parameters('ipConfigurations')[copyIndex('value')].privateIPAllocationMethod, null()), null()), 'privateIPAddress', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddress'), if(not(empty(parameters('ipConfigurations')[copyIndex('value')].privateIPAddress)), parameters('ipConfigurations')[copyIndex('value')].privateIPAddress, null()), null()), 'publicIPAddressResourceId', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'pipconfiguration'), resourceId('Microsoft.Network/publicIPAddresses', format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurations')[copyIndex('value')].pipconfiguration.publicIpNameSuffix)), null()), 'subnetResourceId', parameters('ipConfigurations')[copyIndex('value')].subnetResourceId, 'loadBalancerBackendAddressPools', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerBackendAddressPools'), parameters('ipConfigurations')[copyIndex('value')].loadBalancerBackendAddressPools, null()), 'applicationSecurityGroups', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'applicationSecurityGroups'), parameters('ipConfigurations')[copyIndex('value')].applicationSecurityGroups, null()), 'applicationGatewayBackendAddressPools', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'applicationGatewayBackendAddressPools'), parameters('ipConfigurations')[copyIndex('value')].applicationGatewayBackendAddressPools, null()), 'gatewayLoadBalancer', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'gatewayLoadBalancer'), parameters('ipConfigurations')[copyIndex('value')].gatewayLoadBalancer, null()), 'loadBalancerInboundNatRules', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerInboundNatRules'), parameters('ipConfigurations')[copyIndex('value')].loadBalancerInboundNatRules, null()), 'privateIPAddressVersion', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddressVersion'), parameters('ipConfigurations')[copyIndex('value')].privateIPAddressVersion, null()), 'virtualNetworkTaps', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'virtualNetworkTaps'), parameters('ipConfigurations')[copyIndex('value')].virtualNetworkTaps, null()))]"
                                      }
                                    ]
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "diagnosticEventHubAuthorizationRuleId": {
                                    "value": "[parameters('diagnosticEventHubAuthorizationRuleId')]"
                                  },
                                  "diagnosticEventHubName": {
                                    "value": "[parameters('diagnosticEventHubName')]"
                                  },
                                  "diagnosticLogsRetentionInDays": {
                                    "value": "[parameters('diagnosticLogsRetentionInDays')]"
                                  },
                                  "diagnosticStorageAccountId": {
                                    "value": "[parameters('diagnosticStorageAccountId')]"
                                  },
                                  "diagnosticMetricsToEnable": {
                                    "value": "[parameters('nicDiagnosticMetricsToEnable')]"
                                  },
                                  "diagnosticSettingsName": {
                                    "value": "[parameters('nicDiagnosticSettingsName')]"
                                  },
                                  "diagnosticWorkspaceId": {
                                    "value": "[parameters('diagnosticWorkspaceId')]"
                                  },
                                  "dnsServers": "[if(not(empty(parameters('dnsServers'))), createObject('value', parameters('dnsServers')), createObject('value', createArray()))]",
                                  "enableAcceleratedNetworking": {
                                    "value": "[parameters('enableAcceleratedNetworking')]"
                                  },
                                  "enableIPForwarding": {
                                    "value": "[parameters('enableIPForwarding')]"
                                  },
                                  "lock": {
                                    "value": "[parameters('lock')]"
                                  },
                                  "networkSecurityGroupResourceId": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('value', parameters('networkSecurityGroupResourceId')), createObject('value', ''))]",
                                  "roleAssignments": "[if(not(empty(parameters('roleAssignments'))), createObject('value', parameters('roleAssignments')), createObject('value', createArray()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.13.1.58284",
                                      "templateHash": "3250127774715033009"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the network interface."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "enableIPForwarding": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether IP forwarding is enabled on this network interface."
                                      }
                                    },
                                    "enableAcceleratedNetworking": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. If the network interface is accelerated networking enabled."
                                      }
                                    },
                                    "dnsServers": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection."
                                      }
                                    },
                                    "networkSecurityGroupResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The network security group (NSG) to attach to the network interface."
                                      }
                                    },
                                    "ipConfigurations": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. A list of IPConfigurations of the network interface."
                                      }
                                    },
                                    "lock": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Specify the type of lock."
                                      },
                                      "allowedValues": [
                                        "",
                                        "CanNotDelete",
                                        "ReadOnly"
                                      ]
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                      }
                                    },
                                    "diagnosticLogsRetentionInDays": {
                                      "type": "int",
                                      "defaultValue": 365,
                                      "maxValue": 365,
                                      "minValue": 0,
                                      "metadata": {
                                        "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
                                      }
                                    },
                                    "diagnosticStorageAccountId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the diagnostic storage account."
                                      }
                                    },
                                    "diagnosticWorkspaceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource identifier of log analytics."
                                      }
                                    },
                                    "diagnosticEventHubAuthorizationRuleId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                      }
                                    },
                                    "diagnosticEventHubName": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
                                      }
                                    },
                                    "diagnosticMetricsToEnable": {
                                      "type": "array",
                                      "defaultValue": [
                                        "AllMetrics"
                                      ],
                                      "allowedValues": [
                                        "AllMetrics"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The name of metrics that will be streamed."
                                      }
                                    },
                                    "diagnosticSettingsName": {
                                      "type": "string",
                                      "defaultValue": "[format('{0}-diagnosticSettings', parameters('name'))]",
                                      "metadata": {
                                        "description": "Optional. The name of the diagnostic setting, if deployed."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "diagnosticsMetrics",
                                        "count": "[length(parameters('diagnosticMetricsToEnable'))]",
                                        "input": {
                                          "category": "[parameters('diagnosticMetricsToEnable')[copyIndex('diagnosticsMetrics')]]",
                                          "timeGrain": null,
                                          "enabled": true,
                                          "retentionPolicy": {
                                            "enabled": true,
                                            "days": "[parameters('diagnosticLogsRetentionInDays')]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/networkInterfaces",
                                      "apiVersion": "2021-05-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "ipConfigurations",
                                            "count": "[length(parameters('ipConfigurations'))]",
                                            "input": {
                                              "name": "[if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].name)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].name, null())]",
                                              "properties": {
                                                "primary": "[if(equals(copyIndex('ipConfigurations'), 0), true(), false())]",
                                                "privateIPAllocationMethod": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod, null()), null())]",
                                                "privateIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddress'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress, null()), null())]",
                                                "publicIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'publicIPAddressResourceId'), if(not(equals(parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId, null())), createObject('id', parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId), null()), null())]",
                                                "subnet": {
                                                  "id": "[parameters('ipConfigurations')[copyIndex('ipConfigurations')].subnetResourceId]"
                                                },
                                                "loadBalancerBackendAddressPools": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerBackendAddressPools'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].loadBalancerBackendAddressPools, null())]",
                                                "applicationSecurityGroups": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationSecurityGroups'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].applicationSecurityGroups, null())]",
                                                "applicationGatewayBackendAddressPools": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationGatewayBackendAddressPools'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].applicationGatewayBackendAddressPools, null())]",
                                                "gatewayLoadBalancer": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'gatewayLoadBalancer'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].gatewayLoadBalancer, null())]",
                                                "loadBalancerInboundNatRules": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerInboundNatRules'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].loadBalancerInboundNatRules, null())]",
                                                "privateIPAddressVersion": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddressVersion'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddressVersion, null())]",
                                                "virtualNetworkTaps": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'virtualNetworkTaps'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].virtualNetworkTaps, null())]"
                                              }
                                            }
                                          }
                                        ],
                                        "enableIPForwarding": "[parameters('enableIPForwarding')]",
                                        "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                                        "dnsSettings": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', parameters('dnsServers')), null())]",
                                        "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]"
                                      }
                                    },
                                    {
                                      "condition": "[or(or(or(not(empty(parameters('diagnosticStorageAccountId'))), not(empty(parameters('diagnosticWorkspaceId')))), not(empty(parameters('diagnosticEventHubAuthorizationRuleId')))), not(empty(parameters('diagnosticEventHubName'))))]",
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                                      "name": "[parameters('diagnosticSettingsName')]",
                                      "properties": {
                                        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
                                        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
                                        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
                                        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
                                        "metrics": "[variables('diagnosticsMetrics')]"
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "condition": "[not(empty(parameters('lock')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                                      "name": "[format('{0}-{1}-lock', parameters('name'), parameters('lock'))]",
                                      "properties": {
                                        "level": "[parameters('lock')]",
                                        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                                      ]
                                    },
                                    {
                                      "copy": {
                                        "name": "networkInterface_roleAssignments",
                                        "count": "[length(parameters('roleAssignments'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2020-10-01",
                                      "name": "[format('{0}-NIC-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                                          "principalIds": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                                          },
                                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                                          "roleDefinitionIdOrName": {
                                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                                          },
                                          "resourceId": {
                                            "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.13.1.58284",
                                              "templateHash": "18384779621422977360"
                                            }
                                          },
                                          "parameters": {
                                            "principalIds": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. The IDs of the principals to assign the role to."
                                              }
                                            },
                                            "roleDefinitionIdOrName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "allowedValues": [
                                                "ServicePrincipal",
                                                "Group",
                                                "User",
                                                "ForeignGroup",
                                                "Device",
                                                ""
                                              ],
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The description of the role assignment."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "roleAssignment",
                                                "count": "[length(parameters('principalIds'))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', last(split(parameters('resourceId'), '/')))]",
                                              "name": "[guid(resourceId('Microsoft.Network/networkInterfaces', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                                              "properties": {
                                                "description": "[parameters('description')]",
                                                "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                                      ]
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "value": "[parameters('name')]",
                                      "metadata": {
                                        "description": "The name of the deployed resource."
                                      }
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]",
                                      "metadata": {
                                        "description": "The resource ID of the deployed resource."
                                      }
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "value": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "The resource group of the deployed resource."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', parameters('name')), '2021-05-01', 'full').location]",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "networkInterface_publicIPAddresses"
                              ]
                            }
                          ]
                        }
                      }
                    },
                    {
                      "condition": "[parameters('extensionDomainJoinConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('vmName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "DomainJoin"
                          },
                          "publisher": {
                            "value": "Microsoft.Compute"
                          },
                          "type": {
                            "value": "JsonADDomainExtension"
                          },
                          "typeHandlerVersion": "[if(contains(parameters('extensionDomainJoinConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDomainJoinConfig').typeHandlerVersion), createObject('value', '1.3'))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDomainJoinConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDomainJoinConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionDomainJoinConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDomainJoinConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "settings": {
                            "value": "[parameters('extensionDomainJoinConfig').settings]"
                          },
                          "protectedSettings": {
                            "value": {
                              "Password": "[parameters('extensionDomainJoinPassword')]"
                            }
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "3291483009942188370"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to."
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher."
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler."
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings."
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings."
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            },
                            "location": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2021-07-01', 'full').location]",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionAntiMalwareConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('vmName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "MicrosoftAntiMalware"
                          },
                          "publisher": {
                            "value": "Microsoft.Azure.Security"
                          },
                          "type": {
                            "value": "IaaSAntimalware"
                          },
                          "typeHandlerVersion": "[if(contains(parameters('extensionAntiMalwareConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAntiMalwareConfig').typeHandlerVersion), createObject('value', '1.3'))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAntiMalwareConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAntiMalwareConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionAntiMalwareConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAntiMalwareConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "settings": {
                            "value": "[parameters('extensionAntiMalwareConfig').settings]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "3291483009942188370"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to."
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher."
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler."
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings."
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings."
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            },
                            "location": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2021-07-01', 'full').location]",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionMonitoringAgentConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('vmName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "MicrosoftMonitoringAgent"
                          },
                          "publisher": {
                            "value": "Microsoft.EnterpriseCloud.Monitoring"
                          },
                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'MicrosoftMonitoringAgent'), createObject('value', 'OmsAgentForLinux'))]",
                          "typeHandlerVersion": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionMonitoringAgentConfig').typeHandlerVersion), createObject('value', if(equals(parameters('osType'), 'Windows'), '1.0', '1.7')))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionMonitoringAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionMonitoringAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionMonitoringAgentConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "settings": {
                            "value": {
                              "workspaceId": "[if(not(empty(parameters('monitoringWorkspaceId'))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').customerId, '')]"
                            }
                          },
                          "protectedSettings": {
                            "value": {
                              "workspaceKey": "[if(not(empty(parameters('monitoringWorkspaceId'))), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('monitoringWorkspaceId'), '/')[2], split(parameters('monitoringWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('monitoringWorkspaceId'), '/'))), '2021-06-01').primarySharedKey, '')]"
                            }
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "3291483009942188370"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to."
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher."
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler."
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings."
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings."
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            },
                            "location": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2021-07-01', 'full').location]",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionDependencyAgentConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('vmName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "DependencyAgent"
                          },
                          "publisher": {
                            "value": "Microsoft.Azure.Monitoring.DependencyAgent"
                          },
                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'DependencyAgentWindows'), createObject('value', 'DependencyAgentLinux'))]",
                          "typeHandlerVersion": "[if(contains(parameters('extensionDependencyAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDependencyAgentConfig').typeHandlerVersion), createObject('value', '9.5'))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDependencyAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDependencyAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionDependencyAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDependencyAgentConfig').enableAutomaticUpgrade), createObject('value', true()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "3291483009942188370"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to."
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher."
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler."
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings."
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings."
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            },
                            "location": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2021-07-01', 'full').location]",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionNetworkWatcherAgentConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('vmName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "NetworkWatcherAgent"
                          },
                          "publisher": {
                            "value": "Microsoft.Azure.NetworkWatcher"
                          },
                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'NetworkWatcherAgentWindows'), createObject('value', 'NetworkWatcherAgentLinux'))]",
                          "typeHandlerVersion": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').typeHandlerVersion), createObject('value', '1.4'))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').enableAutomaticUpgrade), createObject('value', false()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "3291483009942188370"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to."
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher."
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler."
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings."
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings."
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            },
                            "location": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2021-07-01', 'full').location]",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionDSCConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('vmName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "DesiredStateConfiguration"
                          },
                          "publisher": {
                            "value": "Microsoft.Powershell"
                          },
                          "type": {
                            "value": "DSC"
                          },
                          "typeHandlerVersion": "[if(contains(parameters('extensionDSCConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDSCConfig').typeHandlerVersion), createObject('value', '2.77'))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDSCConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDSCConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionDSCConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDSCConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "settings": "[if(contains(parameters('extensionDSCConfig'), 'settings'), createObject('value', parameters('extensionDSCConfig').settings), createObject('value', createObject()))]",
                          "protectedSettings": "[if(contains(parameters('extensionDSCConfig'), 'protectedSettings'), createObject('value', parameters('extensionDSCConfig').protectedSettings), createObject('value', createObject()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "3291483009942188370"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to."
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher."
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler."
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings."
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings."
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            },
                            "location": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2021-07-01', 'full').location]",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionCustomScriptConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('vmName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "CustomScriptExtension"
                          },
                          "publisher": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'Microsoft.Compute'), createObject('value', 'Microsoft.Azure.Extensions'))]",
                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'CustomScriptExtension'), createObject('value', 'CustomScript'))]",
                          "typeHandlerVersion": "[if(contains(parameters('extensionCustomScriptConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionCustomScriptConfig').typeHandlerVersion), createObject('value', if(equals(parameters('osType'), 'Windows'), '1.10', '2.1')))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionCustomScriptConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionCustomScriptConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionCustomScriptConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionCustomScriptConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "settings": {
                            "value": {
                              "copy": [
                                {
                                  "name": "fileUris",
                                  "count": "[length(parameters('extensionCustomScriptConfig').fileData)]",
                                  "input": "[if(contains(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')], 'storageAccountId'), format('{0}?{1}', parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri, listAccountSas(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].storageAccountId, '2019-04-01', variables('accountSasProperties')).accountSasToken), parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri)]"
                                }
                              ]
                            }
                          },
                          "protectedSettings": {
                            "value": "[parameters('extensionCustomScriptProtectedSetting')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "3291483009942188370"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to."
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher."
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler."
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings."
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings."
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            },
                            "location": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2021-07-01', 'full').location]",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location'))))]"
                      ]
                    },
                    {
                      "condition": "[parameters('extensionDiskEncryptionConfig').enabled]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-DiskEncryption', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualMachineName": {
                            "value": "[parameters('vmName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "name": {
                            "value": "DiskEncryption"
                          },
                          "publisher": {
                            "value": "Microsoft.Azure.Security"
                          },
                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzureDiskEncryption'), createObject('value', 'AzureDiskEncryptionForLinux'))]",
                          "typeHandlerVersion": "[if(contains(parameters('extensionDiskEncryptionConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDiskEncryptionConfig').typeHandlerVersion), createObject('value', if(equals(parameters('osType'), 'Windows'), '2.2', '1.1')))]",
                          "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDiskEncryptionConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDiskEncryptionConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                          "enableAutomaticUpgrade": "[if(contains(parameters('extensionDiskEncryptionConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDiskEncryptionConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                          "forceUpdateTag": "[if(contains(parameters('extensionDiskEncryptionConfig'), 'forceUpdateTag'), createObject('value', parameters('extensionDiskEncryptionConfig').forceUpdateTag), createObject('value', '1.0'))]",
                          "settings": {
                            "value": "[parameters('extensionDiskEncryptionConfig').settings]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "3291483009942188370"
                            }
                          },
                          "parameters": {
                            "virtualMachineName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine extension."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location the extension is deployed to."
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the extension handler publisher."
                              }
                            },
                            "type": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                              }
                            },
                            "typeHandlerVersion": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the version of the script handler."
                              }
                            },
                            "autoUpgradeMinorVersion": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                              }
                            },
                            "forceUpdateTag": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                              }
                            },
                            "settings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific settings."
                              }
                            },
                            "protectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Any object that contains the extension specific protected settings."
                              }
                            },
                            "supressFailures": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                              }
                            },
                            "enableAutomaticUpgrade": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Compute/virtualMachines/extensions",
                              "apiVersion": "2021-07-01",
                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "publisher": "[parameters('publisher')]",
                                "type": "[parameters('type')]",
                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                "suppressFailures": "[parameters('supressFailures')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "value": "[parameters('name')]",
                              "metadata": {
                                "description": "The name of the extension."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
                              "metadata": {
                                "description": "The resource ID of the extension."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the extension was created in."
                              }
                            },
                            "location": {
                              "type": "string",
                              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2021-07-01', 'full').location]",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location'))))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('backupVaultName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-Backup', uniqueString(deployment().name, parameters('location')))]",
                      "resourceGroup": "[parameters('backupVaultResourceGroup')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('vm;iaasvmcontainerv2;{0};{1}', resourceGroup().name, parameters('vmName'))]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "policyId": {
                            "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('backupVaultName'), parameters('backupPolicyName'))]"
                          },
                          "protectedItemType": {
                            "value": "Microsoft.Compute/virtualMachines"
                          },
                          "protectionContainerName": {
                            "value": "[format('iaasvmcontainer;iaasvmcontainerv2;{0};{1}', resourceGroup().name, parameters('vmName'))]"
                          },
                          "recoveryVaultName": {
                            "value": "[parameters('backupVaultName')]"
                          },
                          "sourceResourceId": {
                            "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "9168999162537973050"
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the resource."
                              }
                            },
                            "protectionContainerName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. Name of the Azure Recovery Service Vault Protection Container. Required if the template is used in a standalone deployment."
                              }
                            },
                            "recoveryVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "protectedItemType": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The backup item type."
                              },
                              "allowedValues": [
                                "AzureFileShareProtectedItem",
                                "AzureVmWorkloadSAPAseDatabase",
                                "AzureVmWorkloadSAPHanaDatabase",
                                "AzureVmWorkloadSQLDatabase",
                                "DPMProtectedItem",
                                "GenericProtectedItem",
                                "MabFileFolderProtectedItem",
                                "Microsoft.ClassicCompute/virtualMachines",
                                "Microsoft.Compute/virtualMachines",
                                "Microsoft.Sql/servers/databases"
                              ]
                            },
                            "policyId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. ID of the backup policy with which this item is backed up."
                              }
                            },
                            "sourceResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the resource to back up."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                              "apiVersion": "2022-02-01",
                              "name": "[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "protectedItemType": "[parameters('protectedItemType')]",
                                "policyId": "[parameters('policyId')]",
                                "sourceResourceId": "[parameters('sourceResourceId')]"
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "value": "[resourceGroup().name]",
                              "metadata": {
                                "description": "The name of the Resource Group the protected item was created in."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems', split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[0], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[1], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[2], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[3])]",
                              "metadata": {
                                "description": "The resource ID of the protected item."
                              }
                            },
                            "name": {
                              "type": "string",
                              "value": "[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]",
                              "metadata": {
                                "description": "The Name of the protected item."
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-MicrosoftMonitoringAgent', uniqueString(deployment().name, parameters('location'))))]",
                        "[resourceId('Microsoft.Resources/deployments', format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location'))))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "vm_roleAssignments",
                        "count": "[length(parameters('roleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-VM-Rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
                          "principalIds": {
                            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
                          },
                          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
                          },
                          "condition": "[if(contains(parameters('roleAssignments')[copyIndex()], 'condition'), createObject('value', parameters('roleAssignments')[copyIndex()].condition), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(contains(parameters('roleAssignments')[copyIndex()], 'delegatedManagedIdentityResourceId'), createObject('value', parameters('roleAssignments')[copyIndex()].delegatedManagedIdentityResourceId), createObject('value', ''))]",
                          "resourceId": {
                            "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "12812045459671488488"
                            }
                          },
                          "parameters": {
                            "principalIds": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The IDs of the principals to assign the role to."
                              }
                            },
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the role to assign. If it cannot be found you can specify the role definition ID instead."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource to apply the role assignment to."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Id of the delegated managed identity resource."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "roleAssignment",
                                "count": "[length(parameters('principalIds'))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', last(split(parameters('resourceId'), '/')))]",
                              "name": "[guid(resourceId('Microsoft.Compute/virtualMachines', last(split(parameters('resourceId'), '/'))), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
                              "properties": {
                                "description": "[parameters('description')]",
                                "roleDefinitionId": "[parameters('roleDefinitionIdOrName')]",
                                "principalId": "[parameters('principalIds')[copyIndex()]]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "value": "[parameters('vmName')]",
                      "metadata": {
                        "description": "The name of the VM."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('vmName'))]",
                      "metadata": {
                        "description": "The resource ID of the VM."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "value": "[resourceGroup().name]",
                      "metadata": {
                        "description": "The name of the resource group the VM was created in."
                      }
                    },
                    "systemAssignedPrincipalId": {
                      "type": "string",
                      "value": "[if(and(parameters('systemAssignedIdentity'), contains(reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2021-07-01', 'full').identity, 'principalId')), reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2021-07-01', 'full').identity.principalId, '')]",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      }
                    },
                    "location": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('vmName')), '2021-07-01', 'full').location]",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', format('deploy-ra-tags--{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
                "[resourceId('Microsoft.Resources/deployments', format('deploy-ra-win-avset-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
              ]
            }
          ],
          "outputs": {
            "linuxVMName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('deploy-ra-linux-vm-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.name.value]"
            },
            "windowsVMName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('deploy-ra-windows-vm-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.name.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('parOperationsSpoke').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-laws-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]",
        "[subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hubspoke-tags--{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[and(parameters('parRemoteAccess').enable, parameters('parRemoteAccess').bastion.customScriptExtension.install)]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('deploy-vmext-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
      "subscriptionId": "[parameters('parHub').subscriptionId]",
      "resourceGroup": "[variables('varHubResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('parLocation')]"
          },
          "type": {
            "value": "CustomScript"
          },
          "name": {
            "value": "Script Definition"
          },
          "publisher": {
            "value": "Microsoft.Azure.Extensions"
          },
          "enableAutomaticUpgrade": {
            "value": true
          },
          "autoUpgradeMinorVersion": {
            "value": true
          },
          "typeHandlerVersion": {
            "value": "2.1"
          },
          "virtualMachineName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHub').subscriptionId, variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-remote-access-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.linuxVMName.value]"
          },
          "protectedSettings": {
            "value": {
              "script": "[parameters('parRemoteAccess').bastion.customScriptExtension.script64]"
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.13.1.58284",
              "templateHash": "3291483009942188370"
            }
          },
          "parameters": {
            "virtualMachineName": {
              "type": "string",
              "metadata": {
                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the virtual machine extension."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location the extension is deployed to."
              }
            },
            "publisher": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the extension handler publisher."
              }
            },
            "type": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
              }
            },
            "typeHandlerVersion": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the version of the script handler."
              }
            },
            "autoUpgradeMinorVersion": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
              }
            },
            "forceUpdateTag": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
              }
            },
            "settings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific settings."
              }
            },
            "protectedSettings": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Any object that contains the extension specific protected settings."
              }
            },
            "supressFailures": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
              }
            },
            "enableAutomaticUpgrade": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2021-07-01",
              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "[parameters('publisher')]",
                "type": "[parameters('type')]",
                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                "suppressFailures": "[parameters('supressFailures')]"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "value": "[parameters('name')]",
              "metadata": {
                "description": "The name of the extension."
              }
            },
            "resourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]",
              "metadata": {
                "description": "The resource ID of the extension."
              }
            },
            "resourceGroupName": {
              "type": "string",
              "value": "[resourceGroup().name]",
              "metadata": {
                "description": "The name of the Resource Group the extension was created in."
              }
            },
            "location": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name')), '2021-07-01', 'full').location]",
              "metadata": {
                "description": "The location the resource was deployed into."
              }
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('parHub').subscriptionId, variables('varHubResourceGroupName')), 'Microsoft.Resources/deployments', format('deploy-remote-access-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('parSecurityCenter').enableDefender]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('deploy-defender-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
      "subscriptionId": "[parameters('parHub').subscriptionId]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "parLocation": {
            "value": "[parameters('parLocation')]"
          },
          "parLogAnalyticsWorkspaceResourceId": {
            "value": "[reference(subscriptionResourceId(parameters('parOperationsSpoke').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-laws-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.outLogAnalyticsWorkspaceResourceId.value]"
          },
          "parSecurityCenter": {
            "value": "[parameters('parSecurityCenter')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.13.1.58284",
              "templateHash": "12964549585136604682"
            }
          },
          "parameters": {
            "parLocation": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "The region to deploy resources into. It defaults to the deployment location."
              }
            },
            "parSecurityCenter": {
              "type": "object",
              "metadata": {
                "description": "Microsoft Defender for Cloud.  It includes email and phone."
              }
            },
            "parLogAnalyticsWorkspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics Workspace Resource Id Needed for Defender"
              }
            },
            "parDeploymentNameSuffix": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "A suffix to use for naming deployments uniquely. It defaults to the Bicep resolution of the \"utcNow()\" function."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('set-sub-defender-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "workspaceId": {
                    "value": "[parameters('parLogAnalyticsWorkspaceResourceId')]"
                  },
                  "securityContactProperties": {
                    "value": {
                      "alertNotifications": "[parameters('parSecurityCenter').alertNotifications]",
                      "alertsToAdmins": "[parameters('parSecurityCenter').alertsToAdminsNotifications]",
                      "email": "[parameters('parSecurityCenter').emailSecurityContact]",
                      "phone": "[parameters('parSecurityCenter').phoneSecurityContact]"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "3901104701527488805"
                    }
                  },
                  "parameters": {
                    "workspaceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The full Azure ID of the workspace to save the data in."
                      }
                    },
                    "autoProvision": {
                      "type": "string",
                      "defaultValue": "On",
                      "allowedValues": [
                        "On",
                        "Off"
                      ],
                      "metadata": {
                        "description": "Optional. Describes what kind of security agent provisioning action to take. - On or Off."
                      }
                    },
                    "deviceSecurityGroupProperties": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Device Security group data."
                      }
                    },
                    "ioTSecuritySolutionProperties": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Security Solution data."
                      }
                    },
                    "virtualMachinesPricingTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for VMs. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "sqlServersPricingTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for SqlServers. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "appServicesPricingTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for AppServices. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "storageAccountsPricingTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for StorageAccounts. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "sqlServerVirtualMachinesPricingTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for SqlServerVirtualMachines. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "kubernetesServicePricingTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for KubernetesService. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "containerRegistryPricingTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for ContainerRegistry. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "keyVaultsPricingTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for KeyVaults. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "dnsPricingTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for DNS. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "armPricingTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for ARM. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "openSourceRelationalDatabasesTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for OpenSourceRelationalDatabases. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "containersTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for containers. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "cosmosDbsTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for CosmosDbs. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "securityContactProperties": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Security contact data."
                      }
                    }
                  },
                  "variables": {
                    "pricings": "[if(equals(environment().name, 'AzureCloud'), createArray(createObject('name', 'VirtualMachines', 'pricingTier', parameters('virtualMachinesPricingTier')), createObject('name', 'SqlServers', 'pricingTier', parameters('sqlServersPricingTier')), createObject('name', 'AppServices', 'pricingTier', parameters('appServicesPricingTier')), createObject('name', 'StorageAccounts', 'pricingTier', parameters('storageAccountsPricingTier')), createObject('name', 'SqlServerVirtualMachines', 'pricingTier', parameters('sqlServerVirtualMachinesPricingTier')), createObject('name', 'KubernetesService', 'pricingTier', parameters('kubernetesServicePricingTier')), createObject('name', 'ContainerRegistry', 'pricingTier', parameters('containerRegistryPricingTier')), createObject('name', 'KeyVaults', 'pricingTier', parameters('keyVaultsPricingTier')), createObject('name', 'Dns', 'pricingTier', parameters('dnsPricingTier')), createObject('name', 'Arm', 'pricingTier', parameters('armPricingTier')), createObject('name', 'OpenSourceRelationalDatabases', 'pricingTier', parameters('openSourceRelationalDatabasesTier')), createObject('name', 'Containers', 'pricingTier', parameters('containersTier')), createObject('name', 'CosmosDbs', 'pricingTier', parameters('cosmosDbsTier'))), if(equals(environment().name, 'AzureUSGovernment'), createArray(createObject('name', 'Arm', 'pricingTier', parameters('armPricingTier')), createObject('name', 'ContainerRegistry', 'pricingTier', parameters('containerRegistryPricingTier')), createObject('name', 'Containers', 'pricingTier', parameters('containersTier')), createObject('name', 'Dns', 'pricingTier', parameters('dnsPricingTier')), createObject('name', 'KubernetesService', 'pricingTier', parameters('kubernetesServicePricingTier')), createObject('name', 'OpenSourceRelationalDatabases', 'pricingTier', parameters('openSourceRelationalDatabasesTier')), createObject('name', 'StorageAccounts', 'pricingTier', parameters('storageAccountsPricingTier')), createObject('name', 'SqlServerVirtualMachines', 'pricingTier', parameters('sqlServerVirtualMachinesPricingTier')), createObject('name', 'VirtualMachines', 'pricingTier', parameters('virtualMachinesPricingTier')), createObject('name', 'SqlServers', 'pricingTier', parameters('sqlServersPricingTier'))), createArray()))]"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "pricingTiers",
                        "count": "[length(variables('pricings'))]"
                      },
                      "type": "Microsoft.Security/pricings",
                      "apiVersion": "2018-06-01",
                      "name": "[variables('pricings')[copyIndex()].name]",
                      "properties": {
                        "pricingTier": "[variables('pricings')[copyIndex()].pricingTier]"
                      }
                    },
                    {
                      "type": "Microsoft.Security/autoProvisioningSettings",
                      "apiVersion": "2017-08-01-preview",
                      "name": "default",
                      "properties": {
                        "autoProvision": "[parameters('autoProvision')]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('deviceSecurityGroupProperties')))]",
                      "type": "Microsoft.Security/deviceSecurityGroups",
                      "apiVersion": "2019-08-01",
                      "name": "deviceSecurityGroups",
                      "properties": {
                        "thresholdRules": "[parameters('deviceSecurityGroupProperties').thresholdRules]",
                        "timeWindowRules": "[parameters('deviceSecurityGroupProperties').timeWindowRules]",
                        "allowlistRules": "[parameters('deviceSecurityGroupProperties').allowlistRules]",
                        "denylistRules": "[parameters('deviceSecurityGroupProperties').denylistRules]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('securityContactProperties')))]",
                      "type": "Microsoft.Security/securityContacts",
                      "apiVersion": "2017-08-01-preview",
                      "name": "securityContacts",
                      "properties": {
                        "email": "[parameters('securityContactProperties').email]",
                        "phone": "[parameters('securityContactProperties').phone]",
                        "alertNotifications": "[parameters('securityContactProperties').alertNotifications]",
                        "alertsToAdmins": "[parameters('securityContactProperties').alertsToAdmins]"
                      }
                    },
                    {
                      "type": "Microsoft.Security/workspaceSettings",
                      "apiVersion": "2017-08-01-preview",
                      "name": "default",
                      "properties": {
                        "workspaceId": "[parameters('workspaceId')]",
                        "scope": "[subscription().id]"
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Security/autoProvisioningSettings', 'default')]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('ioTSecuritySolutionProperties')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-ASC-IotSecuritySolutions', uniqueString(deployment().name))]",
                      "resourceGroup": "[if(empty(parameters('ioTSecuritySolutionProperties')), 'dummy', parameters('ioTSecuritySolutionProperties').resourceGroup)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "ioTSecuritySolutionProperties": {
                            "value": "[parameters('ioTSecuritySolutionProperties')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "448808391567804263"
                            }
                          },
                          "parameters": {
                            "ioTSecuritySolutionProperties": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Security Solution data"
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[not(empty(parameters('ioTSecuritySolutionProperties')))]",
                              "type": "Microsoft.Security/iotSecuritySolutions",
                              "apiVersion": "2019-08-01",
                              "name": "iotSecuritySolutions",
                              "properties": {
                                "workspace": "[parameters('ioTSecuritySolutionProperties').workspace]",
                                "displayName": "[parameters('ioTSecuritySolutionProperties').displayName]",
                                "status": "[parameters('ioTSecuritySolutionProperties').status]",
                                "export": "[parameters('ioTSecuritySolutionProperties').export]",
                                "disabledDataSources": "[parameters('ioTSecuritySolutionProperties').disabledDataSources]",
                                "iotHubs": "[parameters('ioTSecuritySolutionProperties').iotHubs]",
                                "userDefinedResources": "[parameters('ioTSecuritySolutionProperties').userDefinedResources]",
                                "recommendationsConfiguration": "[parameters('ioTSecuritySolutionProperties').recommendationsConfiguration]"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "workspaceId": {
                      "type": "string",
                      "value": "[parameters('workspaceId')]",
                      "metadata": {
                        "description": "The resource ID of the used log analytics workspace."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "Security",
                      "metadata": {
                        "description": "The name of the security center."
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(parameters('parOperationsSpoke').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-laws-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
      ]
    },
    {
      "condition": "[and(parameters('parSecurityCenter').enableDefender, not(equals(parameters('parOperationsSpoke').subscriptionId, parameters('parHub').subscriptionId)))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('deploy-defender-ops-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
      "subscriptionId": "[parameters('parOperationsSpoke').subscriptionId]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "parLocation": {
            "value": "[parameters('parLocation')]"
          },
          "parLogAnalyticsWorkspaceResourceId": {
            "value": "[reference(subscriptionResourceId(parameters('parOperationsSpoke').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-laws-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.outLogAnalyticsWorkspaceResourceId.value]"
          },
          "parSecurityCenter": {
            "value": "[parameters('parSecurityCenter')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.13.1.58284",
              "templateHash": "12964549585136604682"
            }
          },
          "parameters": {
            "parLocation": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "The region to deploy resources into. It defaults to the deployment location."
              }
            },
            "parSecurityCenter": {
              "type": "object",
              "metadata": {
                "description": "Microsoft Defender for Cloud.  It includes email and phone."
              }
            },
            "parLogAnalyticsWorkspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics Workspace Resource Id Needed for Defender"
              }
            },
            "parDeploymentNameSuffix": {
              "type": "string",
              "defaultValue": "[utcNow()]",
              "metadata": {
                "description": "A suffix to use for naming deployments uniquely. It defaults to the Bicep resolution of the \"utcNow()\" function."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('set-sub-defender-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "workspaceId": {
                    "value": "[parameters('parLogAnalyticsWorkspaceResourceId')]"
                  },
                  "securityContactProperties": {
                    "value": {
                      "alertNotifications": "[parameters('parSecurityCenter').alertNotifications]",
                      "alertsToAdmins": "[parameters('parSecurityCenter').alertsToAdminsNotifications]",
                      "email": "[parameters('parSecurityCenter').emailSecurityContact]",
                      "phone": "[parameters('parSecurityCenter').phoneSecurityContact]"
                    }
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.13.1.58284",
                      "templateHash": "3901104701527488805"
                    }
                  },
                  "parameters": {
                    "workspaceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The full Azure ID of the workspace to save the data in."
                      }
                    },
                    "autoProvision": {
                      "type": "string",
                      "defaultValue": "On",
                      "allowedValues": [
                        "On",
                        "Off"
                      ],
                      "metadata": {
                        "description": "Optional. Describes what kind of security agent provisioning action to take. - On or Off."
                      }
                    },
                    "deviceSecurityGroupProperties": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Device Security group data."
                      }
                    },
                    "ioTSecuritySolutionProperties": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Security Solution data."
                      }
                    },
                    "virtualMachinesPricingTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for VMs. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "sqlServersPricingTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for SqlServers. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "appServicesPricingTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for AppServices. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "storageAccountsPricingTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for StorageAccounts. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "sqlServerVirtualMachinesPricingTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for SqlServerVirtualMachines. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "kubernetesServicePricingTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for KubernetesService. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "containerRegistryPricingTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for ContainerRegistry. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "keyVaultsPricingTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for KeyVaults. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "dnsPricingTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for DNS. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "armPricingTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for ARM. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "openSourceRelationalDatabasesTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for OpenSourceRelationalDatabases. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "containersTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for containers. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "cosmosDbsTier": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Free",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The pricing tier value for CosmosDbs. Azure Security Center is provided in two pricing tiers: free and standard, with the standard tier available with a trial period. The standard tier offers advanced security capabilities, while the free tier offers basic security features. - Free or Standard."
                      }
                    },
                    "securityContactProperties": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Security contact data."
                      }
                    }
                  },
                  "variables": {
                    "pricings": "[if(equals(environment().name, 'AzureCloud'), createArray(createObject('name', 'VirtualMachines', 'pricingTier', parameters('virtualMachinesPricingTier')), createObject('name', 'SqlServers', 'pricingTier', parameters('sqlServersPricingTier')), createObject('name', 'AppServices', 'pricingTier', parameters('appServicesPricingTier')), createObject('name', 'StorageAccounts', 'pricingTier', parameters('storageAccountsPricingTier')), createObject('name', 'SqlServerVirtualMachines', 'pricingTier', parameters('sqlServerVirtualMachinesPricingTier')), createObject('name', 'KubernetesService', 'pricingTier', parameters('kubernetesServicePricingTier')), createObject('name', 'ContainerRegistry', 'pricingTier', parameters('containerRegistryPricingTier')), createObject('name', 'KeyVaults', 'pricingTier', parameters('keyVaultsPricingTier')), createObject('name', 'Dns', 'pricingTier', parameters('dnsPricingTier')), createObject('name', 'Arm', 'pricingTier', parameters('armPricingTier')), createObject('name', 'OpenSourceRelationalDatabases', 'pricingTier', parameters('openSourceRelationalDatabasesTier')), createObject('name', 'Containers', 'pricingTier', parameters('containersTier')), createObject('name', 'CosmosDbs', 'pricingTier', parameters('cosmosDbsTier'))), if(equals(environment().name, 'AzureUSGovernment'), createArray(createObject('name', 'Arm', 'pricingTier', parameters('armPricingTier')), createObject('name', 'ContainerRegistry', 'pricingTier', parameters('containerRegistryPricingTier')), createObject('name', 'Containers', 'pricingTier', parameters('containersTier')), createObject('name', 'Dns', 'pricingTier', parameters('dnsPricingTier')), createObject('name', 'KubernetesService', 'pricingTier', parameters('kubernetesServicePricingTier')), createObject('name', 'OpenSourceRelationalDatabases', 'pricingTier', parameters('openSourceRelationalDatabasesTier')), createObject('name', 'StorageAccounts', 'pricingTier', parameters('storageAccountsPricingTier')), createObject('name', 'SqlServerVirtualMachines', 'pricingTier', parameters('sqlServerVirtualMachinesPricingTier')), createObject('name', 'VirtualMachines', 'pricingTier', parameters('virtualMachinesPricingTier')), createObject('name', 'SqlServers', 'pricingTier', parameters('sqlServersPricingTier'))), createArray()))]"
                  },
                  "resources": [
                    {
                      "copy": {
                        "name": "pricingTiers",
                        "count": "[length(variables('pricings'))]"
                      },
                      "type": "Microsoft.Security/pricings",
                      "apiVersion": "2018-06-01",
                      "name": "[variables('pricings')[copyIndex()].name]",
                      "properties": {
                        "pricingTier": "[variables('pricings')[copyIndex()].pricingTier]"
                      }
                    },
                    {
                      "type": "Microsoft.Security/autoProvisioningSettings",
                      "apiVersion": "2017-08-01-preview",
                      "name": "default",
                      "properties": {
                        "autoProvision": "[parameters('autoProvision')]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('deviceSecurityGroupProperties')))]",
                      "type": "Microsoft.Security/deviceSecurityGroups",
                      "apiVersion": "2019-08-01",
                      "name": "deviceSecurityGroups",
                      "properties": {
                        "thresholdRules": "[parameters('deviceSecurityGroupProperties').thresholdRules]",
                        "timeWindowRules": "[parameters('deviceSecurityGroupProperties').timeWindowRules]",
                        "allowlistRules": "[parameters('deviceSecurityGroupProperties').allowlistRules]",
                        "denylistRules": "[parameters('deviceSecurityGroupProperties').denylistRules]"
                      }
                    },
                    {
                      "condition": "[not(empty(parameters('securityContactProperties')))]",
                      "type": "Microsoft.Security/securityContacts",
                      "apiVersion": "2017-08-01-preview",
                      "name": "securityContacts",
                      "properties": {
                        "email": "[parameters('securityContactProperties').email]",
                        "phone": "[parameters('securityContactProperties').phone]",
                        "alertNotifications": "[parameters('securityContactProperties').alertNotifications]",
                        "alertsToAdmins": "[parameters('securityContactProperties').alertsToAdmins]"
                      }
                    },
                    {
                      "type": "Microsoft.Security/workspaceSettings",
                      "apiVersion": "2017-08-01-preview",
                      "name": "default",
                      "properties": {
                        "workspaceId": "[parameters('workspaceId')]",
                        "scope": "[subscription().id]"
                      },
                      "dependsOn": [
                        "[subscriptionResourceId('Microsoft.Security/autoProvisioningSettings', 'default')]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('ioTSecuritySolutionProperties')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('{0}-ASC-IotSecuritySolutions', uniqueString(deployment().name))]",
                      "resourceGroup": "[if(empty(parameters('ioTSecuritySolutionProperties')), 'dummy', parameters('ioTSecuritySolutionProperties').resourceGroup)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "ioTSecuritySolutionProperties": {
                            "value": "[parameters('ioTSecuritySolutionProperties')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.13.1.58284",
                              "templateHash": "448808391567804263"
                            }
                          },
                          "parameters": {
                            "ioTSecuritySolutionProperties": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Security Solution data"
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[not(empty(parameters('ioTSecuritySolutionProperties')))]",
                              "type": "Microsoft.Security/iotSecuritySolutions",
                              "apiVersion": "2019-08-01",
                              "name": "iotSecuritySolutions",
                              "properties": {
                                "workspace": "[parameters('ioTSecuritySolutionProperties').workspace]",
                                "displayName": "[parameters('ioTSecuritySolutionProperties').displayName]",
                                "status": "[parameters('ioTSecuritySolutionProperties').status]",
                                "export": "[parameters('ioTSecuritySolutionProperties').export]",
                                "disabledDataSources": "[parameters('ioTSecuritySolutionProperties').disabledDataSources]",
                                "iotHubs": "[parameters('ioTSecuritySolutionProperties').iotHubs]",
                                "userDefinedResources": "[parameters('ioTSecuritySolutionProperties').userDefinedResources]",
                                "recommendationsConfiguration": "[parameters('ioTSecuritySolutionProperties').recommendationsConfiguration]"
                              }
                            }
                          ]
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "workspaceId": {
                      "type": "string",
                      "value": "[parameters('workspaceId')]",
                      "metadata": {
                        "description": "The resource ID of the used log analytics workspace."
                      }
                    },
                    "name": {
                      "type": "string",
                      "value": "Security",
                      "metadata": {
                        "description": "The name of the security center."
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId(parameters('parOperationsSpoke').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-laws-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix')))]"
      ]
    }
  ],
  "outputs": {
    "deployEnvironment": {
      "type": "string",
      "value": "[parameters('parRequired').deployEnvironment]"
    },
    "firewallPrivateIPAddress": {
      "type": "string",
      "value": "[reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.firewallPrivateIPAddress.value]"
    },
    "firewallPolicyName": {
      "type": "string",
      "value": "[reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.firewallPolicyName.value]"
    },
    "hub": {
      "type": "object",
      "value": {
        "subscriptionId": "[parameters('parHub').subscriptionId]",
        "resourceGroupName": "[reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceGroupName.value]",
        "resourceGroupResourceId": "[reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.resourceGroupResourceId.value]",
        "virtualNetworkName": "[reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.virtualNetworkName.value]",
        "virtualNetworkResourceId": "[reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.virtualNetworkResourceId.value]",
        "subnetName": "[reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.subnetName.value]",
        "subnetResourceId": "[reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.subnetResourceId.value]",
        "subnetAddressPrefix": "[reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.subnetAddressPrefix.value]",
        "networkSecurityGroupName": "[reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.networkSecurityGroupName.value]",
        "networkSecurityGroupResourceId": "[reference(subscriptionResourceId(parameters('parHub').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-hub-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.networkSecurityGroupResourceId.value]"
      }
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "value": "[reference(subscriptionResourceId(parameters('parOperationsSpoke').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-laws-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.outLogAnalyticsWorkspaceName.value]"
    },
    "logAnalyticsWorkspaceResourceId": {
      "type": "string",
      "value": "[reference(subscriptionResourceId(parameters('parOperationsSpoke').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-laws-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.outLogAnalyticsWorkspaceResourceId.value]"
    },
    "diagnosticStorageAccountName": {
      "type": "string",
      "value": "[reference(subscriptionResourceId(parameters('parOperationsSpoke').subscriptionId, 'Microsoft.Resources/deployments', format('deploy-vnet-spoke-ops-{0}-{1}', parameters('parLocation'), parameters('parDeploymentNameSuffix'))), '2020-10-01').outputs.operationsLogStorageAccountName.value]"
    }
  }
}