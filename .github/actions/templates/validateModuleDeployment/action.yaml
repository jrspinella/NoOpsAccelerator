#########################################################
## 'Deploy module' Composite Action                    ##
#########################################################
##
## This composite action contains the logic to both test and execute a deployment of a given template and parameter file.
## By default, tested deployments are also removed. Optionally, the removal step can be skipped.
##
#########################################################
##
##-------------------------------------------##
## ACTION PARAMETERS                         ##
##-------------------------------------------##
##
##   |=====================================================================================================================================================================================|
##   | Parameter                 | Required | Default | Description                                           | Example                                                                    |
##   |---------------------------|----------|---------|-------------------------------------------------------|----------------------------------------------------------------------------|
##   | templateFilePath          | true     | ''      | The path to the template file to use for deployment   | 'modules/Microsoft.ApiManagement/service/deploy.bicep'                     |
##   | location                  | true     | ''      | The location to use for deployment                    | 'WestEurope'                                                               |
##   | subscriptionId            | false    | ''      | The subscriptionId to deploy to                       | '1a97b80a-4dda-4f50-ab53-349e29344654'                                     |
##   | managementGroupId         | false    | ''      | The managementGroupId to deploy to                    | '1a97b80a-4dda-4f50-ab53-349e29344654'                                     |
##   | customTokens              | false    | ''      | Additional token pairs in json format.                | '{"tokenName":"tokenValue"}'                                               |
##   | removeDeployment          | false    | 'true'  | Set "true" to set module up for removal               | 'true'                                                                     |
##   |=====================================================================================================================================================================================|
##
#########################################################

name: 'Deploy module'
description: 'Deploy module'

inputs:
  templateFilePath:
    description: 'The path to the template file to use for deployment'
    required: true
  location:
    description: 'The location to use for deployment'
    required: true
  subscriptionId:
    description: 'The subscription ID to deploy to'
    required: false
  managementGroupId:
    description: 'The management group ID to deploy to'
    required: false
  customTokens:
    description: 'Additional parameter file token pairs in json format. e.g. {"tokenName":"tokenValue"}'
    required: false
  removeDeployment:
    description: 'Set "true" to set module up for removal'
    default: 'true'
    required: false

runs:
  using: 'composite'
  steps:
    # [Setup] task(s)
    # ---------------
    - name: 'Setup Agent'
      shell: pwsh
      run: |
        # Grouping task logs
        Write-Output '::group::Setup Agent'
        # Load used functions
        . (Join-Path $env:GITHUB_WORKSPACE 'src/bicep/utilities' 'pipelineTools' 'sharedScripts' 'Set-EnvironmentOnAgent.ps1')
        # Define PS modules to install on the runner
        $Modules = @(
            @{ Name = 'Az.Accounts' },
            @{ Name = 'Az.Resources' }
        )
        # Additional PS modules need to be installed for the removal step in case it is enabled
        if ('${{ inputs.removeDeployment}}' -eq 'true') {
          $Modules += @(
            @{ Name = 'Az.CognitiveServices' },
            @{ Name = 'Az.Compute' },
            @{ Name = 'Az.KeyVault' },
            @{ Name = 'Az.Monitor' },
            @{ Name = 'Az.OperationalInsights' },
            @{ Name = 'Az.RecoveryServices' }
            @{ Name = 'powershell-yaml'; Version = '0.4.2'}
          )
        }
        # Set agent up
        Set-EnvironmentOnAgent -PSModules $Modules
        Write-Output '::endgroup::'
    - name: Azure Login
      uses: Azure/login@v1
      with:
        creds: ${{ env.AZURE_CREDENTIALS }}
        enable-AzPSSession: true

    # [Deployment validation] task(s)
    # -------------------------------
    - name: 'Validate Module File'
      uses: azure/powershell@v1
      with:
        azPSVersion: 'latest'
        inlineScript: |
          # Grouping task logs
          Write-Output '::group::Validate Module File'
          # Load used functions
          . (Join-Path $env:GITHUB_WORKSPACE 'src/bicep/utilities' 'pipelineTools' 'resourceDeployment' 'Test-TemplateDeployment.ps1')
          # Prepare general parameters
          # --------------------------
          # Fetching parameters
          $location = '${{ inputs.location }}'
          $subscriptionId = '${{ inputs.subscriptionId }}'
          $managementGroupId = '${{ inputs.managementGroupId }}'
          # Resolve template file path
          $moduleTestFilePath = Join-Path $env:GITHUB_WORKSPACE '${{ inputs.templateFilePath }}'
          # Determine possible parameters depending on file type
          if ((Split-Path $moduleTestFilePath -Extension) -eq '.bicep') {
            $moduleTemplateContent = az bicep build --file $moduleTestFilePath --stdout --only-show-errors | ConvertFrom-Json -AsHashtable
            $moduleTemplatePossibleParameters = $moduleTemplateContent.parameters.Keys
          } else {
            $moduleTemplatePossibleParameters = ((Get-Content $moduleTestFilePath -Raw) | ConvertFrom-Json -AsHashtable).parameters.keys
          }
          # ----------------- #
          # Invoke validation #
          # ----------------- #
          $functionInput = @{
            TemplateFilePath     = $moduleTestFilePath
            Location             = $location
            SubscriptionId       = $subscriptionId
            ManagementGroupId    = $managementGroupId
            AdditionalParameters = @{}
          }

          Write-Verbose 'Invoke task with' -Verbose
          Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose
          Test-TemplateDeployment @functionInput -Verbose
          Write-Output '::endgroup::'
    # [Deployment execution] task(s)
    # ------------------------------
    - name: 'Deploy Module File'
      id: deploy_step
      uses: azure/powershell@v1
      with:
        azPSVersion: 'latest'
        inlineScript: |
          # Grouping task logs
          Write-Output '::group::Deploy Module File'
          # Load used functions
          . (Join-Path $env:GITHUB_WORKSPACE 'src/bicep/utilities' 'pipelineTools' 'resourceDeployment' 'New-TemplateDeployment.ps1')
          # Prepare general parameters
          # --------------------------
          $location = '${{ inputs.location }}'
          $subscriptionId = '${{ inputs.subscriptionId }}'
          $managementGroupId = '${{ inputs.managementGroupId }}'
          # Resolve template file path
          $moduleTestFilePath = Join-Path $env:GITHUB_WORKSPACE '${{ inputs.templateFilePath }}'
          # ----------------- #
          # Invoke deployment #
          # ----------------- #
          $functionInput = @{
            TemplateFilePath     = $moduleTestFilePath
            Location             = $location
            SubscriptionId       = $subscriptionId
            ManagementGroupId    = $managementGroupId
            DoNotThrow           = $true
            AdditionalParameters = @{}
          }

          Write-Verbose 'Invoke task with' -Verbose
          Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose
          # Invoke deployment
          $res = New-TemplateDeployment @functionInput -Verbose
          # Get deployment name
          Write-Output ('{0}={1}' -f 'deploymentNames', ($res.deploymentNames | ConvertTo-Json -Compress)) >> $env:GITHUB_OUTPUT
          # Populate further outputs
          $deploymentOutputHashTable = @{}
          foreach ($outputKey in $res.deploymentOutput.Keys) {
            Write-Output ('{0}={1}' -f 'outputKey', $res.deploymentOutput[$outputKey].Value) >> $env:GITHUB_OUTPUT
            $deploymentOutputHashTable.add($outputKey, $res.deploymentOutput[$outputKey].Value)
          }
          $deploymentOutput = $deploymentOutputHashTable | ConvertTo-Json -Compress -Depth 100
          Write-Verbose "Deployment output: $deploymentOutput" -Verbose
          if ($res.ContainsKey('exception')) {
            # Happens only if there is an exception
            throw $res.exception
          }
          Write-Output '::endgroup::'
    # [Deployment removal] task(s)
    # ----------------------------
    - name: 'Remove deployed resources'
      if: ${{ always() && inputs.removeDeployment == 'true' && steps.deploy_step.outputs.deploymentNames != '' }}
      uses: azure/powershell@v1
      with:
        azPSVersion: 'latest'
        inlineScript: |
          # Grouping task logs
          Write-Output '::group::Remove deployed resources'
          # Load used function
          . (Join-Path $env:GITHUB_WORKSPACE 'src/bicep/utilities' 'pipelineTools' 'resourceRemoval' 'Initialize-DeploymentRemoval.ps1')
          $functionInput = @{
            TemplateFilePath  = Join-Path $env:GITHUB_WORKSPACE '${{ inputs.templateFilePath }}'
            DeploymentNames   = '${{ steps.deploy_step.outputs.deploymentNames }}' | ConvertFrom-Json
            ManagementGroupId = '${{ inputs.managementGroupId }}'
          }
          Write-Verbose 'Invoke task with' -Verbose
          Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose
          Initialize-DeploymentRemoval @functionInput
          Write-Output '::endgroup::'
